This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
c1_pro/
  ansi/
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
    white/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      white.c
  c1_pro.c
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
c1_pro_v2/
  ansi/
    non_light/
      keymaps/
        default/
          keymap.c
      keyboard.json
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
    white/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      white.c
  c1_pro_v2.c
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
c2_pro/
  ansi/
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
      rules.mk
    white/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rules.mk
      white.c
  c2_pro.c
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
c2_pro_v2/
  ansi/
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
    white/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      white.c
  c2_pro_v2.c
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
c3_pro/
  ansi/
    red/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      red.c
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
  c3_pro.c
  c3_pro.h
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
common/
  keychron_common.c
  keychron_common.h
q0/
  base/
    keymaps/
      default/
        keymap.c
    base.c
    config.h
    keyboard.json
    readme.md
  plus/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    keyboard.json
    plus.c
    readme.md
  config.h
  halconf.h
  info.json
  mcuconf.h
  q0.c
  readme.md
q10/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q10.c
  readme.md
q11/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  q11.c
  readme.md
q12/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q12.c
  readme.md
q1v1/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
  config.h
  info.json
  q1v1.c
  readme.md
q1v2/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
    rules.mk
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q1v2.c
  readme.md
q2/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
  chconf.h
  config.h
  halconf.h
  info.json
  mcuconf.h
  q2.c
  readme.md
q3/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
    rules.mk
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
    readme.md
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
    readme.md
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q3.c
  readme.md
q4/
  ansi/
    keymaps/
      default/
        keymap.c
      rbox_custom/
        config.h
        keymap.c
        rules.mk
    v1/
      config.h
      keyboard.json
      v1.c
    v2/
      config.h
      keyboard.json
      v2.c
    config.h
    info.json
    readme.md
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  config.h
  halconf.h
  info.json
  mcuconf.h
  q4.c
  readme.md
q5/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q5.c
  readme.md
q6/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q6.c
  readme.md
q60/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  q60.c
  readme.md
q65/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  q65.c
  readme.md
q7/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  q7.c
  readme.md
q8/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
  config.h
  halconf.h
  info.json
  mcuconf.h
  q8.c
  readme.md
q9/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    readme.md
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    readme.md
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    readme.md
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    readme.md
  config.h
  halconf.h
  info.json
  mcuconf.h
  q9.c
  readme.md
q9_plus/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  q9_plus.c
  readme.md
s1/
  ansi/
    rgb/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      rgb.c
    white/
      keymaps/
        default/
          keymap.c
      config.h
      keyboard.json
      white.c
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
  s1.c
v1/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
    rules.mk
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
  v1.c
v10/
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
  v10.c
v2/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
  v2.c
v3/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  jis/
    keymaps/
      default/
        keymap.c
    config.h
    jis.c
    keyboard.json
  jis_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    jis_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
  v3.c
v4/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
  v4.c
v5/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
  v5.c
v6/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
    rules.mk
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
    rules.mk
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
    rules.mk
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
    rules.mk
  config.h
  halconf.h
  info.json
  matrix.c
  mcuconf.h
  readme.md
  v6.c
v7/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
  v7.c
v8/
  ansi/
    keymaps/
      default/
        keymap.c
    ansi.c
    config.h
    keyboard.json
  ansi_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    ansi_encoder.c
    config.h
    keyboard.json
  iso/
    keymaps/
      default/
        keymap.c
    config.h
    iso.c
    keyboard.json
  iso_encoder/
    keymaps/
      default/
        keymap.c
        rules.mk
    config.h
    iso_encoder.c
    keyboard.json
  config.h
  halconf.h
  info.json
  mcuconf.h
  readme.md
  v8.c

================================================================
Files
================================================================

================
File: c1_pro/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: c1_pro/ansi/rgb/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
/* Set led driver current */
#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enable caps_lock, win os and mac os indicator */
#define CAPS_MAC_WIN_LED_INDEX 63

================
File: c1_pro/ansi/rgb/keyboard.json
================
{
    "usb": {
        "pid": "0x0510",
        "device_version": "1.0.0"
    },
    "features": {
        "rgb_matrix": true
    },
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":2, "y":0},
                {"matrix":[0, 2], "x":3, "y":0},
                {"matrix":[0, 3], "x":4, "y":0},
                {"matrix":[0, 4], "x":5, "y":0},
                {"matrix":[0, 5], "x":6.5, "y":0},
                {"matrix":[0, 6], "x":7.5, "y":0},
                {"matrix":[0, 7], "x":8.5, "y":0},
                {"matrix":[0, 8], "x":9.5, "y":0},
                {"matrix":[0, 9], "x":11, "y":0},
                {"matrix":[0,10], "x":12, "y":0},
                {"matrix":[0,11], "x":13, "y":0},
                {"matrix":[0,12], "x":14, "y":0},
                {"matrix":[0,14], "x":15.25, "y":0},
                {"matrix":[0,15], "x":16.25, "y":0},
                {"matrix":[3,14], "x":17.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,14], "x":15.25, "y":1.25},
                {"matrix":[1,15], "x":16.25, "y":1.25},
                {"matrix":[3,15], "x":17.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,14], "x":15.25, "y":2.25},
                {"matrix":[2,15], "x":16.25, "y":2.25},
                {"matrix":[3,12], "x":17.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":2.75},
                {"matrix":[4,15], "x":16.25, "y":4.25},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25, "w":1.25},
                {"matrix":[5,11], "x":11.25, "y":5.25, "w":1.25},
                {"matrix":[5,12], "x":12.5, "y":5.25, "w":1.25},
                {"matrix":[5,13], "x":13.75, "y":5.25, "w":1.25},
                {"matrix":[5,14], "x":15.25, "y":5.25},
                {"matrix":[5,15], "x":16.25, "y":5.25},
                {"matrix":[4,14], "x":17.25, "y":5.25}
            ]
        }
    },
    "rgb_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":26,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":39,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":52,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":65,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":85,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":98,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":111, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":124, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":156, "y":0},
            {"matrix":[0, 11], "flags":1, "x":169, "y":0},
            {"matrix":[0, 12], "flags":1, "x":182, "y":0},
            {"matrix":[0, 14], "flags":1, "x":198, "y":0},
            {"matrix":[0, 15], "flags":1, "x":211, "y":0},
            {"matrix":[3, 14], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":26,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":39,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":52,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":65,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":78,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":91,  "y":15},
            {"matrix":[1, 8],  "flags":4, "x":104, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":117, "y":15},
            {"matrix":[1, 10], "flags":4, "x":130, "y":15},
            {"matrix":[1, 11], "flags":4, "x":143, "y":15},
            {"matrix":[1, 12], "flags":4, "x":156, "y":15},
            {"matrix":[1, 13], "flags":1, "x":176, "y":15},
            {"matrix":[1, 14], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":211, "y":15},
            {"matrix":[3, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":3,   "y":27},
            {"matrix":[2, 1],  "flags":4, "x":20,  "y":27},
            {"matrix":[2, 2],  "flags":4, "x":33,  "y":27},
            {"matrix":[2, 3],  "flags":4, "x":46,  "y":27},
            {"matrix":[2, 4],  "flags":4, "x":59,  "y":27},
            {"matrix":[2, 5],  "flags":4, "x":72,  "y":27},
            {"matrix":[2, 6],  "flags":4, "x":85,  "y":27},
            {"matrix":[2, 7],  "flags":4, "x":98,  "y":27},
            {"matrix":[2, 8],  "flags":4, "x":111, "y":27},
            {"matrix":[2, 9],  "flags":4, "x":124, "y":27},
            {"matrix":[2, 10], "flags":4, "x":137, "y":27},
            {"matrix":[2, 11], "flags":4, "x":150, "y":27},
            {"matrix":[2, 12], "flags":4, "x":163, "y":27},
            {"matrix":[2, 13], "flags":4, "x":179, "y":27},
            {"matrix":[2, 14], "flags":1, "x":198, "y":27},
            {"matrix":[2, 15], "flags":1, "x":211, "y":27},
            {"matrix":[3, 12], "flags":1, "x":224, "y":27},

            {"matrix":[3, 0],  "flags":8, "x":5,   "y":39},
            {"matrix":[3, 1],  "flags":4, "x":23,  "y":39},
            {"matrix":[3, 2],  "flags":4, "x":36,  "y":39},
            {"matrix":[3, 3],  "flags":4, "x":49,  "y":39},
            {"matrix":[3, 4],  "flags":4, "x":62,  "y":39},
            {"matrix":[3, 5],  "flags":4, "x":75,  "y":39},
            {"matrix":[3, 6],  "flags":4, "x":88,  "y":39},
            {"matrix":[3, 7],  "flags":4, "x":101, "y":39},
            {"matrix":[3, 8],  "flags":4, "x":114, "y":39},
            {"matrix":[3, 9],  "flags":4, "x":127, "y":39},
            {"matrix":[3, 10], "flags":4, "x":140, "y":39},
            {"matrix":[3, 11], "flags":4, "x":153, "y":39},
            {"matrix":[3, 13], "flags":1, "x":174, "y":39},

            {"matrix":[4, 12], "flags":8, "x":211, "y":39},

            {"matrix":[4, 0],  "flags":1, "x":8,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":29,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":42,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":55,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":68,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":82,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":95, "y":52},
            {"matrix":[4, 8],  "flags":4, "x":108, "y":52},
            {"matrix":[4, 9],  "flags":4, "x":121, "y":52},
            {"matrix":[4, 10], "flags":4, "x":134, "y":52},
            {"matrix":[4, 11], "flags":4, "x":147, "y":52},
            {"matrix":[4, 13], "flags":1, "x":171, "y":52},
            {"matrix":[4, 15], "flags":1, "x":211, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":18,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":34,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":83,  "y":64},
            {"matrix":[5, 10], "flags":1, "x":132, "y":64},
            {"matrix":[5, 11], "flags":1, "x":148, "y":64},
            {"matrix":[5, 12], "flags":4, "x":165, "y":64},
            {"matrix":[5, 13], "flags":1, "x":181, "y":64},
            {"matrix":[5, 14], "flags":1, "x":198, "y":64},
            {"matrix":[5, 15], "flags":1, "x":211, "y":64},
            {"matrix":[4, 14], "flags":1, "x":224, "y":64}
        ],
        "sleep": true
    }
}

================
File: c1_pro/ansi/rgb/rgb.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off
#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // CAPS_MAC_WIN_LED_INDEX

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

// clang-format on

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    if ((host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 0))) {
        rgb_matrix_set_color(CAPS_MAC_WIN_LED_INDEX, 0, 255, 255);
    } else if ((!host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 0))) {
        rgb_matrix_set_color(CAPS_MAC_WIN_LED_INDEX, 0, 0, 255);
    } else if ((host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 2))) {
        rgb_matrix_set_color(CAPS_MAC_WIN_LED_INDEX, 255, 255, 0);
    } else if ((!host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 2))) {
        rgb_matrix_set_color(CAPS_MAC_WIN_LED_INDEX, 255, 0, 0);
    }
    return true;
}

#endif

================
File: c1_pro/ansi/white/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  _______,  LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: c1_pro/ansi/white/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND
#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enbale caps_lock, win os and mac os indicator */
#define CAPS_LOCK_LED_INDEX 63
#define MAC_LOCK_LED_INDEX 64
#define WIN_LOCK_LED_INDEX 65

================
File: c1_pro/ansi/white/keyboard.json
================
{
    "usb": {
        "pid": "0x0513",
        "device_version": "1.0.0"
    },
    "features": {
        "led_matrix": true
    },
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":2, "y":0},
                {"matrix":[0, 2], "x":3, "y":0},
                {"matrix":[0, 3], "x":4, "y":0},
                {"matrix":[0, 4], "x":5, "y":0},
                {"matrix":[0, 5], "x":6.5, "y":0},
                {"matrix":[0, 6], "x":7.5, "y":0},
                {"matrix":[0, 7], "x":8.5, "y":0},
                {"matrix":[0, 8], "x":9.5, "y":0},
                {"matrix":[0, 9], "x":11, "y":0},
                {"matrix":[0,10], "x":12, "y":0},
                {"matrix":[0,11], "x":13, "y":0},
                {"matrix":[0,12], "x":14, "y":0},
                {"matrix":[0,14], "x":15.25, "y":0},
                {"matrix":[0,15], "x":16.25, "y":0},
                {"matrix":[0,13], "x":17.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,14], "x":15.25, "y":1.25},
                {"matrix":[1,15], "x":16.25, "y":1.25},
                {"matrix":[3,12], "x":17.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,14], "x":15.25, "y":2.25},
                {"matrix":[2,15], "x":16.25, "y":2.25},
                {"matrix":[3,14], "x":17.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":2.75},
                {"matrix":[4,15], "x":16.25, "y":4.25},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25, "w":1.25},
                {"matrix":[5,11], "x":11.25, "y":5.25, "w":1.25},
                {"matrix":[5,12], "x":12.5, "y":5.25, "w":1.25},
                {"matrix":[5,13], "x":13.75, "y":5.25, "w":1.25},
                {"matrix":[5,14], "x":15.25, "y":5.25},
                {"matrix":[5,15], "x":16.25, "y":5.25},
                {"matrix":[3,15], "x":17.25, "y":5.25}
            ]
        }
    },
    "led_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_pinwheel": true,
            "band_spiral": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "cycle_out_in": true,
            "dual_beacon": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "solid_splash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":26,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":39,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":52,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":65,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":85,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":98,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":111, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":124, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":156, "y":0},
            {"matrix":[0, 11], "flags":1, "x":169, "y":0},
            {"matrix":[0, 12], "flags":1, "x":182, "y":0},
            {"matrix":[0, 14], "flags":1, "x":198, "y":0},
            {"matrix":[0, 15], "flags":1, "x":211, "y":0},
            {"matrix":[0, 13], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":26,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":39,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":52,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":65,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":78,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":91,  "y":15},
            {"matrix":[1, 8],  "flags":4, "x":104, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":117, "y":15},
            {"matrix":[1, 10], "flags":4, "x":130, "y":15},
            {"matrix":[1, 11], "flags":4, "x":143, "y":15},
            {"matrix":[1, 12], "flags":4, "x":156, "y":15},
            {"matrix":[1, 13], "flags":1, "x":176, "y":15},
            {"matrix":[1, 14], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":211, "y":15},
            {"matrix":[3, 12], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":3,   "y":27},
            {"matrix":[2, 1],  "flags":4, "x":20,  "y":27},
            {"matrix":[2, 2],  "flags":4, "x":33,  "y":27},
            {"matrix":[2, 3],  "flags":4, "x":46,  "y":27},
            {"matrix":[2, 4],  "flags":4, "x":59,  "y":27},
            {"matrix":[2, 5],  "flags":4, "x":72,  "y":27},
            {"matrix":[2, 6],  "flags":4, "x":85,  "y":27},
            {"matrix":[2, 7],  "flags":4, "x":98,  "y":27},
            {"matrix":[2, 8],  "flags":4, "x":111, "y":27},
            {"matrix":[2, 9],  "flags":4, "x":124, "y":27},
            {"matrix":[2, 10], "flags":4, "x":137, "y":27},
            {"matrix":[2, 11], "flags":4, "x":150, "y":27},
            {"matrix":[2, 12], "flags":4, "x":163, "y":27},
            {"matrix":[2, 13], "flags":4, "x":179, "y":27},
            {"matrix":[2, 14], "flags":1, "x":198, "y":27},
            {"matrix":[2, 15], "flags":1, "x":211, "y":27},
            {"matrix":[3, 14], "flags":1, "x":224, "y":27},

            {"matrix":[3, 0],  "flags":8, "x":5,   "y":39},
            {"matrix":[3, 1],  "flags":4, "x":23,  "y":39},
            {"matrix":[3, 2],  "flags":4, "x":36,  "y":39},
            {"matrix":[3, 3],  "flags":4, "x":49,  "y":39},
            {"matrix":[3, 4],  "flags":4, "x":62,  "y":39},
            {"matrix":[3, 5],  "flags":4, "x":75,  "y":39},
            {"matrix":[3, 6],  "flags":4, "x":88,  "y":39},
            {"matrix":[3, 7],  "flags":4, "x":101, "y":39},
            {"matrix":[3, 8],  "flags":4, "x":114, "y":39},
            {"matrix":[3, 9],  "flags":4, "x":127, "y":39},
            {"matrix":[3, 10], "flags":4, "x":140, "y":39},
            {"matrix":[3, 11], "flags":4, "x":153, "y":39},
            {"matrix":[3, 13], "flags":1, "x":174, "y":39},

            {"flags":8, "x":198, "y":39},
            {"flags":8, "x":211, "y":39},
            {"flags":8, "x":224, "y":39},

            {"matrix":[4, 0],  "flags":1, "x":8,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":29,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":42,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":55,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":68,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":82,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":95, "y":52},
            {"matrix":[4, 8],  "flags":4, "x":108, "y":52},
            {"matrix":[4, 9],  "flags":4, "x":121, "y":52},
            {"matrix":[4, 10], "flags":4, "x":134, "y":52},
            {"matrix":[4, 11], "flags":4, "x":147, "y":52},
            {"matrix":[4, 13], "flags":1, "x":171, "y":52},
            {"matrix":[4, 15], "flags":1, "x":211, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":18,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":34,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":83,  "y":64},
            {"matrix":[5, 10], "flags":1, "x":132, "y":64},
            {"matrix":[5, 11], "flags":1, "x":148, "y":64},
            {"matrix":[5, 12], "flags":4, "x":165, "y":64},
            {"matrix":[5, 13], "flags":1, "x":181, "y":64},
            {"matrix":[5, 14], "flags":1, "x":198, "y":64},
            {"matrix":[5, 15], "flags":1, "x":211, "y":64},
            {"matrix":[3, 15], "flags":1, "x":224, "y":64}
        ],
        "sleep": true,
        "react_on_keyup": true
    }
}

================
File: c1_pro/ansi/white/white.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off
#ifdef LED_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  |   */
    {0, CB1_CA16}, // esc
    {0, CB1_CA15}, // f1
    {0, CB1_CA14}, // f2
    {0, CB1_CA13}, // f3
    {0, CB1_CA12}, // f4
    {0, CB1_CA11}, // f5
    {0, CB1_CA10}, // f6
    {0, CB1_CA9},  // f7
    {0, CB1_CA8},  // f8
    {0, CB1_CA7},  // f9
    {0, CB1_CA6},  // f10
    {0, CB1_CA5},  // f11
    {0, CB1_CA4},  // f12
    {0, CB1_CA2},  // print
    {0, CB1_CA1},  // siri
    {0, CB7_CA1},  // light

    {0, CB2_CA16}, // ~
    {0, CB2_CA15}, // 1!
    {0, CB2_CA14}, // 2@
    {0, CB2_CA13}, // 3#
    {0, CB2_CA12}, // 4$
    {0, CB2_CA11}, // 5%
    {0, CB2_CA10}, // 6^
    {0, CB2_CA9},  // 7&
    {0, CB2_CA8},  // 8*
    {0, CB2_CA7},  // 9(
    {0, CB2_CA6},  // 0)
    {0, CB2_CA5},  // -_
    {0, CB2_CA4},  // =+
    {0, CB2_CA3},  // back space
    {0, CB2_CA2},  // INS
    {0, CB2_CA1},  // HOME
    {0, CB8_CA1},  // PGUP

    {0, CB3_CA16}, // tab
    {0, CB3_CA15}, // q
    {0, CB3_CA14}, // w
    {0, CB3_CA13}, // e
    {0, CB3_CA12}, // r
    {0, CB3_CA11}, // t
    {0, CB3_CA10}, // y
    {0, CB3_CA9},  // u
    {0, CB3_CA8},  // i
    {0, CB3_CA7},  // o
    {0, CB3_CA6},  // p
    {0, CB3_CA5},  // [{
    {0, CB3_CA4},  // ]}
    {0, CB3_CA3},  // \|
    {0, CB3_CA2},  // DEL
    {0, CB3_CA1},  // END
    {0, CB7_CA6},  // PGDN

    {0, CB4_CA16}, // caps lock
    {0, CB4_CA15}, // a
    {0, CB4_CA14}, // s
    {0, CB4_CA13}, // d
    {0, CB4_CA12}, // f
    {0, CB4_CA11}, // g
    {0, CB4_CA10}, // h
    {0, CB4_CA9},  // j
    {0, CB4_CA8},  // k
    {0, CB4_CA7},  // l
    {0, CB4_CA6},  // ;:
    {0, CB4_CA5},  // '"
    {0, CB4_CA3},  // enter

    {0, CB8_CA7},  // CPAS
    {0, CB8_CA8},  // MAC
    {0, CB8_CA9},  // WIN

    {0, CB5_CA16}, // left shift
    {0, CB5_CA14}, // z
    {0, CB5_CA13}, // x
    {0, CB5_CA12}, // c
    {0, CB5_CA11}, // v
    {0, CB5_CA10}, // b
    {0, CB5_CA9},  // b
    {0, CB5_CA8},  // n
    {0, CB5_CA7},  // m
    {0, CB5_CA6},  // ,<
    {0, CB5_CA5},  // .>
    {0, CB5_CA3},  // right shift
    {0, CB5_CA1},  // up

    {0, CB6_CA16}, // left ctrl
    {0, CB6_CA15}, // left command
    {0, CB6_CA14}, // left option
    {0, CB6_CA10}, // space
    {0, CB6_CA6},  // right command
    {0, CB6_CA5},  // right option
    {0, CB6_CA4},  // right ctrl
    {0, CB6_CA3},  // Fn
    {0, CB6_CA2},  // left
    {0, CB6_CA1},  // down
    {0, CB7_CA13}, // right
};

// clang-format on

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case LM_TOGG:
            if (record->event.pressed) {
                switch (led_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        led_matrix_set_flags(LED_FLAG_NONE);
                        led_matrix_set_value_all(0);
                    } break;
                    default: {
                        led_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!led_matrix_is_enabled()) {
                led_matrix_set_flags(LED_FLAG_ALL);
                led_matrix_enable();
            }
            return false;
    }
    return true;
}

bool led_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!led_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    if ((host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 0))) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 255);
        led_matrix_set_value(MAC_LOCK_LED_INDEX, 255);
        led_matrix_set_value(WIN_LOCK_LED_INDEX, 0);
    } else if ((!host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 0))) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 0);
        led_matrix_set_value(MAC_LOCK_LED_INDEX, 255);
        led_matrix_set_value(WIN_LOCK_LED_INDEX, 0);
    } else if ((host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 2))) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 255);
        led_matrix_set_value(MAC_LOCK_LED_INDEX, 0);
        led_matrix_set_value(WIN_LOCK_LED_INDEX, 255);
    } else if ((!host_keyboard_led_state().caps_lock) && (default_layer_state == (1 << 2))) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 0);
        led_matrix_set_value(MAC_LOCK_LED_INDEX, 0);
        led_matrix_set_value(WIN_LOCK_LED_INDEX, 255);
    }
    return true;
}

#endif

================
File: c1_pro/c1_pro.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

================
File: c1_pro/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

/* Old default behavior of mod-taps */
#define HOLD_ON_OTHER_KEY_PRESS

================
File: c1_pro/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: c1_pro/info.json
================
{
    "keyboard_name": "Keychron C1 Pro",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "usb": {
        "vid": "0x3434"
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "H3"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "community_layouts": ["tkl_ansi"]
}

================
File: c1_pro/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: c1_pro/readme.md
================
# Keychron C1 Pro

![Keychron C1 Pro](https://i.imgur.com/Svdm4lph.jpg)

A customizable 80% TKL keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron C1 Pro
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/c1/ansi/rgb:default
    make keychron/c1/ansi/white:default

Flashing example for this keyboard:

    make keychron/c1/ansi/rgb:default:flash
    make keychron/c1/ansi/white:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: c1_pro_v2/ansi/non_light/keymaps/default/keymap.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  KC_F5,    KC_F6,    KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    KC_SLEP,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    KC_SLEP,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  KC_F5,    KC_F6,    KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

// clang-format on

================
File: c1_pro_v2/ansi/non_light/keyboard.json
================
{
    "keyboards_name": "Keychron C1 Pro V2 Non-Light",
    "usb": {
        "pid": "0x051C",
        "device_version": "1.0.0"
    }
}

================
File: c1_pro_v2/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

// clang-format on

================
File: c1_pro_v2/ansi/rgb/config.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE { 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28 }

================
File: c1_pro_v2/ansi/rgb/keyboard.json
================
{
    "keyboard_name": "Keychron C1 Pro V2 RGB",
    "features": {
        "rgb_matrix": true
    },
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 85, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 98, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 111, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1},
            {"matrix": [1, 16], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 27, "flags": 1},
            {"matrix": [2, 1], "x": 20, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 33, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 27, "flags": 4},
            {"matrix": [2, 4], "x": 59, "y": 27, "flags": 4},
            {"matrix": [2, 5], "x": 72, "y": 27, "flags": 4},
            {"matrix": [2, 6], "x": 85, "y": 27, "flags": 4},
            {"matrix": [2, 7], "x": 98, "y": 27, "flags": 4},
            {"matrix": [2, 8], "x": 111, "y": 27, "flags": 4},
            {"matrix": [2, 9], "x": 124, "y": 27, "flags": 4},
            {"matrix": [2, 10], "x": 137, "y": 27, "flags": 4},
            {"matrix": [2, 11], "x": 150, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 163, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 179, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 198, "y": 27, "flags": 1},
            {"matrix": [2, 15], "x": 211, "y": 27, "flags": 1},
            {"matrix": [2, 16], "x": 224, "y": 27, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 39, "flags": 8},
            {"matrix": [3, 1], "x": 23, "y": 39, "flags": 4},
            {"matrix": [3, 2], "x": 36, "y": 39, "flags": 4},
            {"matrix": [3, 3], "x": 49, "y": 39, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 39, "flags": 4},
            {"matrix": [3, 5], "x": 75, "y": 39, "flags": 4},
            {"matrix": [3, 6], "x": 88, "y": 39, "flags": 4},
            {"matrix": [3, 7], "x": 101, "y": 39, "flags": 4},
            {"matrix": [3, 8], "x": 114, "y": 39, "flags": 4},
            {"matrix": [3, 9], "x": 127, "y": 39, "flags": 4},
            {"matrix": [3, 10], "x": 140, "y": 39, "flags": 4},
            {"matrix": [3, 11], "x": 153, "y": 39, "flags": 4},
            {"matrix": [3, 13], "x": 174, "y": 39, "flags": 1},

            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 82, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 95, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 108, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 121, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 134, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 147, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},
            
            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 132, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 165, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 181, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 224, "y": 64, "flags": 1}
        ],
        "sleep": true
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0516"
    }
}

================
File: c1_pro_v2/ansi/rgb/rgb.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
};
#endif // RGB_MATRIX_ENABLE

// clang-format on

================
File: c1_pro_v2/ansi/white/keymaps/default/keymap.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  _______,  LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

// clang-format on

================
File: c1_pro_v2/ansi/white/config.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Scan phase of led driver set as MSKPHASE_9CHANNEL(defined as 0x03 in CKLED2001.h) */
#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

#define SNLED27351_CURRENT_TUNE { 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60 }

================
File: c1_pro_v2/ansi/white/keyboard.json
================
{
    "features": {
        "led_matrix": true
    },
    "led_matrix": {
        "animations": {
            "band_pinwheel": true,
            "band_spiral": true,
            "breathing": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_up_down": true,
            "dual_beacon": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 85, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 98, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 111, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1},
            {"matrix": [1, 16], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 27, "flags": 1},
            {"matrix": [2, 1], "x": 20, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 33, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 27, "flags": 4},
            {"matrix": [2, 4], "x": 59, "y": 27, "flags": 4},
            {"matrix": [2, 5], "x": 72, "y": 27, "flags": 4},
            {"matrix": [2, 6], "x": 85, "y": 27, "flags": 4},
            {"matrix": [2, 7], "x": 98, "y": 27, "flags": 4},
            {"matrix": [2, 8], "x": 111, "y": 27, "flags": 4},
            {"matrix": [2, 9], "x": 124, "y": 27, "flags": 4},
            {"matrix": [2, 10], "x": 137, "y": 27, "flags": 4},
            {"matrix": [2, 11], "x": 150, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 163, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 179, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 198, "y": 27, "flags": 1},
            {"matrix": [2, 15], "x": 211, "y": 27, "flags": 1},
            {"matrix": [2, 16], "x": 224, "y": 27, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 39, "flags": 8},
            {"matrix": [3, 1], "x": 23, "y": 39, "flags": 4},
            {"matrix": [3, 2], "x": 36, "y": 39, "flags": 4},
            {"matrix": [3, 3], "x": 49, "y": 39, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 39, "flags": 4},
            {"matrix": [3, 5], "x": 75, "y": 39, "flags": 4},
            {"matrix": [3, 6], "x": 88, "y": 39, "flags": 4},
            {"matrix": [3, 7], "x": 101, "y": 39, "flags": 4},
            {"matrix": [3, 8], "x": 114, "y": 39, "flags": 4},
            {"matrix": [3, 9], "x": 127, "y": 39, "flags": 4},
            {"matrix": [3, 10], "x": 140, "y": 39, "flags": 4},
            {"matrix": [3, 11], "x": 153, "y": 39, "flags": 4},
            {"matrix": [3, 13], "x": 174, "y": 39, "flags": 1},

            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 82, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 95, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 108, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 121, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 134, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 147, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},
            
            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 132, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 165, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 181, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 224, "y": 64, "flags": 1}
        ],
        "sleep": true
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0519"
    }
}

================
File: c1_pro_v2/ansi/white/white.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef LED_MATRIX_ENABLE
// clang-format off
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  |   */
    {0, CB1_CA16},
    {0, CB1_CA15},
    {0, CB1_CA14},
    {0, CB1_CA13},
    {0, CB1_CA12},
    {0, CB1_CA11},
    {0, CB1_CA10},
    {0, CB1_CA9 },
    {0, CB1_CA8 },
    {0, CB1_CA7 },
    {0, CB1_CA6 },
    {0, CB1_CA5 },
    {0, CB1_CA4 },
    {0, CB1_CA2 },
    {0, CB1_CA1 },
    {0, CB7_CA1 },

    {0, CB2_CA16},
    {0, CB2_CA15},
    {0, CB2_CA14},
    {0, CB2_CA13},
    {0, CB2_CA12},
    {0, CB2_CA11},
    {0, CB2_CA10},
    {0, CB2_CA9 },
    {0, CB2_CA8 },
    {0, CB2_CA7 },
    {0, CB2_CA6 },
    {0, CB2_CA5 },
    {0, CB2_CA4 },
    {0, CB2_CA3 },
    {0, CB2_CA2 },
    {0, CB2_CA1 },
    {0, CB8_CA1 },

    {0, CB3_CA16},
    {0, CB3_CA15},
    {0, CB3_CA14},
    {0, CB3_CA13},
    {0, CB3_CA12},
    {0, CB3_CA11},
    {0, CB3_CA10},
    {0, CB3_CA9 },
    {0, CB3_CA8 },
    {0, CB3_CA7 },
    {0, CB3_CA6 },
    {0, CB3_CA5 },
    {0, CB3_CA4 },
    {0, CB3_CA3 },
    {0, CB3_CA2 },
    {0, CB3_CA1 },
    {0, CB7_CA6 },

    {0, CB4_CA16},
    {0, CB4_CA15},
    {0, CB4_CA14},
    {0, CB4_CA13},
    {0, CB4_CA12},
    {0, CB4_CA11},
    {0, CB4_CA10},
    {0, CB4_CA9 },
    {0, CB4_CA8 },
    {0, CB4_CA7 },
    {0, CB4_CA6 },
    {0, CB4_CA5 },
    {0, CB4_CA3 },

    {0, CB5_CA16},
    {0, CB5_CA14},
    {0, CB5_CA13},
    {0, CB5_CA12},
    {0, CB5_CA11},
    {0, CB5_CA10},
    {0, CB5_CA9 },
    {0, CB5_CA8 },
    {0, CB5_CA7 },
    {0, CB5_CA6 },
    {0, CB5_CA5 },
    {0, CB5_CA3 },
    {0, CB5_CA1 },

    {0, CB6_CA16},
    {0, CB6_CA15},
    {0, CB6_CA14},
    {0, CB6_CA10},
    {0, CB6_CA6 },
    {0, CB6_CA5 },
    {0, CB6_CA4 },
    {0, CB6_CA3 },
    {0, CB6_CA2 },
    {0, CB6_CA1 },
    {0, CB7_CA13},
};
#endif

// clang-fomat on

================
File: c1_pro_v2/c1_pro_v2.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 0 : 2));
    }
    return true;
}
#endif

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
#ifdef LED_MATRIX_ENABLE
        case QK_LED_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (led_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        led_matrix_set_flags(LED_FLAG_NONE);
                        led_matrix_set_value_all(0);
                    } break;
                    default: {
                        led_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!led_matrix_is_enabled()) {
                led_matrix_set_flags(LED_FLAG_ALL);
                led_matrix_enable();
            }
            return false;
#endif
        default:
            return true;
    }
}

void keyboard_post_init_kb(void) {
    gpio_set_pin_output_push_pull(LED_MAC_OS_PIN);
    gpio_set_pin_output_push_pull(LED_WIN_OS_PIN);
    gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);
    gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);

    keyboard_post_init_user();
}

void housekeeping_task_kb(void) {
    if (default_layer_state == (1U << 0)) {
        gpio_write_pin(LED_MAC_OS_PIN, LED_OS_PIN_ON_STATE);
        gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);
    }
    if (default_layer_state == (1U << 2)) {
        gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);
        gpio_write_pin(LED_WIN_OS_PIN, LED_OS_PIN_ON_STATE);
    }
}

void suspend_power_down_kb(void) {
    gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);
    gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);

    suspend_power_down_user();
}

================
File: c1_pro_v2/config.h
================
/* Copyright 2025 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* DIP switch */
#define DIP_SWITCH_PINS { D2 }

/* Increase I2C speed to 1000 KHz */
#define I2C1_CLOCK_SPEED 400000
#define I2C1_DUTY_CYCLE FAST_DUTY_CYCLE_2

/* System indication led */
#define LED_MAC_OS_PIN C10
#define LED_WIN_OS_PIN C11
#define LED_OS_PIN_ON_STATE 1

================
File: c1_pro_v2/halconf.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: c1_pro_v2/info.json
================
{
    "manufacturer": "Keychron",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "COL2ROW",
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true
    },
    "indicators": {
        "caps_lock": "C9"
    },
    "matrix_pins": {
        "cols": ["A0", "A1", "A2", "A3", "C0", "C1", "C2", "C3", "A8", "C12", "B9", "C6", "C7", "C4", "C5", "A15", "B10"],
        "rows": ["B0", "B1", "B8", "B3", "B4", "B5"]
    },
    "processor": "STM32F401",
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    },
    "community_layouts": ["tkl_ansi"],
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: c1_pro_v2/mcuconf.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_HSECLK
#define STM32_HSECLK 16000000U

#undef STM32_PLLM_VALUE
#define STM32_PLLM_VALUE 8

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: c1_pro_v2/readme.md
================
# Keychron C1 Pro V2

![Keychron C1 Pro](https://i.imgur.com/Svdm4lph.jpg)

A customizable 80% TKL keyboard.

v1 is based on STM32L432 and v2 is based on STM32F402.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron C1 Pro
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/c1_pro_v2/ansi/rgb:default
    make keychron/c1_pro_v2/ansi/white:default
    make keychron/c1_pro_v2/ansi/non_light:default

Flashing example for this keyboard:

    make keychron/c1_pro_v2/ansi/rgb:default:flash
    make keychron/c1_pro_v2/ansi/white:default:flash
    make keychron/c1_pro_v2/ansi/non_light:default:flash

## bootloader

Enter the bootloader in two ways:

* **Bootmagic reset**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.
* **Physical reset button**: Briefly press the RESET button under the spacebar.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: c2_pro/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [MAC_FN] = LAYOUT(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),

    [WIN_BASE] = LAYOUT(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [WIN_FN] = LAYOUT(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),
};

================
File: c2_pro/ansi/rgb/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE \
    { 0xAA, 0xAA, 0x56, 0xAA, 0xAA, 0x56, 0xAA, 0xAA, 0x56, 0xAA, 0xAA, 0x56 }

/* Enable indicator LED*/
#define NUM_LED_INDEX 16
#define CAPS_LED_INDEX 17
#define MAC_LED_INDEX 18
#define WIN_LED_INDEX 19

================
File: c2_pro/ansi/rgb/keyboard.json
================
{
    "usb": {
        "pid": "0x0520",
        "device_version": "1.0.0"
    },
    "features": {
        "rgb_matrix": true
    },
    "layouts": {
        "LAYOUT": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":2, "y":0},
                {"matrix":[0, 2], "x":3, "y":0},
                {"matrix":[0, 3], "x":4, "y":0},
                {"matrix":[0, 4], "x":5, "y":0},
                {"matrix":[0, 5], "x":6.5, "y":0},
                {"matrix":[0, 6], "x":7.5, "y":0},
                {"matrix":[0, 7], "x":8.5, "y":0},
                {"matrix":[0, 8], "x":9.5, "y":0},
                {"matrix":[0, 9], "x":11, "y":0},
                {"matrix":[0,10], "x":12, "y":0},
                {"matrix":[0,11], "x":13, "y":0},
                {"matrix":[0,12], "x":14, "y":0},
                {"matrix":[0,14], "x":15.25, "y":0},
                {"matrix":[0,15], "x":16.25, "y":0},
                {"matrix":[0,16], "x":17.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,14], "x":15.25, "y":1.25},
                {"matrix":[1,15], "x":16.25, "y":1.25},
                {"matrix":[1,16], "x":17.25, "y":1.25},
                {"matrix":[1,17], "x":18.5, "y":1.25},
                {"matrix":[1,18], "x":19.5, "y":1.25},
                {"matrix":[0,17], "x":20.5, "y":1.25},
                {"matrix":[0,18], "x":21.5, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,14], "x":15.25, "y":2.25},
                {"matrix":[2,15], "x":16.25, "y":2.25},
                {"matrix":[2,16], "x":17.25, "y":2.25},
                {"matrix":[2,17], "x":18.5, "y":2.25},
                {"matrix":[2,18], "x":19.5, "y":2.25},
                {"matrix":[3,14], "x":20.5, "y":2.25},
                {"matrix":[3,15], "x":21.5, "y":2.25, "h":2},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},
                {"matrix":[3,17], "x":18.5, "y":3.25},
                {"matrix":[3,18], "x":19.5, "y":3.25},
                {"matrix":[3,16], "x":20.5, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":2.75},
                {"matrix":[4,15], "x":16.25, "y":4.25},
                {"matrix":[4,17], "x":18.5, "y":4.25},
                {"matrix":[4,18], "x":19.5, "y":4.25},
                {"matrix":[4,14], "x":20.5, "y":4.25},
                {"matrix":[4,16], "x":21.5, "y":4.25, "h":2},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25, "w":1.25},
                {"matrix":[5,11], "x":11.25, "y":5.25, "w":1.25},
                {"matrix":[5,12], "x":12.5, "y":5.25, "w":1.25},
                {"matrix":[5,13], "x":13.75, "y":5.25, "w":1.25},
                {"matrix":[5,14], "x":15.25, "y":5.25},
                {"matrix":[5,15], "x":16.25, "y":5.25},
                {"matrix":[5,16], "x":17.25, "y":5.25},
                {"matrix":[5,17], "x":18.5, "y":5.25, "w":2},
                {"matrix":[5,18], "x":20.5, "y":5.25}
            ]
        }
    },
    "rgb_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":21,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":31,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":42,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":52,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":68,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":78,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":89,  "y":0},
            {"matrix":[0, 8],  "flags":1, "x":99,  "y":0},
            {"matrix":[0, 9],  "flags":1, "x":115, "y":0},
            {"matrix":[0, 10], "flags":1, "x":125, "y":0},
            {"matrix":[0, 11], "flags":1, "x":136, "y":0},
            {"matrix":[0, 12], "flags":1, "x":146, "y":0},
            {"matrix":[0, 14], "flags":1, "x":159, "y":0},
            {"matrix":[0, 15], "flags":1, "x":169, "y":0},
            {"matrix":[0, 16], "flags":1, "x":180, "y":0},

            {"matrix":[0, 13], "flags":8, "x":193, "y":0},
            {"matrix":[0, 13], "flags":8, "x":203, "y":0},
            {"matrix":[0, 13], "flags":8, "x":214, "y":0},
            {"matrix":[0, 13], "flags":8, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":4, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":10,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":21,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":31,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":42,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":52,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":63,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 8],  "flags":4, "x":83,  "y":15},
            {"matrix":[1, 9],  "flags":4, "x":94,  "y":15},
            {"matrix":[1, 10], "flags":4, "x":104, "y":15},
            {"matrix":[1, 11], "flags":4, "x":115, "y":15},
            {"matrix":[1, 12], "flags":4, "x":125, "y":15},
            {"matrix":[1, 13], "flags":1, "x":141, "y":15},
            {"matrix":[1, 14], "flags":1, "x":159, "y":15},
            {"matrix":[1, 15], "flags":1, "x":169, "y":15},
            {"matrix":[1, 16], "flags":1, "x":180, "y":15},
            {"matrix":[1, 17], "flags":8, "x":193, "y":15},
            {"matrix":[1, 18], "flags":4, "x":203, "y":15},
            {"matrix":[0, 17], "flags":4, "x":214, "y":15},
            {"matrix":[0, 18], "flags":4, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":3,   "y":27},
            {"matrix":[2, 1],  "flags":4, "x":16,  "y":27},
            {"matrix":[2, 2],  "flags":4, "x":26,  "y":27},
            {"matrix":[2, 3],  "flags":4, "x":36,  "y":27},
            {"matrix":[2, 4],  "flags":4, "x":47,  "y":27},
            {"matrix":[2, 5],  "flags":4, "x":57,  "y":27},
            {"matrix":[2, 6],  "flags":4, "x":68,  "y":27},
            {"matrix":[2, 7],  "flags":4, "x":78,  "y":27},
            {"matrix":[2, 8],  "flags":4, "x":89,  "y":27},
            {"matrix":[2, 9],  "flags":4, "x":99,  "y":27},
            {"matrix":[2, 10], "flags":4, "x":109, "y":27},
            {"matrix":[2, 11], "flags":4, "x":120, "y":27},
            {"matrix":[2, 12], "flags":4, "x":130, "y":27},
            {"matrix":[2, 13], "flags":4, "x":143, "y":27},
            {"matrix":[2, 14], "flags":1, "x":159, "y":27},
            {"matrix":[2, 15], "flags":1, "x":169, "y":27},
            {"matrix":[2, 16], "flags":1, "x":180, "y":27},
            {"matrix":[2, 17], "flags":4, "x":193, "y":27},
            {"matrix":[2, 18], "flags":4, "x":203, "y":27},
            {"matrix":[3, 14], "flags":4, "x":214, "y":27},
            {"matrix":[3, 15], "flags":4, "x":224, "y":27},

            {"matrix":[3, 0],  "flags":8, "x":4,   "y":40},
            {"matrix":[3, 1],  "flags":4, "x":18,  "y":40},
            {"matrix":[3, 2],  "flags":4, "x":29,  "y":40},
            {"matrix":[3, 3],  "flags":4, "x":39,  "y":40},
            {"matrix":[3, 4],  "flags":4, "x":50,  "y":40},
            {"matrix":[3, 5],  "flags":4, "x":60,  "y":40},
            {"matrix":[3, 6],  "flags":4, "x":70,  "y":40},
            {"matrix":[3, 7],  "flags":4, "x":81,  "y":40},
            {"matrix":[3, 8],  "flags":4, "x":91,  "y":40},
            {"matrix":[3, 9],  "flags":4, "x":102, "y":40},
            {"matrix":[3, 10], "flags":4, "x":112, "y":40},
            {"matrix":[3, 11], "flags":4, "x":123, "y":40},
            {"matrix":[3, 13], "flags":4, "x":139, "y":40},
            {"matrix":[3, 17], "flags":4, "x":193, "y":40},
            {"matrix":[3, 18], "flags":4, "x":203, "y":40},
            {"matrix":[3, 16], "flags":4, "x":214, "y":40},

            {"matrix":[4, 0],  "flags":1, "x":7,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":23,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":34,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":44,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":55,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":65,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":76,  "y":52},
            {"matrix":[4, 8],  "flags":4, "x":86,  "y":52},
            {"matrix":[4, 9],  "flags":4, "x":96,  "y":52},
            {"matrix":[4, 10], "flags":4, "x":107, "y":52},
            {"matrix":[4, 11], "flags":4, "x":117, "y":52},
            {"matrix":[4, 13], "flags":1, "x":137, "y":52},
            {"matrix":[4, 15], "flags":1, "x":169, "y":52},
            {"matrix":[4, 17], "flags":4, "x":193, "y":52},
            {"matrix":[4, 18], "flags":4, "x":203, "y":52},
            {"matrix":[4, 14], "flags":4, "x":214, "y":52},
            {"matrix":[4, 16], "flags":4, "x":224, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":1,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":14,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":27,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":66,  "y":64},
            {"matrix":[5, 10], "flags":1, "x":105, "y":64},
            {"matrix":[5, 11], "flags":1, "x":118, "y":64},
            {"matrix":[5, 12], "flags":4, "x":131, "y":64},
            {"matrix":[5, 13], "flags":1, "x":145, "y":64},
            {"matrix":[5, 14], "flags":1, "x":159, "y":64},
            {"matrix":[5, 15], "flags":1, "x":169, "y":64},
            {"matrix":[5, 16], "flags":1, "x":180, "y":64},
            {"matrix":[5, 17], "flags":4, "x":198, "y":64},
            {"matrix":[5, 18], "flags":4, "x":214, "y":64}
        ],
        "sleep": true
    }
}

================
File: c2_pro/ansi/rgb/rgb.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},

    {0, CB12_CA6,    CB10_CA6,    CB11_CA6}, // CapsLock
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7}, // NumLock
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8}, // Mac
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4}, // Win

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
};
#endif //RGB_MATRIX_ENABLE

================
File: c2_pro/ansi/rgb/rules.mk
================
# custom matrix setup
SRC += matrix.c

================
File: c2_pro/ansi/white/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [MAC_FN] = LAYOUT(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),

    [WIN_BASE] = LAYOUT(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [WIN_FN] = LAYOUT(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),
};

================
File: c2_pro/ansi/white/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND
#define SNLED27351_CURRENT_TUNE \
    { 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0 }

/* Enable indicator LED*/
#define NUM_LED_INDEX 16
#define CAPS_LED_INDEX 17
#define MAC_LED_INDEX 18
#define WIN_LED_INDEX 19

================
File: c2_pro/ansi/white/keyboard.json
================
{
    "usb": {
        "pid": "0x0523",
        "device_version": "1.0.0"
    },
    "features": {
        "led_matrix": true
    },
    "layouts": {
        "LAYOUT": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":2, "y":0},
                {"matrix":[0, 2], "x":3, "y":0},
                {"matrix":[0, 3], "x":4, "y":0},
                {"matrix":[0, 4], "x":5, "y":0},
                {"matrix":[0, 5], "x":6.5, "y":0},
                {"matrix":[0, 6], "x":7.5, "y":0},
                {"matrix":[0, 7], "x":8.5, "y":0},
                {"matrix":[0, 8], "x":9.5, "y":0},
                {"matrix":[0, 9], "x":11, "y":0},
                {"matrix":[0,10], "x":12, "y":0},
                {"matrix":[0,11], "x":13, "y":0},
                {"matrix":[0,12], "x":14, "y":0},
                {"matrix":[0,14], "x":15.25, "y":0},
                {"matrix":[0,15], "x":16.25, "y":0},
                {"matrix":[0,16], "x":17.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,14], "x":15.25, "y":1.25},
                {"matrix":[1,15], "x":16.25, "y":1.25},
                {"matrix":[1,16], "x":17.25, "y":1.25},
                {"matrix":[1,17], "x":18.5, "y":1.25},
                {"matrix":[1,18], "x":19.5, "y":1.25},
                {"matrix":[1,19], "x":20.5, "y":1.25},
                {"matrix":[0,17], "x":21.5, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,14], "x":15.25, "y":2.25},
                {"matrix":[2,15], "x":16.25, "y":2.25},
                {"matrix":[2,16], "x":17.25, "y":2.25},
                {"matrix":[2,17], "x":18.5, "y":2.25},
                {"matrix":[2,18], "x":19.5, "y":2.25},
                {"matrix":[2,19], "x":20.5, "y":2.25},
                {"matrix":[0,18], "x":21.5, "y":2.25, "h":2},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},
                {"matrix":[3,17], "x":18.5, "y":3.25},
                {"matrix":[3,18], "x":19.5, "y":3.25},
                {"matrix":[3,19], "x":20.5, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":2.75},
                {"matrix":[4,15], "x":16.25, "y":4.25},
                {"matrix":[4,17], "x":18.5, "y":4.25},
                {"matrix":[4,18], "x":19.5, "y":4.25},
                {"matrix":[4,19], "x":20.5, "y":4.25},
                {"matrix":[0,19], "x":21.5, "y":4.25, "h":2},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25, "w":1.25},
                {"matrix":[5,11], "x":11.25, "y":5.25, "w":1.25},
                {"matrix":[5,12], "x":12.5, "y":5.25, "w":1.25},
                {"matrix":[5,13], "x":13.75, "y":5.25, "w":1.25},
                {"matrix":[5,14], "x":15.25, "y":5.25},
                {"matrix":[5,15], "x":16.25, "y":5.25},
                {"matrix":[5,16], "x":17.25, "y":5.25},
                {"matrix":[5,17], "x":18.5, "y":5.25, "w":2},
                {"matrix":[5,19], "x":20.5, "y":5.25}
            ]
        }
    },
    "led_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_pinwheel": true,
            "band_spiral": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "cycle_out_in": true,
            "dual_beacon": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "solid_splash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":21,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":31,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":42,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":52,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":68,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":78,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":89,  "y":0},
            {"matrix":[0, 8],  "flags":1, "x":99,  "y":0},
            {"matrix":[0, 9],  "flags":1, "x":115, "y":0},
            {"matrix":[0, 10], "flags":1, "x":125, "y":0},
            {"matrix":[0, 11], "flags":1, "x":136, "y":0},
            {"matrix":[0, 12], "flags":1, "x":146, "y":0},
            {"matrix":[0, 14], "flags":1, "x":159, "y":0},
            {"matrix":[0, 15], "flags":1, "x":169, "y":0},
            {"matrix":[0, 16], "flags":1, "x":180, "y":0},

            {"flags":8, "x":193, "y":0},
            {"flags":8, "x":203, "y":0},
            {"flags":8, "x":214, "y":0},
            {"flags":8, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":4, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":10,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":21,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":31,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":42,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":52,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":63,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 8],  "flags":4, "x":83,  "y":15},
            {"matrix":[1, 9],  "flags":4, "x":94,  "y":15},
            {"matrix":[1, 10], "flags":4, "x":104, "y":15},
            {"matrix":[1, 11], "flags":4, "x":115, "y":15},
            {"matrix":[1, 12], "flags":4, "x":125, "y":15},
            {"matrix":[1, 13], "flags":1, "x":141, "y":15},
            {"matrix":[1, 14], "flags":1, "x":159, "y":15},
            {"matrix":[1, 15], "flags":1, "x":169, "y":15},
            {"matrix":[1, 16], "flags":1, "x":180, "y":15},
            {"matrix":[1, 17], "flags":8, "x":193, "y":15},
            {"matrix":[1, 18], "flags":4, "x":203, "y":15},
            {"matrix":[1, 19], "flags":4, "x":214, "y":15},
            {"matrix":[0, 17], "flags":4, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":3,   "y":27},
            {"matrix":[2, 1],  "flags":4, "x":16,  "y":27},
            {"matrix":[2, 2],  "flags":4, "x":26,  "y":27},
            {"matrix":[2, 3],  "flags":4, "x":36,  "y":27},
            {"matrix":[2, 4],  "flags":4, "x":47,  "y":27},
            {"matrix":[2, 5],  "flags":4, "x":57,  "y":27},
            {"matrix":[2, 6],  "flags":4, "x":68,  "y":27},
            {"matrix":[2, 7],  "flags":4, "x":78,  "y":27},
            {"matrix":[2, 8],  "flags":4, "x":89,  "y":27},
            {"matrix":[2, 9],  "flags":4, "x":99,  "y":27},
            {"matrix":[2, 10], "flags":4, "x":109, "y":27},
            {"matrix":[2, 11], "flags":4, "x":120, "y":27},
            {"matrix":[2, 12], "flags":4, "x":130, "y":27},
            {"matrix":[2, 13], "flags":4, "x":143, "y":27},
            {"matrix":[2, 14], "flags":1, "x":159, "y":27},
            {"matrix":[2, 15], "flags":1, "x":169, "y":27},
            {"matrix":[2, 16], "flags":1, "x":180, "y":27},
            {"matrix":[2, 17], "flags":4, "x":193, "y":27},
            {"matrix":[2, 18], "flags":4, "x":203, "y":27},
            {"matrix":[2, 19], "flags":4, "x":214, "y":27},
            {"matrix":[0, 18], "flags":4, "x":224, "y":27},

            {"matrix":[3, 0],  "flags":8, "x":4,   "y":40},
            {"matrix":[3, 1],  "flags":4, "x":18,  "y":40},
            {"matrix":[3, 2],  "flags":4, "x":29,  "y":40},
            {"matrix":[3, 3],  "flags":4, "x":39,  "y":40},
            {"matrix":[3, 4],  "flags":4, "x":50,  "y":40},
            {"matrix":[3, 5],  "flags":4, "x":60,  "y":40},
            {"matrix":[3, 6],  "flags":4, "x":70,  "y":40},
            {"matrix":[3, 7],  "flags":4, "x":81,  "y":40},
            {"matrix":[3, 8],  "flags":4, "x":91,  "y":40},
            {"matrix":[3, 9],  "flags":4, "x":102, "y":40},
            {"matrix":[3, 10], "flags":4, "x":112, "y":40},
            {"matrix":[3, 11], "flags":4, "x":123, "y":40},
            {"matrix":[3, 13], "flags":4, "x":139, "y":40},
            {"matrix":[3, 17], "flags":4, "x":193, "y":40},
            {"matrix":[3, 18], "flags":4, "x":203, "y":40},
            {"matrix":[3, 19], "flags":4, "x":214, "y":40},

            {"matrix":[4, 0],  "flags":1, "x":7,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":23,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":34,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":44,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":55,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":65,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":76,  "y":52},
            {"matrix":[4, 8],  "flags":4, "x":86,  "y":52},
            {"matrix":[4, 9],  "flags":4, "x":96,  "y":52},
            {"matrix":[4, 10], "flags":4, "x":107, "y":52},
            {"matrix":[4, 11], "flags":4, "x":117, "y":52},
            {"matrix":[4, 13], "flags":1, "x":137, "y":52},
            {"matrix":[4, 15], "flags":1, "x":169, "y":52},
            {"matrix":[4, 17], "flags":4, "x":193, "y":52},
            {"matrix":[4, 18], "flags":4, "x":203, "y":52},
            {"matrix":[4, 19], "flags":4, "x":214, "y":52},
            {"matrix":[0, 19], "flags":4, "x":224, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":1,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":14,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":27,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":66,  "y":64},
            {"matrix":[5, 10], "flags":1, "x":105, "y":64},
            {"matrix":[5, 11], "flags":1, "x":118, "y":64},
            {"matrix":[5, 12], "flags":4, "x":131, "y":64},
            {"matrix":[5, 13], "flags":1, "x":145, "y":64},
            {"matrix":[5, 14], "flags":1, "x":159, "y":64},
            {"matrix":[5, 15], "flags":1, "x":169, "y":64},
            {"matrix":[5, 16], "flags":1, "x":180, "y":64},
            {"matrix":[5, 17], "flags":4, "x":198, "y":64},
            {"matrix":[5, 19], "flags":4, "x":214, "y":64}
        ],
        "sleep": true,
        "react_on_keyup": true
    }
}

================
File: c2_pro/ansi/white/rules.mk
================
# custom matrix setup
SRC += matrix.c

================
File: c2_pro/ansi/white/white.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off
#ifdef LED_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  |   */
    {0, CB1_CA16},
    {0, CB1_CA15},
    {0, CB1_CA14},
    {0, CB1_CA13},
    {0, CB1_CA12},
    {0, CB1_CA11},
    {0, CB1_CA10},
    {0, CB1_CA9 },
    {0, CB1_CA8 },
    {0, CB1_CA7 },
    {0, CB1_CA6 },
    {0, CB1_CA5 },
    {0, CB1_CA4 },
    {0, CB1_CA2 },
    {0, CB1_CA1 },
    {0, CB7_CA1 },

    {0, CB7_CA2 },
    {0, CB7_CA3 }, // NumLock
    {0, CB7_CA4 }, // Mac
    {0, CB7_CA5 }, // Win

    {0, CB2_CA16},
    {0, CB2_CA15},
    {0, CB2_CA14},
    {0, CB2_CA13},
    {0, CB2_CA12},
    {0, CB2_CA11},
    {0, CB2_CA10},
    {0, CB2_CA9 },
    {0, CB2_CA8 },
    {0, CB2_CA7 },
    {0, CB2_CA6 },
    {0, CB2_CA5 },
    {0, CB2_CA4 },
    {0, CB2_CA3 },
    {0, CB2_CA2 },
    {0, CB2_CA1 },
    {0, CB8_CA1 },
    {0, CB8_CA2 },
    {0, CB8_CA3 },
    {0, CB8_CA4 },
    {0, CB8_CA5 },

    {0, CB3_CA16},
    {0, CB3_CA15},
    {0, CB3_CA14},
    {0, CB3_CA13},
    {0, CB3_CA12},
    {0, CB3_CA11},
    {0, CB3_CA10},
    {0, CB3_CA9 },
    {0, CB3_CA8 },
    {0, CB3_CA7 },
    {0, CB3_CA6 },
    {0, CB3_CA5 },
    {0, CB3_CA4 },
    {0, CB3_CA3 },
    {0, CB3_CA2 },
    {0, CB3_CA1 },
    {0, CB7_CA6 },
    {0, CB7_CA7 },
    {0, CB7_CA8 },
    {0, CB7_CA9 },
    {0, CB7_CA10},

    {0, CB4_CA16},
    {0, CB4_CA15},
    {0, CB4_CA14},
    {0, CB4_CA13},
    {0, CB4_CA12},
    {0, CB4_CA11},
    {0, CB4_CA10},
    {0, CB4_CA9 },
    {0, CB4_CA8 },
    {0, CB4_CA7 },
    {0, CB4_CA6 },
    {0, CB4_CA5 },
    {0, CB4_CA3 },
    {0, CB8_CA7 },
    {0, CB8_CA8 },
    {0, CB8_CA9 },

    {0, CB5_CA16},
    {0, CB5_CA14},
    {0, CB5_CA13},
    {0, CB5_CA12},
    {0, CB5_CA11},
    {0, CB5_CA10},
    {0, CB5_CA9 },
    {0, CB5_CA8 },
    {0, CB5_CA7 },
    {0, CB5_CA6 },
    {0, CB5_CA5 },
    {0, CB5_CA3 },
    {0, CB5_CA1 },
    {0, CB8_CA6 },
    {0, CB8_CA11},
    {0, CB8_CA12},
    {0, CB8_CA10},

    {0, CB6_CA16},
    {0, CB6_CA15},
    {0, CB6_CA14},
    {0, CB6_CA10},
    {0, CB6_CA6 },
    {0, CB6_CA5 },
    {0, CB6_CA4 },
    {0, CB6_CA3 },
    {0, CB6_CA2 },
    {0, CB6_CA1 },
    {0, CB7_CA13},
    {0, CB7_CA11},
    {0, CB7_CA12},
};
#endif //LED_MATRIX_ENABLE

================
File: c2_pro/c2_pro.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#    ifdef RGB_MATRIX_ENABLE
#        define LED_TOGGLE_KEYCODE QK_RGB_MATRIX_TOGGLE
#        define LED_SET_FLAGS rgb_matrix_set_flags
#        define LED_GET_FLAGS rgb_matrix_get_flags
#        define LED_SET_ALL_OFF rgb_matrix_set_color_all(COLOR_BLACK)
#        define LED_IS_ENABLED rgb_matrix_is_enabled
#        define LED_ENABLE rgb_matrix_enable
#        define LED_MATRIX_INDICATORS_KB rgb_matrix_indicators_kb
#        define LED_MATRIX_INDICATORS_USER rgb_matrix_indicators_user
#        define LED_MATRIX_SET_COLOR rgb_matrix_set_color
#        define LED_MATRIX_UPDATE_PWN_BUFFERS rgb_matrix_update_pwm_buffers
#        define LED_MATRIX_INDICATORS_NONE_KB rgb_matrix_indicators_none_kb
#        define LED_MATRIX_IS_ENABLED rgb_matrix_is_enabled
#        define COLOR_WHITE 255, 255, 255
#        define COLOR_BLACK 0, 0, 0
#    endif

#    ifdef LED_MATRIX_ENABLE
#        define LED_TOGGLE_KEYCODE QK_LED_MATRIX_TOGGLE
#        define LED_SET_FLAGS led_matrix_set_flags
#        define LED_GET_FLAGS led_matrix_get_flags
#        define LED_SET_ALL_OFF led_matrix_set_value_all(COLOR_BLACK)
#        define LED_IS_ENABLED led_matrix_is_enabled
#        define LED_ENABLE led_matrix_enable
#        define LED_MATRIX_INDICATORS_KB led_matrix_indicators_kb
#        define LED_MATRIX_INDICATORS_USER led_matrix_indicators_user
#        define LED_MATRIX_SET_COLOR led_matrix_set_value
#        define LED_MATRIX_UPDATE_PWN_BUFFERS led_matrix_update_pwm_buffers
#        define LED_MATRIX_INDICATORS_NONE_KB led_matrix_indicators_none_kb
#        define LED_MATRIX_IS_ENABLED led_matrix_is_enabled
#        define COLOR_WHITE 255
#        define COLOR_BLACK 0

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case LED_TOGGLE_KEYCODE:
            if (record->event.pressed) {
                switch (LED_GET_FLAGS()) {
                    case LED_FLAG_ALL: {
                        LED_SET_FLAGS(LED_FLAG_NONE);
                        LED_SET_ALL_OFF;
                    } break;
                    default: {
                        LED_SET_FLAGS(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!LED_IS_ENABLED()) {
                LED_SET_FLAGS(LED_FLAG_ALL);
                LED_ENABLE();
            }
            return false;
    }
    return true;
}

bool LED_MATRIX_INDICATORS_KB(void) {
    if (!LED_MATRIX_INDICATORS_USER()) {
        return false;
    }
    if (host_keyboard_led_state().caps_lock) {
        LED_MATRIX_SET_COLOR(CAPS_LED_INDEX, COLOR_WHITE);
    } else {
        LED_MATRIX_SET_COLOR(CAPS_LED_INDEX, COLOR_BLACK);
    }
    if (host_keyboard_led_state().num_lock) {
        LED_MATRIX_SET_COLOR(NUM_LED_INDEX, COLOR_WHITE);
    } else {
        LED_MATRIX_SET_COLOR(NUM_LED_INDEX, COLOR_BLACK);
    }
    if (default_layer_state == (1 << 0)) {
        LED_MATRIX_SET_COLOR(MAC_LED_INDEX, COLOR_WHITE);
    } else {
        LED_MATRIX_SET_COLOR(MAC_LED_INDEX, COLOR_BLACK);
    }
    if (default_layer_state == (1 << 2)) {
        LED_MATRIX_SET_COLOR(WIN_LED_INDEX, COLOR_WHITE);
    } else {
        LED_MATRIX_SET_COLOR(WIN_LED_INDEX, COLOR_BLACK);
    }
    return true;
}

#endif

================
File: c2_pro/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

/* Old default behavior of mod-taps */
#define HOLD_ON_OTHER_KEY_PRESS

/* HC595 used pins definiton */
#define HC595_STCP A0
#define HC595_SHCP A1
#define HC595_DS C15
#define SHIFT_COL_START 11
#define SHIFT_COL_END 18

================
File: c2_pro/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: c2_pro/info.json
================
{
    "keyboard_name": "Keychron C2 Pro",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "usb": {
        "vid": "0x3434"
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "matrix_pins": {
        "cols": ["A10", "A9", "A8", "B1", "B0", "A7", "A6", "A5", "A4", "A3", "A2", "NO_PIN", "NO_PIN", "NO_PIN", "NO_PIN", "NO_PIN", "NO_PIN", "NO_PIN", "NO_PIN", "C14"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"],
        "custom": true,
        "custom_lite": true
    },
    "diode_direction": "ROW2COL"
}

================
File: c2_pro/matrix.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

#ifndef SHIFT_COL_START
#    define SHIFT_COL_START 8
#endif
#ifndef SHIFT_COL_END
#    define SHIFT_COL_END 15
#endif

#if defined(SHIFT_COL_START) && defined(SHIFT_COL_END)
#    if ((SHIFT_COL_END - SHIFT_COL_START + 1) > 16)
#        define SIZE_T uint32_t
#        define UNSELECT_ALL_COL 0xFFFFFFFF
#    elif ((SHIFT_COL_END - SHIFT_COL_START + 1) > 8)
#        define SIZE_T uint16_t
#        define UNSELECT_ALL_COL 0xFFFF
#    else
#        define SIZE_T uint8_t
#        define UNSELECT_ALL_COL 0xFF
#    endif
#endif

pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static inline void HC595_delay(uint8_t n) {
    while (n-- > 0) {
        asm volatile("nop" ::: "memory");
    }
}

static void HC595_output(SIZE_T data, uint8_t bit) {
    uint8_t n = 1;

    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < (SHIFT_COL_END - SHIFT_COL_START + 1); i++) {
            if (data & 0x1) {
                gpio_write_pin_high(HC595_DS);
            } else {
                gpio_write_pin_low(HC595_DS);
            }
            gpio_write_pin_high(HC595_SHCP);
            HC595_delay(n);
            gpio_write_pin_low(HC595_SHCP);
            HC595_delay(n);
            if (bit) {
                break;
            } else {
                data = data >> 1;
            }
        }
        gpio_write_pin_high(HC595_STCP);
        HC595_delay(n);
        gpio_write_pin_low(HC595_STCP);
        HC595_delay(n);
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (col < SHIFT_COL_START || col > SHIFT_COL_END) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == SHIFT_COL_START) {
            HC595_output(0x00, 1);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (col < SHIFT_COL_START || col > SHIFT_COL_END) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        HC595_output(0x01, 1);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (x < SHIFT_COL_START || x > SHIFT_COL_END) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == SHIFT_COL_START) HC595_output(UNSELECT_ALL_COL, 0);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < MATRIX_ROWS; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    gpio_set_pin_output(HC595_DS);
    gpio_set_pin_output(HC595_STCP);
    gpio_set_pin_output(HC595_SHCP);

    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }

    unselect_cols();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: c2_pro/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: c2_pro/readme.md
================
# Keychron C2 Pro

![Keychron C2 Pro](https://i.imgur.com/BQE1tFOh.jpg)

A customizable 100% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron C2 Pro
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/c2/ansi/rgb:default
    make keychron/c2/ansi/white:default

Flashing example for this keyboard:

    make keychron/c2/ansi/rgb:default:flash
    make keychron/c2/ansi/white:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: c2_pro_v2/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_104_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  RGB_VAD,  RGB_VAI,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [MAC_FN] = LAYOUT_104_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_NEXT,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),

    [WIN_BASE] = LAYOUT_104_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [WIN_FN] = LAYOUT_104_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALU,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),
};

// clang-format on

================
File: c2_pro_v2/ansi/rgb/config.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE { 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28 }

================
File: c2_pro_v2/ansi/rgb/keyboard.json
================
{
    "keyboard_name": "Keychron C2 Pro V2 RGB",
    "features": {
        "rgb_matrix": true
    },
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 21, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 31, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 68, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 78, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 89, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 99, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 115, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 136, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 146, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 159, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 180, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 10, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 21, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 31, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 42, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 63, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 83, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 94, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 104, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 115, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 141, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 159, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 169, "y": 15, "flags": 1},
            {"matrix": [1, 16], "x": 180, "y": 15, "flags": 1},
            {"matrix": [1, 17], "x": 193, "y": 15, "flags": 4},
            {"matrix": [1, 18], "x": 203, "y": 15, "flags": 4},
            {"matrix": [1, 19], "x": 214, "y": 15, "flags": 4},
            {"matrix": [1, 20], "x": 224, "y": 15, "flags": 4},

            {"matrix": [2, 0], "x": 3, "y": 27, "flags": 1},
            {"matrix": [2, 1], "x": 16, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 26, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 36, "y": 27, "flags": 4},
            {"matrix": [2, 4], "x": 47, "y": 27, "flags": 4},
            {"matrix": [2, 5], "x": 57, "y": 27, "flags": 4},
            {"matrix": [2, 6], "x": 68, "y": 27, "flags": 4},
            {"matrix": [2, 7], "x": 78, "y": 27, "flags": 4},
            {"matrix": [2, 8], "x": 89, "y": 27, "flags": 4},
            {"matrix": [2, 9], "x": 99, "y": 27, "flags": 4},
            {"matrix": [2, 10], "x": 109, "y": 27, "flags": 4},
            {"matrix": [2, 11], "x": 120, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 130, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 143, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 159, "y": 27, "flags": 1},
            {"matrix": [2, 15], "x": 169, "y": 27, "flags": 1},
            {"matrix": [2, 16], "x": 180, "y": 27, "flags": 1},
            {"matrix": [2, 17], "x": 193, "y": 27, "flags": 4},
            {"matrix": [2, 18], "x": 203, "y": 27, "flags": 4},
            {"matrix": [2, 19], "x": 214, "y": 27, "flags": 4},
            {"matrix": [2, 20], "x": 224, "y": 34, "flags": 4},

            {"matrix": [3, 0], "x": 4, "y": 40, "flags": 8},
            {"matrix": [3, 1], "x": 18, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 29, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 39, "y": 40, "flags": 4},
            {"matrix": [3, 4], "x": 50, "y": 40, "flags": 4},
            {"matrix": [3, 5], "x": 60, "y": 40, "flags": 4},
            {"matrix": [3, 6], "x": 70, "y": 40, "flags": 4},
            {"matrix": [3, 7], "x": 81, "y": 40, "flags": 4},
            {"matrix": [3, 8], "x": 91, "y": 40, "flags": 4},
            {"matrix": [3, 9], "x": 102, "y": 40, "flags": 4},
            {"matrix": [3, 10], "x": 112, "y": 40, "flags": 4},
            {"matrix": [3, 11], "x": 123, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 139, "y": 40, "flags": 1},
            {"matrix": [3, 17], "x": 193, "y": 40, "flags": 4},
            {"matrix": [3, 18], "x": 203, "y": 40, "flags": 4},
            {"matrix": [3, 19], "x": 214, "y": 40, "flags": 4},

            {"matrix": [4, 0], "x": 7, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 23, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 34, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 44, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 65, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 76, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 86, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 96, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 107, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 117, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 137, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 169, "y": 52, "flags": 1},
            {"matrix": [4, 17], "x": 193, "y": 52, "flags": 4},
            {"matrix": [4, 18], "x": 203, "y": 52, "flags": 4},
            {"matrix": [4, 19], "x": 214, "y": 52, "flags": 4},
            {"matrix": [4, 20], "x": 224, "y": 58, "flags": 4},
            
            {"matrix": [5, 0], "x": 1, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 14, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 27, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 66, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 105, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 118, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 131, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 145, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 159, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 169, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 180, "y": 64, "flags": 1},
            {"matrix": [5, 17], "x": 198, "y": 64, "flags": 4},
            {"matrix": [5, 18], "x": 214, "y": 64, "flags": 4}
        ],
        "sleep": true
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0526"
    }
}

================
File: c2_pro_v2/ansi/rgb/rgb.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
};
#endif

// clang-format on

================
File: c2_pro_v2/ansi/white/keymaps/default/keymap.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_104_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [MAC_FN] = LAYOUT_104_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  BL_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),

    [WIN_BASE] = LAYOUT_104_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    BL_STEP,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,    KC_PPLS,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,    KC_PENT,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT         ),

    [WIN_FN] = LAYOUT_104_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______         ),
};

// clang-format on

================
File: c2_pro_v2/ansi/white/config.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Use the first 8 channels of led driver */
#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_8_CHANNEL

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE { 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50 }

================
File: c2_pro_v2/ansi/white/keyboard.json
================
{
    "keyboard_name": "Keychron C2 Pro V2 White",
    "features": {
        "led_matrix": true
    },
    "led_matrix": {
        "animations": {
            "band_pinwheel": true,
            "band_spiral": true,
            "breathing": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_up_down": true,
            "dual_beacon": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 21, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 31, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 68, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 78, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 89, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 99, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 115, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 136, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 146, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 159, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 180, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 10, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 21, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 31, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 42, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 63, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 83, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 94, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 104, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 115, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 141, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 159, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 169, "y": 15, "flags": 1},
            {"matrix": [1, 16], "x": 180, "y": 15, "flags": 1},
            {"matrix": [1, 17], "x": 193, "y": 15, "flags": 4},
            {"matrix": [1, 18], "x": 203, "y": 15, "flags": 4},
            {"matrix": [1, 19], "x": 214, "y": 15, "flags": 4},
            {"matrix": [1, 20], "x": 224, "y": 15, "flags": 4},

            {"matrix": [2, 0], "x": 3, "y": 27, "flags": 1},
            {"matrix": [2, 1], "x": 16, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 26, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 36, "y": 27, "flags": 4},
            {"matrix": [2, 4], "x": 47, "y": 27, "flags": 4},
            {"matrix": [2, 5], "x": 57, "y": 27, "flags": 4},
            {"matrix": [2, 6], "x": 68, "y": 27, "flags": 4},
            {"matrix": [2, 7], "x": 78, "y": 27, "flags": 4},
            {"matrix": [2, 8], "x": 89, "y": 27, "flags": 4},
            {"matrix": [2, 9], "x": 99, "y": 27, "flags": 4},
            {"matrix": [2, 10], "x": 109, "y": 27, "flags": 4},
            {"matrix": [2, 11], "x": 120, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 130, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 143, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 159, "y": 27, "flags": 1},
            {"matrix": [2, 15], "x": 169, "y": 27, "flags": 1},
            {"matrix": [2, 16], "x": 180, "y": 27, "flags": 1},
            {"matrix": [2, 17], "x": 193, "y": 27, "flags": 4},
            {"matrix": [2, 18], "x": 203, "y": 27, "flags": 4},
            {"matrix": [2, 19], "x": 214, "y": 27, "flags": 4},
            {"matrix": [2, 20], "x": 224, "y": 34, "flags": 4},

            {"matrix": [3, 0], "x": 4, "y": 40, "flags": 8},
            {"matrix": [3, 1], "x": 18, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 29, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 39, "y": 40, "flags": 4},
            {"matrix": [3, 4], "x": 50, "y": 40, "flags": 4},
            {"matrix": [3, 5], "x": 60, "y": 40, "flags": 4},
            {"matrix": [3, 6], "x": 70, "y": 40, "flags": 4},
            {"matrix": [3, 7], "x": 81, "y": 40, "flags": 4},
            {"matrix": [3, 8], "x": 91, "y": 40, "flags": 4},
            {"matrix": [3, 9], "x": 102, "y": 40, "flags": 4},
            {"matrix": [3, 10], "x": 112, "y": 40, "flags": 4},
            {"matrix": [3, 11], "x": 123, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 139, "y": 40, "flags": 1},
            {"matrix": [3, 17], "x": 193, "y": 40, "flags": 4},
            {"matrix": [3, 18], "x": 203, "y": 40, "flags": 4},
            {"matrix": [3, 19], "x": 214, "y": 40, "flags": 4},

            {"matrix": [4, 0], "x": 7, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 23, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 34, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 44, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 65, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 76, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 86, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 96, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 107, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 117, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 137, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 169, "y": 52, "flags": 1},
            {"matrix": [4, 17], "x": 193, "y": 52, "flags": 4},
            {"matrix": [4, 18], "x": 203, "y": 52, "flags": 4},
            {"matrix": [4, 19], "x": 214, "y": 52, "flags": 4},
            {"matrix": [4, 20], "x": 224, "y": 58, "flags": 4},
            
            {"matrix": [5, 0], "x": 1, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 14, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 27, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 66, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 105, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 118, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 131, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 145, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 159, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 169, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 180, "y": 64, "flags": 1},
            {"matrix": [5, 17], "x": 198, "y": 64, "flags": 4},
            {"matrix": [5, 18], "x": 214, "y": 64, "flags": 4}
        ],
        "sleep": true
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0529"
    }
}

================
File: c2_pro_v2/ansi/white/white.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off
#ifdef LED_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  |   */
    {0, CB1_CA16},
    {0, CB1_CA15},
    {0, CB1_CA14},
    {0, CB1_CA13},
    {0, CB1_CA12},
    {0, CB1_CA11},
    {0, CB1_CA10},
    {0, CB1_CA9 },
    {0, CB1_CA8 },
    {0, CB1_CA7 },
    {0, CB1_CA6 },
    {0, CB1_CA5 },
    {0, CB1_CA4 },
    {0, CB1_CA2 },
    {0, CB1_CA1 },
    {0, CB7_CA1 },

    {0, CB2_CA16},
    {0, CB2_CA15},
    {0, CB2_CA14},
    {0, CB2_CA13},
    {0, CB2_CA12},
    {0, CB2_CA11},
    {0, CB2_CA10},
    {0, CB2_CA9 },
    {0, CB2_CA8 },
    {0, CB2_CA7 },
    {0, CB2_CA6 },
    {0, CB2_CA5 },
    {0, CB2_CA4 },
    {0, CB2_CA3 },
    {0, CB2_CA2 },
    {0, CB2_CA1 },
    {0, CB8_CA1 },
    {0, CB8_CA2 },
    {0, CB8_CA3 },
    {0, CB8_CA4 },
    {0, CB8_CA5 },

    {0, CB3_CA16},
    {0, CB3_CA15},
    {0, CB3_CA14},
    {0, CB3_CA13},
    {0, CB3_CA12},
    {0, CB3_CA11},
    {0, CB3_CA10},
    {0, CB3_CA9 },
    {0, CB3_CA8 },
    {0, CB3_CA7 },
    {0, CB3_CA6 },
    {0, CB3_CA5 },
    {0, CB3_CA4 },
    {0, CB3_CA3 },
    {0, CB3_CA2 },
    {0, CB3_CA1 },
    {0, CB7_CA6 },
    {0, CB7_CA7 },
    {0, CB7_CA8 },
    {0, CB7_CA9 },
    {0, CB7_CA10},

    {0, CB4_CA16},
    {0, CB4_CA15},
    {0, CB4_CA14},
    {0, CB4_CA13},
    {0, CB4_CA12},
    {0, CB4_CA11},
    {0, CB4_CA10},
    {0, CB4_CA9 },
    {0, CB4_CA8 },
    {0, CB4_CA7 },
    {0, CB4_CA6 },
    {0, CB4_CA5 },
    {0, CB4_CA3 },
    {0, CB8_CA7 },
    {0, CB8_CA8 },
    {0, CB8_CA9 },

    {0, CB5_CA16},
    {0, CB5_CA14},
    {0, CB5_CA13},
    {0, CB5_CA12},
    {0, CB5_CA11},
    {0, CB5_CA10},
    {0, CB5_CA9 },
    {0, CB5_CA8 },
    {0, CB5_CA7 },
    {0, CB5_CA6 },
    {0, CB5_CA5 },
    {0, CB5_CA3 },
    {0, CB5_CA1 },
    {0, CB8_CA6 },
    {0, CB8_CA11},
    {0, CB8_CA12},
    {0, CB8_CA10},

    {0, CB6_CA16},
    {0, CB6_CA15},
    {0, CB6_CA14},
    {0, CB6_CA10},
    {0, CB6_CA6 },
    {0, CB6_CA5 },
    {0, CB6_CA4 },
    {0, CB6_CA3 },
    {0, CB6_CA2 },
    {0, CB6_CA1 },
    {0, CB7_CA13},
    {0, CB7_CA11},
    {0, CB7_CA12},
};
#endif

// clang-format on

================
File: c2_pro_v2/c2_pro_v2.c
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 0 : 2));
    }
    return true;
}
#endif

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
#ifdef LED_MATRIX_ENABLE
        case QK_LED_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (led_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        led_matrix_set_flags(LED_FLAG_NONE);
                        led_matrix_set_value_all(0);
                    } break;
                    default: {
                        led_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!led_matrix_is_enabled()) {
                led_matrix_set_flags(LED_FLAG_ALL);
                led_matrix_enable();
            }
            return false;
#endif
        default:
            return true;
    }
}

void keyboard_post_init_kb(void) {
    gpio_set_pin_output_push_pull(LED_MAC_OS_PIN);
    gpio_set_pin_output_push_pull(LED_WIN_OS_PIN);
    gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);
    gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);

    keyboard_post_init_user();
}

void housekeeping_task_kb(void) {
    if (default_layer_state == (1U << 0)) {
        gpio_write_pin(LED_MAC_OS_PIN, LED_OS_PIN_ON_STATE);
        gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);
    }
    if (default_layer_state == (1U << 2)) {
        gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);
        gpio_write_pin(LED_WIN_OS_PIN, LED_OS_PIN_ON_STATE);
    }
}

void suspend_power_down_kb(void) {
    gpio_write_pin(LED_WIN_OS_PIN, !LED_OS_PIN_ON_STATE);
    gpio_write_pin(LED_MAC_OS_PIN, !LED_OS_PIN_ON_STATE);

    suspend_power_down_user();
}

================
File: c2_pro_v2/config.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* DIP switch */
#define DIP_SWITCH_PINS { D2 }

/* Indication led */
#define LED_MAC_OS_PIN C10
#define LED_WIN_OS_PIN C11
#define LED_OS_PIN_ON_STATE 1

/* The I2C Driver Configuration */
#define I2C1_CLOCK_SPEED 400000
#define I2C1_DUTY_CYCLE FAST_DUTY_CYCLE_2

================
File: c2_pro_v2/halconf.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: c2_pro_v2/info.json
================
{
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "usb": {
        "vid": "0x3434"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true
    },
    "processor": "STM32F401",
    "bootloader": "stm32-dfu",
    "matrix_pins": {
        "cols": ["A0", "A1", "A2", "A3", "C0", "C1", "C2", "C3", "A8", "C12", "B9", "C6", "C7", "C4", "C5","A15", "B10", "B12", "B13", "B14", "B15"],
        "rows": ["B0", "B1", "B8", "B3", "B4", "B5"]
    },
    "diode_direction": "COL2ROW",
    "indicators": {
        "caps_lock": "C9",
        "num_lock": "C8"
    },
    "layouts": {
        "LAYOUT_104_ansi": {
            "layout": [
                {"matrix":[0,0], "x":0, "y":0},
                {"matrix":[0,1], "x":2, "y":0},
                {"matrix":[0,2], "x":3, "y":0},
                {"matrix":[0,3], "x":4, "y":0},
                {"matrix":[0,4], "x":5, "y":0},
                {"matrix":[0,5], "x":6.5, "y":0},
                {"matrix":[0,6], "x":7.5, "y":0},
                {"matrix":[0,7], "x":8.5, "y":0},
                {"matrix":[0,8], "x":9.5, "y":0},
                {"matrix":[0,9], "x":11, "y":0},
                {"matrix":[0,10], "x":12, "y":0},
                {"matrix":[0,11], "x":13, "y":0},
                {"matrix":[0,12], "x":14, "y":0},
                {"matrix":[0,14], "x":15.25, "y":0},
                {"matrix":[0,15], "x":16.25, "y":0},
                {"matrix":[0,16], "x":17.25, "y":0},

                {"matrix":[1,0], "x":0, "y":1.25},
                {"matrix":[1,1], "x":1, "y":1.25},
                {"matrix":[1,2], "x":2, "y":1.25},
                {"matrix":[1,3], "x":3, "y":1.25},
                {"matrix":[1,4], "x":4, "y":1.25},
                {"matrix":[1,5], "x":5, "y":1.25},
                {"matrix":[1,6], "x":6, "y":1.25},
                {"matrix":[1,7], "x":7, "y":1.25},
                {"matrix":[1,8], "x":8, "y":1.25},
                {"matrix":[1,9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,14], "x":15.25, "y":1.25},
                {"matrix":[1,15], "x":16.25, "y":1.25},
                {"matrix":[1,16], "x":17.25, "y":1.25},
                {"matrix":[1,17], "x":18.5, "y":1.25},
                {"matrix":[1,18], "x":19.5, "y":1.25},
                {"matrix":[1,19], "x":20.5, "y":1.25},
                {"matrix":[1,20], "x":21.5, "y":1.25},

                {"matrix":[2,0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2,1], "x":1.5, "y":2.25},
                {"matrix":[2,2], "x":2.5, "y":2.25},
                {"matrix":[2,3], "x":3.5, "y":2.25},
                {"matrix":[2,4], "x":4.5, "y":2.25},
                {"matrix":[2,5], "x":5.5, "y":2.25},
                {"matrix":[2,6], "x":6.5, "y":2.25},
                {"matrix":[2,7], "x":7.5, "y":2.25},
                {"matrix":[2,8], "x":8.5, "y":2.25},
                {"matrix":[2,9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,14], "x":15.25, "y":2.25},
                {"matrix":[2,15], "x":16.25, "y":2.25},
                {"matrix":[2,16], "x":17.25, "y":2.25},
                {"matrix":[2,17], "x":18.5, "y":2.25},
                {"matrix":[2,18], "x":19.5, "y":2.25},
                {"matrix":[2,19], "x":20.5, "y":2.25},
                {"matrix":[2,20], "x":21.5, "y":2.25, "h":2},

                {"matrix":[3,0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3,1], "x":1.75, "y":3.25},
                {"matrix":[3,2], "x":2.75, "y":3.25},
                {"matrix":[3,3], "x":3.75, "y":3.25},
                {"matrix":[3,4], "x":4.75, "y":3.25},
                {"matrix":[3,5], "x":5.75, "y":3.25},
                {"matrix":[3,6], "x":6.75, "y":3.25},
                {"matrix":[3,7], "x":7.75, "y":3.25},
                {"matrix":[3,8], "x":8.75, "y":3.25},
                {"matrix":[3,9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},
                {"matrix":[3,17], "x":18.5, "y":3.25},
                {"matrix":[3,18], "x":19.5, "y":3.25},
                {"matrix":[3,19], "x":20.5, "y":3.25},

                {"matrix":[4,0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4,2], "x":2.25, "y":4.25},
                {"matrix":[4,3], "x":3.25, "y":4.25},
                {"matrix":[4,4], "x":4.25, "y":4.25},
                {"matrix":[4,5], "x":5.25, "y":4.25},
                {"matrix":[4,6], "x":6.25, "y":4.25},
                {"matrix":[4,7], "x":7.25, "y":4.25},
                {"matrix":[4,8], "x":8.25, "y":4.25},
                {"matrix":[4,9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":2.75},
                {"matrix":[4,15], "x":16.25, "y":4.25},
                {"matrix":[4,17], "x":18.5, "y":4.25},
                {"matrix":[4,18], "x":19.5, "y":4.25},
                {"matrix":[4,19], "x":20.5, "y":4.25},
                {"matrix":[4,20], "x":21.5, "y":4.25, "h":2},

                {"matrix":[5,0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5,1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5,2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5,6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25, "w":1.25},
                {"matrix":[5,11], "x":11.25, "y":5.25, "w":1.25},
                {"matrix":[5,12], "x":12.5, "y":5.25, "w":1.25},
                {"matrix":[5,13], "x":13.75, "y":5.25, "w":1.25},
                {"matrix":[5,14], "x":15.25, "y":5.25},
                {"matrix":[5,15], "x":16.25, "y":5.25},
                {"matrix":[5,16], "x":17.25, "y":5.25},
                {"matrix":[5,17], "x":18.5, "y":5.25, "w":2},
                {"matrix":[5,18], "x":20.5, "y":5.25}
            ]
        }
    }
}

================
File: c2_pro_v2/mcuconf.h
================
/* Copyright 2025 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_HSECLK
#define STM32_HSECLK 16000000U

#undef STM32_PLLM_VALUE
#define STM32_PLLM_VALUE 8

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: c2_pro_v2/readme.md
================
# Keychron C2 Pro V2

![Keychron C2 Pro](https://i.imgur.com/BQE1tFO.jpg)

A customizable 100% keyboard.

Rev1 is based on STM32L432 and rev2 is based on STM32F402.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron C2 Pro
* Hardware Availability: [Keychron C2 Pro QMK/VIA Wired Mechanical Keyboard](https://www.keychron.com/products/keychron-c2-pro-qmk-via-wired-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/c2_pro_v2/ansi/rgb:default
    make keychron/c2_pro_v2/ansi/white:default

Flashing example for this keyboard:

    make keychron/c2_pro_v2/ansi/rgb:default:flash
    make keychron/c2_pro_v2/ansi/white:default:flash

## bootloader

Enter the bootloader in two ways:

* **Bootmagic reset**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.
* **Physical reset button**: Briefly press the RESET button under the spacebar.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: c3_pro/ansi/red/keymaps/default/keymap.c
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN,
};

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_TRNS,  KC_PAUS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN),KC_TRNS,    KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  BL_STEP,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        BL_TOGG,  BL_STEP,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        KC_OSSW,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_SCRL,  KC_PAUS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN),KC_APP,    KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  BL_STEP,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        BL_TOGG,  BL_STEP,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        KC_OSSW,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: c3_pro/ansi/red/config.h
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Indication led */
#define LED_MAC_OS_PIN A4
#define LED_WIN_OS_PIN A5
#define LED_OS_PIN_ON_STATE 1

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Use first 7 channels of LED driver */
#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_7_CHANNEL

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE { 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50 }

================
File: c3_pro/ansi/red/keyboard.json
================
{
    "keyboard_name": "Keychron C3 Pro Red",
    "features": {
        "led_matrix": true
    },
    "indicators": {
        "caps_lock": "A3"
    },
    "led_matrix": {
        "animations": {
            "band_pinwheel": true,
            "band_spiral": true,
            "breathing": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_up_down": true,
            "dual_beacon": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 123, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 16, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 16, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 16, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 16, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 16, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 16, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 16, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 16, "flags": 4},
            {"matrix": [1, 8], "x": 104, "y": 16, "flags": 4},
            {"matrix": [1, 9], "x": 117, "y": 16, "flags": 4},
            {"matrix": [1, 10], "x": 130, "y": 16, "flags": 4},
            {"matrix": [1, 11], "x": 143, "y": 16, "flags": 4},
            {"matrix": [1, 12], "x": 156, "y": 16, "flags": 4},
            {"matrix": [1, 13], "x": 175, "y": 16, "flags": 1},
            {"matrix": [1, 14], "x": 198, "y": 16, "flags": 1},
            {"matrix": [1, 15], "x": 211, "y": 16, "flags": 1},
            {"matrix": [1, 16], "x": 224, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1},
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4},
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4},
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4},
            {"matrix": [2, 4], "x": 58, "y": 28, "flags": 4},
            {"matrix": [2, 5], "x": 71, "y": 28, "flags": 4},
            {"matrix": [2, 6], "x": 84, "y": 28, "flags": 4},
            {"matrix": [2, 7], "x": 97, "y": 28, "flags": 4},
            {"matrix": [2, 8], "x": 110, "y": 28, "flags": 4},
            {"matrix": [2, 9], "x": 123, "y": 28, "flags": 4},
            {"matrix": [2, 10], "x": 136, "y": 28, "flags": 4},
            {"matrix": [2, 11], "x": 149, "y": 28, "flags": 4},
            {"matrix": [2, 12], "x": 162, "y": 28, "flags": 4},
            {"matrix": [2, 13], "x": 178, "y": 28, "flags": 1},
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1},
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1},
            {"matrix": [2, 16], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8},
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4},
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4},
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4},
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4},
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4},
            {"matrix": [3, 9], "x": 126, "y": 40, "flags": 4},
            {"matrix": [3, 10], "x": 139, "y": 40, "flags": 4},
            {"matrix": [3, 11], "x": 152, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 173, "y": 40, "flags": 1},

            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 170, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 131, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 164, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 224, "y": 64, "flags": 1},

            {"x": 0, "y": 0, "flags": 1},
            {"x": 0, "y": 16, "flags": 1},
            {"x": 0, "y": 28, "flags": 1},
            {"x": 0, "y": 40, "flags": 1},
            {"x": 0, "y": 52, "flags": 1},
            {"x": 0, "y": 64, "flags": 1},
            {"x": 224, "y": 0, "flags": 1},
            {"x": 224, "y": 16, "flags": 1},
            {"x": 224, "y": 28, "flags": 1},
            {"x": 224, "y": 40, "flags": 1},
            {"x": 224, "y": 52, "flags": 1},
            {"x": 224, "y": 64, "flags": 1}
        ],
        "sleep": true
    },
    "matrix_pins": {
        "cols": ["C6", "C7", "C8", "A14", "A15", "C10", "C11", "C13", "C14", "C15", "C0", "C1", "C2", "C3", "A0", "A1", "A2"],
        "rows": ["C12", "D2", "B3", "B4", "B5", "B6"]
    },
    "usb": {
        "device_version": "1.0.1",
        "pid": "0x0430"
    },
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.5, "y": 0},
                {"matrix": [0, 10], "x": 11, "y": 0},
                {"matrix": [0, 11], "x": 12, "y": 0},
                {"matrix": [0, 12], "x": 13, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
            
                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
            
                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
            
                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
            
                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
            
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: c3_pro/ansi/red/red.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef LED_MATRIX_ENABLE
// clang-format off
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  | */
    {0, CB6_CA1},
    {0, CB6_CA3},
    {0, CB6_CA4},
    {0, CB6_CA5},
    {0, CB6_CA6},
    {0, CB6_CA7},
    {0, CB6_CA8},
    {0, CB6_CA9},
    {0, CB6_CA10},
    {0, CB6_CA11},
    {0, CB6_CA12},
    {0, CB6_CA13},
    {0, CB6_CA14},
    {0, CB6_CA15},
    {0, CB6_CA16},
    {0, CB3_CA13},

    {0, CB5_CA1},
    {0, CB5_CA2},
    {0, CB5_CA3},
    {0, CB5_CA4},
    {0, CB5_CA5},
    {0, CB5_CA6},
    {0, CB5_CA7},
    {0, CB5_CA8},
    {0, CB5_CA9},
    {0, CB5_CA10},
    {0, CB5_CA11},
    {0, CB5_CA12},
    {0, CB5_CA13},
    {0, CB5_CA14},
    {0, CB5_CA15},
    {0, CB5_CA16},
    {0, CB3_CA15},

    {0, CB4_CA1},
    {0, CB4_CA2},
    {0, CB4_CA3},
    {0, CB4_CA4},
    {0, CB4_CA5},
    {0, CB4_CA6},
    {0, CB4_CA7},
    {0, CB4_CA8},
    {0, CB4_CA9},
    {0, CB4_CA10},
    {0, CB4_CA11},
    {0, CB4_CA12},
    {0, CB4_CA13},
    {0, CB4_CA14},
    {0, CB4_CA15},
    {0, CB4_CA16},
    {0, CB3_CA16},

    {0, CB3_CA1},
    {0, CB3_CA2},
    {0, CB3_CA3},
    {0, CB3_CA4},
    {0, CB3_CA5},
    {0, CB3_CA6},
    {0, CB3_CA7},
    {0, CB3_CA8},
    {0, CB3_CA9},
    {0, CB3_CA10},
    {0, CB3_CA11},
    {0, CB3_CA12},
    {0, CB3_CA14},

    {0, CB2_CA1},
    {0, CB2_CA3},
    {0, CB2_CA4},
    {0, CB2_CA5},
    {0, CB2_CA6},
    {0, CB2_CA7},
    {0, CB2_CA8},
    {0, CB2_CA9},
    {0, CB2_CA10},
    {0, CB2_CA11},
    {0, CB2_CA12},
    {0, CB2_CA14},
    {0, CB2_CA16},

    {0, CB1_CA1},
    {0, CB1_CA2},
    {0, CB1_CA3},
    {0, CB1_CA7},
    {0, CB1_CA11},
    {0, CB1_CA12},
    {0, CB1_CA13},
    {0, CB1_CA14},
    {0, CB1_CA15},
    {0, CB1_CA16},
    {0, CB2_CA15},

    {0, CB7_CA1},
    {0, CB7_CA2},
    {0, CB7_CA3},
    {0, CB7_CA4},
    {0, CB7_CA5},
    {0, CB7_CA6},
    {0, CB7_CA12},
    {0, CB7_CA11},
    {0, CB7_CA10},
    {0, CB7_CA9},
    {0, CB7_CA8},
    {0, CB7_CA7},
};
#endif

================
File: c3_pro/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,   KC_VOLD,   KC_VOLU,  KC_NO,    KC_TRNS,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,    KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,   KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN), KC_APP,    KC_RCTL,KC_LEFT,  KC_DOWN,  KC_RGHT ),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        KC_OSSW,  RM_PREV, RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______ ),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,    KC_F11,    KC_F12,   KC_PSCR,KC_SCROLL_LOCK,KC_PAUSE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,    KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,   KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN),KC_APP,    KC_RCTL,KC_LEFT,  KC_DOWN,  KC_RGHT ),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_NEXT,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        KC_OSSW,  RM_PREV, RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  GU_TOGG,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______ ),
};

================
File: c3_pro/ansi/rgb/config.h
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable indicator LED*/
#define LED_MAC_OS_PIN A6
#define LED_WIN_OS_PIN A7
#define LED_OS_PIN_ON_STATE 1

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE { 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30 }

================
File: c3_pro/ansi/rgb/keyboard.json
================
{
    "keyboard_name": "Keychron C3 Pro RGB",
    "features": {
        "rgb_matrix": true
    },
    "indicators": {
        "caps_lock": "A5"
    },
    "matrix_pins": {
        "cols": ["C6", "C7", "C8", "A14", "B7", "C13", "C14", "C15", "C0", "C1", "C2", "C3", "A0", "A1", "A2", "A3", "A4"],
        "rows": ["C12", "D2", "B3", "B4", "B5", "B6"]
    },
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 20, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 30, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 40, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 50, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 75, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 85, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 95, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 120, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 130, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 140, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 155, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 165, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 175, "y": 0, "flags": 1},
        
            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 4},
            {"matrix": [1, 1], "x": 10, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 20, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 30, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 40, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 50, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 60, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 70, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 80, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 90, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 100, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 110, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 120, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 135, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 155, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 165, "y": 15, "flags": 1},
            {"matrix": [1, 16], "x": 175, "y": 15, "flags": 1},
        
            {"matrix": [2, 0], "x": 3, "y": 27, "flags": 1},
            {"matrix": [2, 1], "x": 16, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 26, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 36, "y": 27, "flags": 4},
            {"matrix": [2, 4], "x": 47, "y": 27, "flags": 4},
            {"matrix": [2, 5], "x": 57, "y": 27, "flags": 4},
            {"matrix": [2, 6], "x": 68, "y": 27, "flags": 4},
            {"matrix": [2, 7], "x": 78, "y": 27, "flags": 4},
            {"matrix": [2, 8], "x": 89, "y": 27, "flags": 4},
            {"matrix": [2, 9], "x": 99, "y": 27, "flags": 4},
            {"matrix": [2, 10], "x": 109, "y": 27, "flags": 4},
            {"matrix": [2, 11], "x": 120, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 130, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 143, "y": 27, "flags": 4},
            {"matrix": [2, 14], "x": 155, "y": 27, "flags": 1},
            {"matrix": [2, 15], "x": 165, "y": 27, "flags": 1},
            {"matrix": [2, 16], "x": 175, "y": 27, "flags": 1},
        
            {"matrix": [3, 0], "x": 4, "y": 40, "flags": 8},
            {"matrix": [3, 1], "x": 18, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 29, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 39, "y": 40, "flags": 4},
            {"matrix": [3, 4], "x": 50, "y": 40, "flags": 4},
            {"matrix": [3, 5], "x": 60, "y": 40, "flags": 4},
            {"matrix": [3, 6], "x": 70, "y": 40, "flags": 4},
            {"matrix": [3, 7], "x": 81, "y": 40, "flags": 4},
            {"matrix": [3, 8], "x": 91, "y": 40, "flags": 4},
            {"matrix": [3, 9], "x": 102, "y": 40, "flags": 4},
            {"matrix": [3, 10], "x": 112, "y": 40, "flags": 4},
            {"matrix": [3, 11], "x": 123, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 143, "y": 40, "flags": 4},
        
            {"matrix": [4, 0], "x": 7, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 23, "y": 52, "flags": 4},
            {"matrix": [4, 3], "x": 34, "y": 52, "flags": 4},
            {"matrix": [4, 4], "x": 44, "y": 52, "flags": 4},
            {"matrix": [4, 5], "x": 55, "y": 52, "flags": 4},
            {"matrix": [4, 6], "x": 65, "y": 52, "flags": 4},
            {"matrix": [4, 7], "x": 76, "y": 52, "flags": 4},
            {"matrix": [4, 8], "x": 86, "y": 52, "flags": 4},
            {"matrix": [4, 9], "x": 96, "y": 52, "flags": 4},
            {"matrix": [4, 10], "x": 107, "y": 52, "flags": 4},
            {"matrix": [4, 11], "x": 117, "y": 52, "flags": 4},
            {"matrix": [4, 13], "x": 137, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 165, "y": 52, "flags": 1},
        
            {"matrix": [5, 0], "x": 1, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 14, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 27, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 67, "y": 64, "flags": 4},
            {"matrix": [5, 10], "x": 104, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 116, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 128, "y": 64, "flags": 4},
            {"matrix": [5, 13], "x": 140, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 155, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 165, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 175, "y": 64, "flags": 1},
        
            {"x": 0, "y": 0, "flags": 1},
            {"x": 0, "y": 16, "flags": 1},
            {"x": 0, "y": 28, "flags": 1},
            {"x": 0, "y": 40, "flags": 1},
            {"x": 0, "y": 52, "flags": 1},
            {"x": 0, "y": 64, "flags": 1},
            {"x": 224, "y": 0, "flags": 1},
            {"x": 224, "y": 16, "flags": 1},
            {"x": 224, "y": 28, "flags": 1},
            {"x": 224, "y": 40, "flags": 1},
            {"x": 224, "y": 52, "flags": 1},
            {"x": 224, "y": 64, "flags": 1}
        ],
        "sleep": true
    },
    "usb": {
        "device_version": "1.0.1",
        "pid": "0x0433"
    },
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 10, "y": 0},
                {"matrix": [0, 10], "x": 11, "y": 0},
                {"matrix": [0, 11], "x": 12, "y": 0},
                {"matrix": [0, 12], "x": 13, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
            
                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
            
                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
            
                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
            
                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
            
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: c3_pro/ansi/rgb/rgb.c
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
// clang-format off
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations

 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB7_CA1,    CB9_CA1,    CB8_CA1},
    {0, CB7_CA3,    CB9_CA3,    CB8_CA3},
    {0, CB7_CA4,    CB9_CA4,    CB8_CA4},
    {0, CB7_CA5,    CB9_CA5,    CB8_CA5},
    {0, CB7_CA6,    CB9_CA6,    CB8_CA6},
    {0, CB7_CA7,    CB9_CA7,    CB8_CA7},
    {0, CB7_CA8,    CB9_CA8,    CB8_CA8},
    {0, CB7_CA9,    CB9_CA9,    CB8_CA9},
    {0, CB7_CA10,   CB9_CA10,   CB8_CA10},
    {0, CB7_CA11,   CB9_CA11,   CB8_CA11},
    {0, CB7_CA12,   CB9_CA12,   CB8_CA12},
    {0, CB7_CA13,   CB9_CA13,   CB8_CA13},
    {0, CB7_CA14,   CB9_CA14,   CB8_CA14},
    {0, CB7_CA15,   CB9_CA15,   CB8_CA15},
    {0, CB7_CA16,   CB9_CA16,   CB8_CA16},
    {1, CB7_CA16,   CB9_CA16,   CB8_CA16},

    {0, CB4_CA1,    CB6_CA1,    CB5_CA1},
    {0, CB4_CA2,    CB6_CA2,    CB5_CA2},
    {0, CB4_CA3,    CB6_CA3,    CB5_CA3},
    {0, CB4_CA4,    CB6_CA4,    CB5_CA4},
    {0, CB4_CA5,    CB6_CA5,    CB5_CA5},
    {0, CB4_CA6,    CB6_CA6,    CB5_CA6},
    {0, CB4_CA7,    CB6_CA7,    CB5_CA7},
    {0, CB4_CA8,    CB6_CA8,    CB5_CA8},
    {0, CB4_CA9,    CB6_CA9,    CB5_CA9},
    {0, CB4_CA10,   CB6_CA10,   CB5_CA10},
    {0, CB4_CA11,   CB6_CA11,   CB5_CA11},
    {0, CB4_CA12,   CB6_CA12,   CB5_CA12},
    {0, CB4_CA13,   CB6_CA13,   CB5_CA13},
    {0, CB4_CA14,   CB6_CA14,   CB5_CA14},
    {0, CB4_CA15,   CB6_CA15,   CB5_CA15},
    {0, CB4_CA16,   CB6_CA16,   CB5_CA16},
    {1, CB7_CA13,   CB9_CA13,   CB8_CA13},

    {0, CB1_CA1,    CB3_CA1,    CB2_CA1},
    {0, CB1_CA2,    CB3_CA2,    CB2_CA2},
    {0, CB1_CA3,    CB3_CA3,    CB2_CA3},
    {0, CB1_CA4,    CB3_CA4,    CB2_CA4},
    {0, CB1_CA5,    CB3_CA5,    CB2_CA5},
    {0, CB1_CA6,    CB3_CA6,    CB2_CA6},
    {0, CB1_CA7,    CB3_CA7,    CB2_CA7},
    {0, CB1_CA8,    CB3_CA8,    CB2_CA8},
    {0, CB1_CA9,    CB3_CA9,    CB2_CA9},
    {0, CB1_CA10,   CB3_CA10,   CB2_CA10},
    {0, CB1_CA11,   CB3_CA11,   CB2_CA11},
    {0, CB1_CA12,   CB3_CA12,   CB2_CA12},
    {0, CB1_CA13,   CB3_CA13,   CB2_CA13},
    {0, CB1_CA14,   CB3_CA14,   CB2_CA14},
    {0, CB1_CA15,   CB3_CA15,   CB2_CA15},
    {0, CB1_CA16,   CB3_CA16,   CB2_CA16},
    {1, CB7_CA15,   CB9_CA15,   CB8_CA15},

    {1, CB7_CA1,    CB9_CA1,    CB8_CA1},
    {1, CB7_CA2,    CB9_CA2,    CB8_CA2},
    {1, CB7_CA3,    CB9_CA3,    CB8_CA3},
    {1, CB7_CA4,    CB9_CA4,    CB8_CA4},
    {1, CB7_CA5,    CB9_CA5,    CB8_CA5},
    {1, CB7_CA6,    CB9_CA6,    CB8_CA6},
    {1, CB7_CA7,    CB9_CA7,    CB8_CA7},
    {1, CB7_CA8,    CB9_CA8,    CB8_CA8},
    {1, CB7_CA9,    CB9_CA9,    CB8_CA9},
    {1, CB7_CA10,   CB9_CA10,   CB8_CA10},
    {1, CB7_CA11,   CB9_CA11,   CB8_CA11},
    {1, CB7_CA12,   CB9_CA12,   CB8_CA12},
    {1, CB7_CA14,   CB9_CA14,   CB8_CA14},

    {1, CB1_CA1,    CB3_CA1,    CB2_CA1},
    {1, CB1_CA3,    CB3_CA3,    CB2_CA3},
    {1, CB1_CA4,    CB3_CA4,    CB2_CA4},
    {1, CB1_CA5,    CB3_CA5,    CB2_CA5},
    {1, CB1_CA6,    CB3_CA6,    CB2_CA6},
    {1, CB1_CA7,    CB3_CA7,    CB2_CA7},
    {1, CB1_CA8,    CB3_CA8,    CB2_CA8},
    {1, CB1_CA9,    CB3_CA9,    CB2_CA9},
    {1, CB1_CA10,   CB3_CA10,   CB2_CA10},
    {1, CB1_CA11,   CB3_CA11,   CB2_CA11},
    {1, CB1_CA12,   CB3_CA12,   CB2_CA12},
    {1, CB1_CA14,   CB3_CA14,   CB2_CA14},
    {1, CB1_CA16,   CB3_CA16,   CB2_CA16},

    {1, CB4_CA1,    CB6_CA1,    CB5_CA1},
    {1, CB4_CA2,    CB6_CA2,    CB5_CA2},
    {1, CB4_CA3,    CB6_CA3,    CB5_CA3},
    {1, CB4_CA7,    CB6_CA7,    CB5_CA7},
    {1, CB4_CA11,   CB6_CA11,   CB5_CA11},
    {1, CB4_CA12,   CB6_CA12,   CB5_CA12},
    {1, CB4_CA13,   CB6_CA13,   CB5_CA13},
    {1, CB4_CA14,   CB6_CA14,   CB5_CA14},
    {1, CB4_CA15,   CB6_CA15,   CB5_CA15},
    {1, CB4_CA16,   CB6_CA16,   CB5_CA16},
    {1, CB1_CA15,   CB3_CA15,   CB2_CA15},

    {0, CB10_CA1,    CB12_CA1,    CB11_CA1},
    {0, CB10_CA2,    CB12_CA2,    CB11_CA2},
    {0, CB10_CA3,    CB12_CA3,    CB11_CA3},
    {0, CB10_CA4,    CB12_CA4,    CB11_CA4},
    {0, CB10_CA5,    CB12_CA5,    CB11_CA5},
    {0, CB10_CA6,    CB12_CA6,    CB11_CA6},
    {0, CB10_CA7,    CB12_CA7,    CB11_CA7},
    {0, CB10_CA8,    CB12_CA8,    CB11_CA8},
    {0, CB10_CA9,    CB12_CA9,    CB11_CA9},
    {0, CB10_CA10,   CB12_CA10,   CB11_CA10},
    {0, CB10_CA11,   CB12_CA11,   CB11_CA11},
    {0, CB10_CA12,   CB12_CA12,   CB11_CA12},
};
#endif

================
File: c3_pro/c3_pro.c
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "c3_pro.h"

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
#ifdef LED_MATRIX_ENABLE
        case QK_LED_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (led_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        led_matrix_set_flags(LED_FLAG_NONE);
                        led_matrix_set_value_all(0);
                    } break;
                    default: {
                        led_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!led_matrix_is_enabled()) {
                led_matrix_set_flags(LED_FLAG_ALL);
                led_matrix_enable();
            }
            return false;
#endif
        case KC_OSSW:
            if (record->event.pressed) {
                default_layer_xor(1U << 0);
                default_layer_xor(1U << 2);
                eeconfig_update_default_layer(default_layer_state);
            }
            return false;
        default:
            return true;
    }
}

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // RGB_MATRIX_ENABLE && CAPS_LOCK_LED_INDEX

#if defined(LED_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool led_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!led_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }

    if (host_keyboard_led_state().caps_lock) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 255);

    } else {
        if (!led_matrix_get_flags()) {
            led_matrix_set_value(CAPS_LOCK_LED_INDEX, 0);
        }
    }
    return true;
}

#endif // LED_MATRIX_ENABLE && CAPS_LOCK_LED_INDEX

================
File: c3_pro/c3_pro.h
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "quantum.h"

enum my_keycodes {
    KC_OS_SWITCH = QK_KB_11,
};

#define KC_OSSW KC_OS_SWITCH

================
File: c3_pro/config.h
================
/* Copyright 2024 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* I2C driver Configuration */
#define I2C1_SCL_PIN B8
#define I2C1_SDA_PIN B9
#define I2C1_CLOCK_SPEED 400000
#define I2C1_DUTY_CYCLE FAST_DUTY_CYCLE_2

================
File: c3_pro/halconf.h
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: c3_pro/info.json
================
{
    "manufacturer": "Keychron",
    "maintainer": "Joe",
    "bootloader": "stm32-dfu",
    "community_layouts": ["tkl_ansi"],
    "diode_direction": "ROW2COL",
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "nkro": true
    },
    "processor": "STM32F401",
    "url": "https://github.com/Keychron",
    "usb": {
        "device_version": "1.0.1",
        "vid": "0x3434"
    }
}

================
File: c3_pro/mcuconf.h
================
/* Copyright 2024 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_HSECLK
#define STM32_HSECLK 16000000U

#undef STM32_PLLM_VALUE
#define STM32_PLLM_VALUE 8

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: c3_pro/readme.md
================
# Keychron C3 Pro

![Keychron C3 Pro](https://i.imgur.com/b4FTJsf.jpg)

A customizable 87% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron C3 Pro
* Hardware Availability: [Keychron](https://www.keychron.com/)

Make example for this keyboard (after setting up your build environment):

    make keychron/c3_pro/ansi/red:default
    make keychron/c3_pro/ansi/rgb:default 

Flashing example for this keyboard:

    make keychron/c3_pro/ansi/red:default:flash
    make keychron/c3_pro/ansi/rgb:default:flash

## bootloader

Enter the bootloader in two ways:

* **Bootmagic reset**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.
* **Physical reset button**: Briefly press the RESET button under the spacebar.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: common/keychron_common.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "keychron_common.h"
#include "sync_timer.h"

bool is_siri_active = false;
uint32_t siri_timer = 0;

key_combination_t key_comb_list[4] = {
    {2, {KC_LWIN, KC_TAB}},
    {2, {KC_LWIN, KC_E}},
    {3, {KC_LSFT, KC_LCMD, KC_4}},
    {2, {KC_LWIN, KC_C}}
};

static uint8_t mac_keycode[4] = { KC_LOPT, KC_ROPT, KC_LCMD, KC_RCMD };

void housekeeping_task_keychron(void) {
    if (is_siri_active) {
        if (sync_timer_elapsed32(siri_timer) >= 500) {
            unregister_code(KC_LCMD);
            unregister_code(KC_SPACE);
            is_siri_active = false;
        }
    }
}

bool process_record_keychron(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
        case QK_KB_0:
            if (record->event.pressed) {
                register_code(KC_MISSION_CONTROL);
            } else {
                unregister_code(KC_MISSION_CONTROL);
            }
            return false;  // Skip all further processing of this key
        case QK_KB_1:
            if (record->event.pressed) {
                register_code(KC_LAUNCHPAD);
            } else {
                unregister_code(KC_LAUNCHPAD);
            }
            return false;  // Skip all further processing of this key
        case KC_LOPTN:
        case KC_ROPTN:
        case KC_LCMMD:
        case KC_RCMMD:
            if (record->event.pressed) {
                register_code(mac_keycode[keycode - KC_LOPTN]);
            } else {
                unregister_code(mac_keycode[keycode - KC_LOPTN]);
            }
            return false;  // Skip all further processing of this key
        case KC_SIRI:
            if (record->event.pressed) {
                if (!is_siri_active) {
                    is_siri_active = true;
                    register_code(KC_LCMD);
                    register_code(KC_SPACE);
                }
                siri_timer = sync_timer_read32();
            } else {
                // Do something else when release
            }
            return false;  // Skip all further processing of this key
        case KC_TASK:
        case KC_FLXP:
        case KC_SNAP:
        case KC_CRTA:
            if (record->event.pressed) {
                for (uint8_t i = 0; i < key_comb_list[keycode - KC_TASK].len; i++) {
                    register_code(key_comb_list[keycode - KC_TASK].keycode[i]);
                }
            } else {
                for (uint8_t i = 0; i < key_comb_list[keycode - KC_TASK].len; i++) {
                    unregister_code(key_comb_list[keycode - KC_TASK].keycode[i]);
                }
            }
            return false;  // Skip all further processing of this key
        default:
            return true;  // Process all other keycodes normally
    }
}

================
File: common/keychron_common.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <stdint.h>
#include <stdbool.h>
#include "action.h"

#ifdef VIA_ENABLE
#    include "via.h"
#endif

#include "quantum_keycodes.h"

enum custom_keycodes {
    KC_LOPTN = QK_KB_2, // TECH DEBT: Starts at QK_KB_2 to maintain ordering with VIA definitions. See #19884. Revert to QK_KB_0 when VIA catches up with QMK.
    KC_ROPTN,
    KC_LCMMD,
    KC_RCMMD,
    KC_SIRI,
    KC_TASK_VIEW,
    KC_FILE_EXPLORER,
    KC_SCREEN_SHOT,
    KC_CORTANA
};

#define KC_TASK KC_TASK_VIEW
#define KC_FLXP KC_FILE_EXPLORER
#define KC_SNAP KC_SCREEN_SHOT
#define KC_CRTA KC_CORTANA

typedef struct PACKED {
    uint8_t len;
    uint8_t keycode[3];
} key_combination_t;

void housekeeping_task_keychron(void);
bool process_record_keychron(uint16_t keycode, keyrecord_t *record);

================
File: q0/base/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers { _BASE, _FN1};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT_numpad_6x4(
        MO(_FN1), KC_ESC,  KC_BSPC,   KC_TAB,
        KC_NUM,   KC_PSLS, KC_PAST,   KC_PMNS,
        KC_P7,    KC_P8,   KC_P9,
        KC_P4,    KC_P5,   KC_P6,     KC_PPLS,
        KC_P1,    KC_P2,   KC_P3,
        KC_P0,             KC_PDOT,   KC_PENT),

    [_FN1] = LAYOUT_numpad_6x4(
        _______,    KC_MUTE, KC_VOLD,   KC_VOLU,
        RM_NEXT,    RM_VALU, RM_HUEU,   KC_DEL,
        RM_PREV,    RM_VALD, RM_HUED,
        RM_SATU,    RM_SPDU, KC_MPRV,   _______,
        RM_SATD,    RM_SPDD, KC_MPLY,
        RM_TOGG,             KC_MNXT,   _______)
};

================
File: q0/base/base.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5}, // 0
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5}, // 1
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5}, // 2
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5}, // 3

    {0, CB6_CA4,    CB4_CA4,    CB5_CA4}, // 4
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4}, // 5
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4}, // 6
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4}, // 7

    {0, CB6_CA6,    CB4_CA6,    CB5_CA6}, // 8
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6}, // 9
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6}, // 10

    {0, CB6_CA3,    CB4_CA3,    CB5_CA3}, // 11
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3}, // 12
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3}, // 13
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6}, // 14

    {0, CB6_CA2,    CB4_CA2,    CB5_CA2}, // 15
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2}, // 16
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2}, // 17

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1}, // 18
    {0, CB12_CA1,    CB10_CA1,    CB11_CA1}, // 19
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2}, // 20
};
#endif // RGB_MATRIX_ENABLE

================
File: q0/base/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 4

================
File: q0/base/keyboard.json
================
{
    "keyboard_name": "Q0",
    "usb": {
        "pid": "0x0130",
        "device_version": "1.0.2"
    },
    "matrix_pins": {
        "cols": ["A5", "A6", "A7", "B0"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
    },
    "rgb_matrix": {
        "center_point": [56, 16],
        "layout": [
            {"flags": 1, "matrix": [0, 0], "x": 0, "y": 0},
            {"flags": 1, "matrix": [0, 1], "x": 37, "y": 0},
            {"flags": 1, "matrix": [0, 2], "x": 75, "y": 0},
            {"flags": 1, "matrix": [0, 3], "x": 112, "y": 0},

            {"flags": 9, "matrix": [1, 0], "x": 0, "y": 6},
            {"flags": 4, "matrix": [1, 1], "x": 37, "y": 6},
            {"flags": 4, "matrix": [1, 2], "x": 75, "y": 6},
            {"flags": 4, "matrix": [1, 3], "x": 112, "y": 6},

            {"flags": 4, "matrix": [2, 0], "x": 0, "y": 13},
            {"flags": 4, "matrix": [2, 1], "x": 37, "y": 13},
            {"flags": 4, "matrix": [2, 2], "x": 75, "y": 13},

            {"flags": 4, "matrix": [3, 0], "x": 0, "y": 19},
            {"flags": 4, "matrix": [3, 1], "x": 37, "y": 19},
            {"flags": 4, "matrix": [3, 2], "x": 75, "y": 19},
            {"flags": 4, "matrix": [2, 3], "x": 112, "y": 16},

            {"flags": 4, "matrix": [4, 0], "x": 0, "y": 25},
            {"flags": 4, "matrix": [4, 1], "x": 37, "y": 25},
            {"flags": 4, "matrix": [4, 2], "x": 75, "y": 25},

            {"flags": 4, "matrix": [5, 0], "x": 18, "y": 32},
            {"flags": 4, "matrix": [5, 2], "x": 75, "y": 32},
            {"flags": 1, "matrix": [4, 3], "x": 112, "y": 29}
        ]
    },
    "community_layouts": ["numpad_6x4"],
    "layouts": {
        "LAYOUT_numpad_6x4": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1},
                {"matrix": [1, 1], "x": 1, "y": 1},
                {"matrix": [1, 2], "x": 2, "y": 1},
                {"matrix": [1, 3], "x": 3, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2},
                {"matrix": [2, 1], "x": 1, "y": 2},
                {"matrix": [2, 2], "x": 2, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3},
                {"matrix": [3, 1], "x": 1, "y": 3},
                {"matrix": [3, 2], "x": 2, "y": 3},
                {"matrix": [2, 3], "x": 3, "y": 2, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4},
                {"matrix": [4, 1], "x": 1, "y": 4},
                {"matrix": [4, 2], "x": 2, "y": 4},

                {"matrix": [5, 0], "x": 0, "y": 5, "w": 2},
                {"matrix": [5, 2], "x": 2, "y": 5},
                {"matrix": [4, 3], "x": 3, "y": 4, "h": 2}
            ]
        }
    }
}

================
File: q0/base/readme.md
================
# The base variant of the Keychron Q0

================
File: q0/plus/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    BASE,
    FUNC
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [BASE] = LAYOUT_numpad_6x5(
        KC_MUTE, MO(FUNC), KC_ESC,  KC_BSPC,  KC_TAB,
        _______, KC_NUM,   KC_PSLS, KC_PAST,  KC_PMNS,
        _______, KC_P7,    KC_P8,   KC_P9,    KC_PPLS,
        _______, KC_P4,    KC_P5,   KC_P6,
        _______, KC_P1,    KC_P2,   KC_P3,    KC_PENT,
        _______, KC_P0,             KC_PDOT),

    [FUNC] = LAYOUT_numpad_6x5(
        RM_TOGG, _______,  KC_MUTE, KC_VOLD,  KC_VOLU,
        _______, RM_NEXT,  RM_VALU, RM_HUEU,  KC_DEL,
        _______, RM_PREV,  RM_VALD, RM_HUED,  _______,
        _______, RM_SATU,  RM_SPDU, KC_MPRV,
        _______, RM_SATD,  RM_SPDD, KC_MPLY,  _______,
        _______, RM_TOGG,           KC_MNXT),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [FUNC] = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
};
#endif // ENCODER_MAP_ENABLE

================
File: q0/plus/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q0/plus/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

/* Encoder Configuration*/
#define ENCODER_DEFAULT_POS 0x3

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 5

================
File: q0/plus/keyboard.json
================
{
    "keyboard_name": "Keychron Q0 Plus",
    "usb": {
        "pid": "0x0131",
        "device_version": "1.0.0"
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A3", "pin_b": "A4"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "rgb_matrix": {
        "layout": [
            {"flags": 1, "matrix": [0, 1], "x": 56, "y": 0},
            {"flags": 1, "matrix": [0, 2], "x": 112, "y": 0},
            {"flags": 1, "matrix": [0, 3], "x": 168, "y": 0},
            {"flags": 1, "matrix": [0, 4], "x": 224, "y": 0},

            {"flags": 4, "matrix": [1, 0], "x": 0, "y": 15},
            {"flags": 8, "matrix": [1, 1], "x": 56, "y": 15},
            {"flags": 4, "matrix": [1, 2], "x": 112, "y": 15},
            {"flags": 4, "matrix": [1, 3], "x": 168, "y": 15},
            {"flags": 4, "matrix": [1, 4], "x": 224, "y": 15},

            {"flags": 4, "matrix": [2, 0], "x": 0, "y": 27},
            {"flags": 4, "matrix": [2, 1], "x": 56, "y": 27},
            {"flags": 4, "matrix": [2, 2], "x": 112, "y": 27},
            {"flags": 4, "matrix": [2, 3], "x": 168, "y": 27},
            {"flags": 4, "matrix": [2, 4], "x": 224, "y": 34},

            {"flags": 4, "matrix": [3, 0], "x": 0, "y": 40},
            {"flags": 4, "matrix": [3, 1], "x": 56, "y": 40},
            {"flags": 4, "matrix": [3, 2], "x": 112, "y": 40},
            {"flags": 4, "matrix": [3, 3], "x": 168, "y": 40},

            {"flags": 4, "matrix": [4, 0], "x": 0, "y": 52},
            {"flags": 4, "matrix": [4, 1], "x": 56, "y": 52},
            {"flags": 4, "matrix": [4, 2], "x": 112, "y": 52},
            {"flags": 4, "matrix": [4, 3], "x": 168, "y": 52},
            {"flags": 4, "matrix": [4, 4], "x": 224, "y": 58},

            {"flags": 4, "matrix": [5, 0], "x": 0, "y": 64},
            {"flags": 4, "matrix": [5, 1], "x": 84, "y": 64},
            {"flags": 1, "matrix": [5, 3], "x": 168, "y": 64}
        ]
    },
    "community_layouts": ["numpad_6x5"],
    "layouts": {
        "LAYOUT_numpad_6x5": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1.25, "y": 1.25},
                {"matrix": [1, 2], "x": 2.25, "y": 1.25},
                {"matrix": [1, 3], "x": 3.25, "y": 1.25},
                {"matrix": [1, 4], "x": 4.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25},
                {"matrix": [2, 1], "x": 1.25, "y": 2.25},
                {"matrix": [2, 2], "x": 2.25, "y": 2.25},
                {"matrix": [2, 3], "x": 3.25, "y": 2.25},
                {"matrix": [2, 4], "x": 4.25, "y": 2.25, "h": 2},

                {"matrix": [3, 0], "x": 0, "y": 3.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25, "h": 2},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 2},
                {"matrix": [5, 3], "x": 3.25, "y": 5.25}
            ]
        }
    }
}

================
File: q0/plus/plus.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},

    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},

    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},

    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
};
#endif // RGB_MATRIX_ENABLE

================
File: q0/plus/readme.md
================
# Keychron Q0 Plus

![Keychron Q0 Plus](https://i.imgur.com/EDbfVVOh.jpg)

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q0 Plus
* Hardware Availability: [Keychron Q0 Plus QMK Custom Number Pad](https://www.keychron.com/products/keychron-q0-plus-qmk-custom-number-pad)

1. The name of this keyboard is "Keychron Q0 Plus"
2. Enables EC11 rotary encoder
    - Turn clockwise to increase volume and turn anti-clockwise to decrease volume
    - Press the knob button to mute

================
File: q0/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE { 0xFF, 0xFF, 0x70, 0xFF, 0xFF, 0x70, 0xFF, 0xFF, 0x70, 0xFF, 0xFF, 0x70 }

================
File: q0/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q0/info.json
================
{
    "manufacturer": "Keychron",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "force_nkro": true,
        "vid": "0x3434"
    }
}

================
File: q0/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q0/q0.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#if defined(RGB_MATRIX_ENABLE) && defined(NUM_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#    ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            return false;
#    endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif  // NUM_LOCK_LED_INDEX

================
File: q0/readme.md
================
# Keychron Q0

![Keychron Q0](https://i.imgur.com/cLbEiZ0h.jpg)

A customizable number keypad.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q0
* Hardware Availability: [Keychron Q0 QMK Custom Number Pad](https://www.keychron.com/products/keychron-q0-qmk-custom-number-pad)

Make example for this keyboard (after setting up your build environment):

    make keychron/q0/base:default
    make keychron/q0/plus:default

Flashing example for this keyboard:

    make keychron/q0/base:default:flash
    make keychron/q0/plus:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q10/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_89(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,            KC_LCMD,  KC_SPC,  MO(MAC_FN),                     KC_SPC,             KC_RCMD,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_89(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                      _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_89(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,            KC_LALT,  KC_SPC,  MO(WIN_FN),                     KC_SPC,             KC_RALT,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_89(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,   _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                       _______,  _______,  _______),
};

#if defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q10/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q10/ansi_encoder/ansi_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // ESC
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // F1
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // F2
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // F3
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // F4
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // F5
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // F6
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // F7
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // F8
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // F9
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F10
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // F11
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // F12
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // INS
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // DEL

    {0, CB9_CA1,  CB7_CA1,  CB8_CA1},  // M1
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // `~
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // 1!
    {0, CB9_CA4,  CB7_CA4,  CB8_CA4},  // 2@
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // 3#
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // 4$
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // 5%
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // 6^
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // 7&
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // 8*
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // 9(
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // 0)
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // -_
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // =+
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // BackSpace
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // PgUp

    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // M2
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // TAB
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Q
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // W
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // E
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // R
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // T
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Y
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // U
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // I
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // O
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // P
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // [
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // ]
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // |
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // PgDn

    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // M3
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // CapsLock
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // A
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // S
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // D
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // F
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // G
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // H
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // J
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // K
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // L
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // ;
    {1, CB3_CA3,  CB1_CA3,  CB2_CA3},  // '
    {1, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Enter
    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // Home

    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // M4
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Shift_L
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Z
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // X
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // C
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // V
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // B
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // B
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // N
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // M
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ,
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // .
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // ?
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Shift_R
    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // Up

    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // M5
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Ctrl_L
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // Win_L
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Alt_L
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // Space
    {1, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Fn
    {1, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Space
    {1, CB6_CA7,  CB4_CA7,  CB5_CA7},  // Alt_R
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { __,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 },
        { 47, 48, 49, 50, 51, 52, 53, __, 54, 55, 56, 57, 58, 59, 60, 61 },
        { 62, 63, __, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 },
        { 77, 78, 79, 80, 81, __, __, 82, 83, 84, __, __, __, 85, 86, 87 },
    },
    {
        // LED Index to Physical Position
                {19,0},  {34,0},  {46,0},  {60,1},  {72,3},  {87,6},  {99,8},   {120,8},  {132,6},  {147,3},  {159,1},  {173,0},  {185,0},  {201,1},            {219,1},
        {5,14}, {24,14}, {36,14}, {48,13}, {62,15}, {74,17}, {86,20}, {98,22},  {115,22}, {127,20}, {139,17}, {151,15}, {165,13}, {177,14}, {195,14},           {220,13},
        {4,24}, {24,24}, {40,24}, {53,24}, {65,27}, {77,29}, {89,31}, {112,33}, {124,31}, {136,29}, {148,27}, {160,24}, {174,24}, {186,24}, {201,24},           {222,25},
        {2,34}, {23,34}, {40,34}, {54,35}, {66,37}, {78,39}, {90,42}, {118,43}, {130,40}, {142,38}, {154,36}, {167,35}, {179,35},           {199,35},           {224,36},
        {0,45}, {24,45},          {44,45}, {57,46}, {69,48}, {81,51}, {93,53},  {111,54}, {123,52}, {135,50}, {147,48}, {159,46}, {173,45}, {190,45}, {210,47},
        {0,55}, {18,55}, {33,55},          {56,57}, {77,61}, {97,64},                     {124,63},           {147,59},                     {198,58}, {210,58}, {222,58},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1, 4, 1,       4,    1,       1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q10/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 48

================
File: q10/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q10",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01A1",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_89": {
            "layout": [
                {"matrix": [0, 0], "x": 0.25, "y": 0},
                {"matrix": [0, 1], "x": 1.75, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6, "y": 0},
                {"matrix": [0, 6], "x": 7.25, "y": 0},
                {"matrix": [0, 7], "x": 8.25, "y": 0},
                {"matrix": [0, 8], "x": 11, "y": 0},
                {"matrix": [0, 9], "x": 12, "y": 0},
                {"matrix": [0, 10], "x": 13.25, "y": 0},
                {"matrix": [0, 11], "x": 14.25, "y": 0},
                {"matrix": [0, 12], "x": 15.25, "y": 0},
                {"matrix": [0, 13], "x": 16.25, "y": 0},
                {"matrix": [0, 14], "x": 17.5, "y": 0},
                {"matrix": [0, 15], "x": 18.75, "y": 0},

                {"matrix": [1, 0], "x": 0.75, "y": 1.25},
                {"matrix": [1, 1], "x": 2.25, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 7.25, "y": 1.25},
                {"matrix": [1, 7], "x": 8.25, "y": 1.25},
                {"matrix": [1, 8], "x": 10.5, "y": 1.25},
                {"matrix": [1, 9], "x": 11.5, "y": 1.25},
                {"matrix": [1, 10], "x": 12.5, "y": 1.25},
                {"matrix": [1, 11], "x": 13.5, "y": 1.25},
                {"matrix": [1, 12], "x": 14.5, "y": 1.25},
                {"matrix": [1, 13], "x": 15.5, "y": 1.25},
                {"matrix": [1, 14], "x": 16.5, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 19, "y": 1.25},

                {"matrix": [2, 0], "x": 0.5, "y": 2.25},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25, "w": 1.5},
                {"matrix": [2, 2], "x": 3.25, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 7.5, "y": 2.25},
                {"matrix": [2, 7], "x": 10, "y": 2.25},
                {"matrix": [2, 8], "x": 11, "y": 2.25},
                {"matrix": [2, 9], "x": 12, "y": 2.25},
                {"matrix": [2, 10], "x": 13, "y": 2.25},
                {"matrix": [2, 11], "x": 14, "y": 2.25},
                {"matrix": [2, 12], "x": 15.25, "y": 2.25},
                {"matrix": [2, 13], "x": 16.25, "y": 2.25},
                {"matrix": [2, 14], "x": 17.25, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 19.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0.25, "y": 3.25},
                {"matrix": [3, 1], "x": 1.5, "y": 3.25, "w": 1.75},
                {"matrix": [3, 2], "x": 3.25, "y": 3.25},
                {"matrix": [3, 3], "x": 4.5, "y": 3.25},
                {"matrix": [3, 4], "x": 5.5, "y": 3.25},
                {"matrix": [3, 5], "x": 6.5, "y": 3.25},
                {"matrix": [3, 6], "x": 7.5, "y": 3.25},
                {"matrix": [3, 8], "x": 10.25, "y": 3.25},
                {"matrix": [3, 9], "x": 11.25, "y": 3.25},
                {"matrix": [3, 10], "x": 12.25, "y": 3.25},
                {"matrix": [3, 11], "x": 13.25, "y": 3.25},
                {"matrix": [3, 12], "x": 14.75, "y": 3.25},
                {"matrix": [3, 13], "x": 15.75, "y": 3.25},
                {"matrix": [3, 14], "x": 16.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 19.5, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 4], "x": 4.75, "y": 4.25},
                {"matrix": [4, 5], "x": 5.75, "y": 4.25},
                {"matrix": [4, 6], "x": 6.75, "y": 4.25},
                {"matrix": [4, 7], "x": 7.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.5, "y": 4.25},
                {"matrix": [4, 9], "x": 10.5, "y": 4.25},
                {"matrix": [4, 10], "x": 11.5, "y": 4.25},
                {"matrix": [4, 11], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 13.5, "y": 4.25},
                {"matrix": [4, 13], "x": 15.25, "y": 4.25},
                {"matrix": [4, 14], "x": 16.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 18.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 4.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 4], "x": 6, "y": 5.25, "w": 2.25},
                {"matrix": [5, 7], "x": 8.25, "y": 5.25},
                {"matrix": [5, 8], "x": 9.5, "y": 5.25, "w": 2.75},
                {"matrix": [5, 9], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 17.25, "y": 5.5},
                {"matrix": [5, 14], "x": 18.25, "y": 5.5},
                {"matrix": [5, 15], "x": 19.25, "y": 5.5}
            ]
        }
    }
}

================
File: q10/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q10

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top left key pushbutton to mute.

================
File: q10/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q10/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_90(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,            KC_LCMD,  KC_SPC,  MO(MAC_FN),                     KC_SPC,             KC_RCMD,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_90(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,  _______,                      _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                      _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_90(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,            KC_LALT,  KC_SPC,  MO(WIN_FN),                     KC_SPC,             KC_RALT,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_90(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,   _______,                      _______,
        _______,  _______,  RM_PREV,   RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,   _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                       _______,  _______,  _______),
};

#if defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q10/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q10/iso_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 47

================
File: q10/iso_encoder/iso_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // ESC
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // F1
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // F2
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // F3
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // F4
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // F5
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // F6
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // F7
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // F8
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // F9
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F10
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // F11
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // F12
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // INS
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // DEL

    {0, CB9_CA1,  CB7_CA1,  CB8_CA1},  // M1
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // `~
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // 1!
    {0, CB9_CA4,  CB7_CA4,  CB8_CA4},  // 2@
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // 3#
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // 4$
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // 5%
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // 6^
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // 7&
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // 8*
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // 9(
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // 0)
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // -_
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // =+
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // BackSpace
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // PgUp

    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // M2
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // TAB
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Q
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // W
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // E
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // R
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // T
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Y
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // U
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // I
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // O
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // P
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // [
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // ]
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // PgDn

    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // M3
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // CapsLock
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // A
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // S
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // D
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // F
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // G
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // H
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // J
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // K
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // L
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // ;
    {1, CB3_CA3,  CB1_CA3,  CB2_CA3},  // '
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // |
    {1, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Enter
    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // Home

    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // M4
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Shift_L
    {1, CB9_CA14, CB7_CA14, CB8_CA14},
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Z
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // X
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // C
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // V
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // B
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // B
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // N
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // M
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ,
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // .
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // ?
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Shift_R
    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // Up

    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // M5
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Ctrl_L
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // Win_L
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Alt_L
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // Space
    {1, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Fn
    {1, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Space
    {1, CB6_CA7,  CB4_CA7,  CB5_CA7},  // Alt_R
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { __,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 59, 45 },
        { 46, 47, 48, 49, 50, 51, 52, __, 53, 54, 55, 56, 57, 58, 60, 61 },
        { 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 },
        { 78, 79, 80, 81, 82, __, __, 83, 84, 85, __, __, __, 86, 87, 88 },
    },
    {
        // LED Index to Physical Position
                {0,0},    {19,0},  {34,0},  {60,1},  {72,3},   {87,6},   {99,8},  {120,8},  {132,6},  {147,3},  {159,1},  {173,0},  {185,0},  {201,1},            {219,1},
        {5,14}, {24,14}, {36,14}, {48,13}, {62,15}, {74,17},  {86,20},  {98,22}, {115,22}, {127,20}, {139,17}, {151,15}, {165,13}, {177,14}, {195,14},           {220,15},
        {4,24}, {24,24}, {40,24}, {53,24}, {65,27}, {77,29},  {89,31}, {112,33}, {124,31}, {136,29}, {148,27}, {160,24}, {176,24}, {189,24},                     {222,25},
        {2,34}, {23,34}, {40,34}, {54,35}, {66,37}, {78,39},  {90,42}, {118,43}, {130,40}, {142,38}, {154,36}, {167,35}, {179,35}, {192,35}, {208,31},           {224,36},
        {0,45}, {18,45}, {31,45}, {44,45}, {57,46}, {69,48},  {81,51},  {93,53}, {111,54}, {123,52}, {135,50}, {147,48}, {159,46}, {173,45}, {190,45}, {210,47},
        {0,55}, {18,55}, {33,55},          {56,57}, {77,61},  {97,64},                     {124,63},           {147,59},                     {198,58}, {210,58}, {222,58},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        1, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1, 4, 1,       4,    1,       1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q10/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q10",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01A3",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_90": {
            "layout": [
                {"matrix": [0, 0], "x": 0.25, "y": 0},
                {"matrix": [0, 1], "x": 1.75, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6, "y": 0},
                {"matrix": [0, 6], "x": 7.25, "y": 0},
                {"matrix": [0, 7], "x": 8.25, "y": 0},
                {"matrix": [0, 8], "x": 11, "y": 0},
                {"matrix": [0, 9], "x": 12, "y": 0},
                {"matrix": [0, 10], "x": 13.25, "y": 0},
                {"matrix": [0, 11], "x": 14.25, "y": 0},
                {"matrix": [0, 12], "x": 15.25, "y": 0},
                {"matrix": [0, 13], "x": 16.25, "y": 0},
                {"matrix": [0, 14], "x": 17.5, "y": 0},
                {"matrix": [0, 15], "x": 18.75, "y": 0},

                {"matrix": [1, 0], "x": 0.75, "y": 1.25},
                {"matrix": [1, 1], "x": 2.25, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 7.25, "y": 1.25},
                {"matrix": [1, 7], "x": 8.25, "y": 1.25},
                {"matrix": [1, 8], "x": 10.5, "y": 1.25},
                {"matrix": [1, 9], "x": 11.5, "y": 1.25},
                {"matrix": [1, 10], "x": 12.5, "y": 1.25},
                {"matrix": [1, 11], "x": 13.5, "y": 1.25},
                {"matrix": [1, 12], "x": 14.5, "y": 1.25},
                {"matrix": [1, 13], "x": 15.5, "y": 1.25},
                {"matrix": [1, 14], "x": 16.5, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 19, "y": 1.25},

                {"matrix": [2, 0], "x": 0.5, "y": 2.25},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25, "w": 1.5},
                {"matrix": [2, 2], "x": 3.25, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 7.5, "y": 2.25},
                {"matrix": [2, 7], "x": 10, "y": 2.25},
                {"matrix": [2, 8], "x": 11, "y": 2.25},
                {"matrix": [2, 9], "x": 12, "y": 2.25},
                {"matrix": [2, 10], "x": 13, "y": 2.25},
                {"matrix": [2, 11], "x": 14, "y": 2.25},
                {"matrix": [2, 12], "x": 15.25, "y": 2.25},
                {"matrix": [2, 13], "x": 16.25, "y": 2.25},
                {"matrix": [2, 15], "x": 19.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0.25, "y": 3.25},
                {"matrix": [3, 1], "x": 1.5, "y": 3.25, "w": 1.75},
                {"matrix": [3, 2], "x": 3.25, "y": 3.25},
                {"matrix": [3, 3], "x": 4.5, "y": 3.25},
                {"matrix": [3, 4], "x": 5.5, "y": 3.25},
                {"matrix": [3, 5], "x": 6.5, "y": 3.25},
                {"matrix": [3, 6], "x": 7.5, "y": 3.25},
                {"matrix": [3, 8], "x": 10.25, "y": 3.25},
                {"matrix": [3, 9], "x": 11.25, "y": 3.25},
                {"matrix": [3, 10], "x": 12.25, "y": 3.25},
                {"matrix": [3, 11], "x": 13.25, "y": 3.25},
                {"matrix": [3, 12], "x": 14.75, "y": 3.25},
                {"matrix": [3, 13], "x": 15.75, "y": 3.25},
                {"matrix": [3, 14], "x": 16.75, "y": 3.25},
                {"matrix": [2, 14], "x": 17.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 19.5, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.5, "y": 4.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 4], "x": 4.75, "y": 4.25},
                {"matrix": [4, 5], "x": 5.75, "y": 4.25},
                {"matrix": [4, 6], "x": 6.75, "y": 4.25},
                {"matrix": [4, 7], "x": 7.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.5, "y": 4.25},
                {"matrix": [4, 9], "x": 10.5, "y": 4.25},
                {"matrix": [4, 10], "x": 11.5, "y": 4.25},
                {"matrix": [4, 11], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 13.5, "y": 4.25},
                {"matrix": [4, 13], "x": 15.25, "y": 4.25},
                {"matrix": [4, 14], "x": 16.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 18.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 4.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 4], "x": 6, "y": 5.25, "w": 2.25},
                {"matrix": [5, 7], "x": 8.25, "y": 5.25},
                {"matrix": [5, 8], "x": 9.5, "y": 5.25, "w": 2.75},
                {"matrix": [5, 9], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 17.25, "y": 5.5},
                {"matrix": [5, 14], "x": 18.25, "y": 5.5},
                {"matrix": [5, 15], "x": 19.25, "y": 5.5}
            ]
        }
    }
}

================
File: q10/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q10

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top left key pushbutton to mute.

================
File: q10/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q10/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix size */
#define MATRIX_ROWS 6
#define MATRIX_COLS 16

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A }

================
File: q10/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q10/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 5] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: q10/matrix.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN A7
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN B1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN B0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOutMultiple(uint16_t dataOut) {
    for (uint8_t i = 0; i < 8; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftOut_single(uint8_t dataOut) {
    if (dataOut & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }
    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == (MATRIX_COLS - 8)) {
            shiftOut_single(0x00);
        } else {
            shiftOut_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - 1)) {
            gpio_atomic_set_pin_output_high(CLOCK_PIN);
            gpio_atomic_set_pin_output_low(CLOCK_PIN);
            gpio_atomic_set_pin_output_high(LATCH_PIN);
            gpio_atomic_set_pin_output_low(LATCH_PIN);
        }
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == (MATRIX_COLS - 1)) {
                // unselect Shift Register
                shiftOutMultiple(0xFF);
            }
        }
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    if (current_col < (MATRIX_COLS - 8)) {
        matrix_output_select_delay();
    } else {
        matrix_output_select_delay();
        matrix_output_select_delay();
        matrix_output_select_delay();
        matrix_output_select_delay();
    }

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q10/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q10/q10.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#    ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#    endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q10/readme.md
================
# Keychron Q10

A customizable 75% ergonomic keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q10
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/q10/ansi_encoder:default

Flashing example for this keyboard:

    make keychron/q10/ansi_encoder:default:flash

**Reset Key**: Hold down the key located at *K01*, which programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q11/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_91_ansi(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_INS,   KC_DEL,   KC_MUTE,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,  KC_LCMD,  MO(MAC_FN),         KC_SPC,                        KC_SPC,             KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_91_ansi(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,  _______,  _______,            _______,                       _______,            _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_91_ansi(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_INS,   KC_DEL,   KC_MUTE,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,  KC_LALT,  MO(WIN_FN),         KC_SPC,                        KC_SPC,             KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_91_ansi(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,  _______,  _______,            _______,                       _______,            _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU), ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU), ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU), ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU), ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q11/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q11/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB1_CA2,  CB3_CA2,  CB2_CA2},  // ESC
    {0, CB1_CA3,  CB3_CA3,  CB2_CA3},  // F1
    {0, CB1_CA4,  CB3_CA4,  CB2_CA4},  // F2
    {0, CB1_CA5,  CB3_CA5,  CB2_CA5},  // F3
    {0, CB1_CA6,  CB3_CA6,  CB2_CA6},  // F4
    {0, CB1_CA7,  CB3_CA7,  CB2_CA7},  // F5
    {0, CB1_CA8,  CB3_CA8,  CB2_CA8},  // F6

    {0, CB4_CA1,  CB6_CA1,  CB5_CA1},  // M1
    {0, CB4_CA2,  CB6_CA2,  CB5_CA2},  // `~
    {0, CB4_CA3,  CB6_CA3,  CB5_CA3},  // 1!
    {0, CB4_CA4,  CB6_CA4,  CB5_CA4},  // 2@
    {0, CB4_CA5,  CB6_CA5,  CB5_CA5},  // 3#
    {0, CB4_CA6,  CB6_CA6,  CB5_CA6},  // 4$
    {0, CB4_CA7,  CB6_CA7,  CB5_CA7},  // 5%
    {0, CB4_CA8,  CB6_CA8,  CB5_CA8},  // 6^

    {0, CB7_CA1,  CB9_CA1,  CB8_CA1},  // M2
    {0, CB7_CA2,  CB9_CA2,  CB8_CA2},  // TAB
    {0, CB7_CA3,  CB9_CA3,  CB8_CA3},  // Q
    {0, CB7_CA4,  CB9_CA4,  CB8_CA4},  // W
    {0, CB7_CA5,  CB9_CA5,  CB8_CA5},  // E
    {0, CB7_CA6,  CB9_CA6,  CB8_CA6},  // R
    {0, CB7_CA7,  CB9_CA7,  CB8_CA7},  // T

    {0, CB10_CA1,  CB12_CA1,  CB11_CA1},  // M3
    {0, CB10_CA2,  CB12_CA2,  CB11_CA2},  // CapsJock
    {0, CB10_CA3,  CB12_CA3,  CB11_CA3},  // A
    {0, CB10_CA4,  CB12_CA4,  CB11_CA4},  // S
    {0, CB10_CA5,  CB12_CA5,  CB11_CA5},  // D
    {0, CB10_CA6,  CB12_CA6,  CB11_CA6},  // F
    {0, CB10_CA7,  CB12_CA7,  CB11_CA7},  // G

    {0, CB10_CA9,  CB12_CA9,  CB11_CA9},  // M4
    {0, CB10_CA11, CB12_CA11, CB11_CA11}, // Shift_J
    {0, CB10_CA12, CB12_CA12, CB11_CA12}, // Z
    {0, CB10_CA13, CB12_CA13, CB11_CA13}, // X
    {0, CB10_CA14, CB12_CA14, CB11_CA14}, // C
    {0, CB10_CA15, CB12_CA15, CB11_CA15}, // V
    {0, CB10_CA16, CB12_CA16, CB11_CA16}, // B

    {0, CB7_CA9,  CB9_CA9,  CB8_CA9},  // M5
    {0, CB7_CA10, CB9_CA10, CB8_CA10}, // Ctrl_L
    {0, CB7_CA11, CB9_CA11, CB8_CA11}, // WGn_L
    {0, CB7_CA12, CB9_CA12, CB8_CA12}, // Alt_L
    {0, CB7_CA13, CB9_CA13, CB8_CA13}, // Fn
    {0, CB7_CA15, CB9_CA15, CB8_CA15}, // Space

    {0, CB1_CA16, CB3_CA16, CB2_CA16}, // F7
    {0, CB1_CA15, CB3_CA15, CB2_CA15}, // F8
    {0, CB1_CA14, CB3_CA14, CB2_CA14}, // F9
    {0, CB1_CA13, CB3_CA13, CB2_CA13}, // F11
    {0, CB1_CA12, CB3_CA12, CB2_CA12}, // F11
    {0, CB1_CA11, CB3_CA11, CB2_CA11}, // F12
    {0, CB1_CA10, CB3_CA10, CB2_CA10}, // INS
    {0, CB1_CA9,  CB3_CA9,  CB2_CA9},  // DEL

    {0, CB4_CA16, CB6_CA16, CB5_CA16}, // 7&
    {0, CB4_CA15, CB6_CA15, CB5_CA15}, // 8*
    {0, CB4_CA14, CB6_CA14, CB5_CA14}, // 9(
    {0, CB4_CA13, CB6_CA13, CB5_CA13}, // 1)
    {0, CB4_CA12, CB6_CA12, CB5_CA12}, // -_
    {0, CB4_CA11, CB6_CA11, CB5_CA11}, // =+
    {0, CB4_CA10, CB6_CA10, CB5_CA10}, // BackSpace
    {0, CB4_CA8,  CB6_CA8,  CB5_CA8},  // PgUp

    {0, CB7_CA16, CB9_CA16, CB8_CA16}, // Y
    {0, CB7_CA15, CB9_CA15, CB8_CA15}, // U
    {0, CB7_CA14, CB9_CA14, CB8_CA14}, // G
    {0, CB7_CA13, CB9_CA13, CB8_CA13}, // O
    {0, CB7_CA12, CB9_CA12, CB8_CA12}, // P
    {0, CB7_CA11, CB9_CA11, CB8_CA11}, // [
    {0, CB7_CA10, CB9_CA10, CB8_CA10}, // ]
    {0, CB7_CA9,  CB9_CA9,  CB8_CA9},  // \||
    {0, CB7_CA8,  CB9_CA8,  CB8_CA8},  // PgDn

    {0, CB10_CA16, CB12_CA16, CB11_CA16}, // H
    {0, CB10_CA15, CB12_CA15, CB11_CA15}, // J
    {0, CB10_CA14, CB12_CA14, CB11_CA14}, // KKEY_PRESS_HOME
    {0, CB10_CA13, CB12_CA13, CB11_CA13}, // J
    {0, CB10_CA12, CB12_CA12, CB11_CA12}, // ;:
    {0, CB10_CA11, CB12_CA11, CB11_CA11}, // '"
    {0, CB10_CA9,  CB12_CA9,  CB11_CA9},  // Enter
    {0, CB10_CA8,  CB12_CA8,  CB11_CA8},  // Home

    {0, CB10_CA7,  CB12_CA7,  CB11_CA7},  // N
    {0, CB10_CA6,  CB12_CA6,  CB11_CA6},  // M
    {0, CB10_CA5,  CB12_CA5,  CB11_CA5},  // ,<
    {0, CB10_CA4,  CB12_CA4,  CB11_CA4},  // .>
    {0, CB10_CA3,  CB12_CA3,  CB11_CA3},  // ?/
    {0, CB10_CA2,  CB12_CA2,  CB11_CA2},  // Shift_R
    {0, CB10_CA1,  CB12_CA1,  CB11_CA1},  // Up

    {0, CB7_CA6,  CB9_CA6,  CB8_CA6},  // Space
    {0, CB7_CA5,  CB9_CA5,  CB8_CA5},  // Win_R
    {0, CB7_CA4,  CB9_CA4,  CB8_CA4},  // Fn
    {0, CB7_CA3,  CB9_CA3,  CB8_CA3},  // Ctrl_R
    {0, CB7_CA2,  CB9_CA2,  CB8_CA2},  // Left
    {0, CB7_CA1,  CB9_CA1,  CB8_CA1},  // Down
    {0, CB7_CA7,  CB9_CA7,  CB8_CA7},  // Right
};

int rgb_matrix_led_index(int index) {
    return index;
}
#endif

================
File: q11/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 23

================
File: q11/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x01E0",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "split_count": [42, 47],
        "layout": [
            {"matrix":[0, 1], "flags":1, "x":17,  "y":0},
            {"matrix":[0, 2], "flags":1, "x":31,  "y":0},
            {"matrix":[0, 3], "flags":1, "x":45,  "y":0},
            {"matrix":[0, 4], "flags":1, "x":59,  "y":0},
            {"matrix":[0, 5], "flags":1, "x":72,  "y":0},
            {"matrix":[0, 6], "flags":1, "x":86,  "y":0},
            {"matrix":[0, 7], "flags":1, "x":100, "y":0},
            {"matrix":[1, 0], "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1], "flags":1, "x":17,  "y":15},
            {"matrix":[1, 2], "flags":4, "x":31,  "y":15},
            {"matrix":[1, 3], "flags":4, "x":45,  "y":15},
            {"matrix":[1, 4], "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5], "flags":4, "x":72,  "y":15},
            {"matrix":[1, 6], "flags":4, "x":86,  "y":15},
            {"matrix":[1, 7], "flags":4, "x":100, "y":15},

            {"matrix":[2, 0], "flags":1, "x":0,   "y":27},
            {"matrix":[2, 1], "flags":1, "x":21,  "y":27},
            {"matrix":[2, 2], "flags":4, "x":38,  "y":27},
            {"matrix":[2, 3], "flags":4, "x":52,  "y":27},
            {"matrix":[2, 4], "flags":4, "x":66,  "y":27},
            {"matrix":[2, 6], "flags":4, "x":79,  "y":27},
            {"matrix":[2, 7], "flags":4, "x":93,  "y":27},
            {"matrix":[3, 0], "flags":1, "x":0,   "y":40},
            {"matrix":[3, 1], "flags":8, "x":22,  "y":40},
            {"matrix":[3, 2], "flags":4, "x":41,  "y":40},
            {"matrix":[3, 3], "flags":4, "x":55,  "y":40},
            {"matrix":[3, 4], "flags":4, "x":69,  "y":40},
            {"matrix":[3, 5], "flags":4, "x":83,  "y":40},
            {"matrix":[3, 6], "flags":4, "x":97,  "y":40},

            {"matrix":[4, 0],  "flags":1, "x":0,   "y":52},
            {"matrix":[4, 2],  "flags":1, "x":34,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":61,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":76,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":90,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":102, "y":52},
            {"matrix":[5, 0],  "flags":1, "x":0,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":19,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":36,  "y":64},
            {"matrix":[5, 3],  "flags":1, "x":53,  "y":64},
            {"matrix":[5, 4],  "flags":1, "x":70,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":94,  "y":64},

            {"matrix":[6, 0], "flags":1, "x":110, "y":0},
            {"matrix":[6, 1], "flags":1, "x":124, "y":0},
            {"matrix":[6, 2], "flags":1, "x":138, "y":0},
            {"matrix":[6, 3], "flags":1, "x":152, "y":0},
            {"matrix":[6, 4], "flags":1, "x":165, "y":0},
            {"matrix":[6, 5], "flags":1, "x":179, "y":0},
            {"matrix":[6, 6], "flags":1, "x":193, "y":0},
            {"matrix":[6, 7], "flags":1, "x":207, "y":0},
            {"matrix":[7, 0], "flags":4, "x":110, "y":15},
            {"matrix":[7, 1], "flags":4, "x":124, "y":15},
            {"matrix":[7, 2], "flags":4, "x":138, "y":15},
            {"matrix":[7, 3], "flags":4, "x":152, "y":15},
            {"matrix":[7, 4], "flags":4, "x":165, "y":15},
            {"matrix":[7, 5], "flags":4, "x":179, "y":15},
            {"matrix":[7, 6], "flags":1, "x":200, "y":15},
            {"matrix":[7, 8], "flags":1, "x":224, "y":15},

            {"matrix":[8, 0], "flags":4, "x":104, "y":27},
            {"matrix":[8, 1], "flags":4, "x":117, "y":27},
            {"matrix":[8, 2], "flags":4, "x":131, "y":27},
            {"matrix":[8, 3], "flags":4, "x":145, "y":27},
            {"matrix":[8, 4], "flags":4, "x":158, "y":27},
            {"matrix":[8, 5], "flags":4, "x":172, "y":27},
            {"matrix":[8, 6], "flags":4, "x":186, "y":27},
            {"matrix":[8, 7], "flags":4, "x":203, "y":27},
            {"matrix":[8, 8], "flags":1, "x":224, "y":27},
            {"matrix":[9, 0], "flags":4, "x":107, "y":40},
            {"matrix":[9, 1], "flags":4, "x":121, "y":40},
            {"matrix":[9, 2], "flags":4, "x":134, "y":40},
            {"matrix":[9, 3], "flags":4, "x":148, "y":40},
            {"matrix":[9, 4], "flags":4, "x":162, "y":40},
            {"matrix":[9, 5], "flags":4, "x":176, "y":40},
            {"matrix":[9, 7], "flags":1, "x":198, "y":40},
            {"matrix":[9, 8], "flags":1, "x":224, "y":40},

            {"matrix":[10, 0], "flags":4, "x":114, "y":52},
            {"matrix":[10, 1], "flags":4, "x":127, "y":52},
            {"matrix":[10, 2], "flags":4, "x":141, "y":52},
            {"matrix":[10, 3], "flags":4, "x":155, "y":52},
            {"matrix":[10, 4], "flags":4, "x":169, "y":52},
            {"matrix":[10, 5], "flags":1, "x":188, "y":52},
            {"matrix":[10, 7], "flags":1, "x":210, "y":52},
            {"matrix":[11, 1], "flags":4, "x":126, "y":64},
            {"matrix":[11, 2], "flags":1, "x":152, "y":64},
            {"matrix":[11, 3], "flags":1, "x":166, "y":64},
            {"matrix":[11, 4], "flags":1, "x":180, "y":64},
            {"matrix":[11, 6], "flags":1, "x":196, "y":64},
            {"matrix":[11, 7], "flags":1, "x":210, "y":64},
            {"matrix":[11, 8], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q11/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_92_iso(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_INS,   KC_DEL,   KC_MUTE,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,  KC_LCMD,  MO(MAC_FN),         KC_SPC,                        KC_SPC,             KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_92_iso(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,  _______,  _______,            _______,                       _______,            _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_92_iso(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_INS,   KC_DEL,   KC_MUTE,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,  KC_LALT,  MO(WIN_FN),         KC_SPC,                        KC_SPC,             KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_92_iso(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,  _______,  _______,            _______,                       _______,            _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU), ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU), ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU), ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU), ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q11/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q11/iso_encoder/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 23

================
File: q11/iso_encoder/iso_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |     G location
 *   |  |     |     B location
 *   |  |     |     | */
    {0, CB1_CA2,  CB3_CA2,  CB2_CA2},  // ESC
    {0, CB1_CA3,  CB3_CA3,  CB2_CA3},  // F1
    {0, CB1_CA4,  CB3_CA4,  CB2_CA4},  // F2
    {0, CB1_CA5,  CB3_CA5,  CB2_CA5},  // F3
    {0, CB1_CA6,  CB3_CA6,  CB2_CA6},  // F4
    {0, CB1_CA7,  CB3_CA7,  CB2_CA7},  // F5
    {0, CB1_CA8,  CB3_CA8,  CB2_CA8},  // F6

    {0, CB4_CA1,  CB6_CA1,  CB5_CA1},  // M1
    {0, CB4_CA2,  CB6_CA2,  CB5_CA2},  // `~
    {0, CB4_CA3,  CB6_CA3,  CB5_CA3},  // 1!
    {0, CB4_CA4,  CB6_CA4,  CB5_CA4},  // 2@
    {0, CB4_CA5,  CB6_CA5,  CB5_CA5},  // 3#
    {0, CB4_CA6,  CB6_CA6,  CB5_CA6},  // 4$
    {0, CB4_CA7,  CB6_CA7,  CB5_CA7},  // 5%
    {0, CB4_CA8,  CB6_CA8,  CB5_CA8},  // 6^

    {0, CB7_CA1,  CB9_CA1,  CB8_CA1},  // M2
    {0, CB7_CA2,  CB9_CA2,  CB8_CA2},  // TAB
    {0, CB7_CA3,  CB9_CA3,  CB8_CA3},  // Q
    {0, CB7_CA4,  CB9_CA4,  CB8_CA4},  // W
    {0, CB7_CA5,  CB9_CA5,  CB8_CA5},  // E
    {0, CB7_CA6,  CB9_CA6,  CB8_CA6},  // R
    {0, CB7_CA7,  CB9_CA7,  CB8_CA7},  // T

    {0, CB10_CA1,  CB12_CA1,  CB11_CA1},  // M3
    {0, CB10_CA2,  CB12_CA2,  CB11_CA2},  // CapsJock
    {0, CB10_CA3,  CB12_CA3,  CB11_CA3},  // A
    {0, CB10_CA4,  CB12_CA4,  CB11_CA4},  // S
    {0, CB10_CA5,  CB12_CA5,  CB11_CA5},  // D
    {0, CB10_CA6,  CB12_CA6,  CB11_CA6},  // F
    {0, CB10_CA7,  CB12_CA7,  CB11_CA7},  // G

    {0, CB10_CA9,  CB12_CA9,  CB11_CA9},  // M4
    {0, CB10_CA10, CB12_CA10, CB11_CA10}, // Shift_L
    {0, CB10_CA11, CB12_CA11, CB11_CA11}, // NUBS
    {0, CB10_CA12, CB12_CA12, CB11_CA12}, // Z
    {0, CB10_CA13, CB12_CA13, CB11_CA13}, // X
    {0, CB10_CA14, CB12_CA14, CB11_CA14}, // C
    {0, CB10_CA15, CB12_CA15, CB11_CA15}, // V
    {0, CB10_CA16, CB12_CA16, CB11_CA16}, // B

    {0, CB7_CA9,  CB9_CA9,  CB8_CA9},  // M5
    {0, CB7_CA10, CB9_CA10, CB8_CA10}, // Ctrl_L
    {0, CB7_CA11, CB9_CA11, CB8_CA11}, // WGn_L
    {0, CB7_CA12, CB9_CA12, CB8_CA12}, // Alt_L
    {0, CB7_CA13, CB9_CA13, CB8_CA13}, // Fn
    {0, CB7_CA15, CB9_CA15, CB8_CA15}, // Space

    {0, CB1_CA16, CB3_CA16, CB2_CA16}, // F7
    {0, CB1_CA15, CB3_CA15, CB2_CA15}, // F8
    {0, CB1_CA14, CB3_CA14, CB2_CA14}, // F9
    {0, CB1_CA13, CB3_CA13, CB2_CA13}, // F11
    {0, CB1_CA12, CB3_CA12, CB2_CA12}, // F11
    {0, CB1_CA11, CB3_CA11, CB2_CA11}, // F12
    {0, CB1_CA10, CB3_CA10, CB2_CA10}, // INS
    {0, CB1_CA9,  CB3_CA9,  CB2_CA9},  // DEL

    {0, CB4_CA16, CB6_CA16, CB5_CA16}, // 7&
    {0, CB4_CA15, CB6_CA15, CB5_CA15}, // 8*
    {0, CB4_CA14, CB6_CA14, CB5_CA14}, // 9(
    {0, CB4_CA13, CB6_CA13, CB5_CA13}, // 1)
    {0, CB4_CA12, CB6_CA12, CB5_CA12}, // -_
    {0, CB4_CA11, CB6_CA11, CB5_CA11}, // =+
    {0, CB4_CA10, CB6_CA10, CB5_CA10}, // BackSpace
    {0, CB4_CA8,  CB6_CA8,  CB5_CA8},  // PgUp

    {0, CB7_CA16, CB9_CA16, CB8_CA16}, // Y
    {0, CB7_CA15, CB9_CA15, CB8_CA15}, // U
    {0, CB7_CA14, CB9_CA14, CB8_CA14}, // G
    {0, CB7_CA13, CB9_CA13, CB8_CA13}, // O
    {0, CB7_CA12, CB9_CA12, CB8_CA12}, // P
    {0, CB7_CA11, CB9_CA11, CB8_CA11}, // [
    {0, CB7_CA10, CB9_CA10, CB8_CA10}, // ]
    {0, CB7_CA8,  CB9_CA8,  CB8_CA8},  // PgDn

    {0, CB10_CA16, CB12_CA16, CB11_CA16}, // H
    {0, CB10_CA15, CB12_CA15, CB11_CA15}, // J
    {0, CB10_CA14, CB12_CA14, CB11_CA14}, // KKEY_PRESS_HOME
    {0, CB10_CA13, CB12_CA13, CB11_CA13}, // J
    {0, CB10_CA12, CB12_CA12, CB11_CA12}, // ;:
    {0, CB10_CA11, CB12_CA11, CB11_CA11}, // '"
    {0, CB10_CA9,  CB12_CA9,  CB11_CA9},  // NUHS
    {0, CB7_CA9,  CB9_CA9,  CB8_CA9},  // Enter
    {0, CB10_CA8,  CB12_CA8,  CB11_CA8},  // Home

    {0, CB10_CA7,  CB12_CA7,  CB11_CA7},  // N
    {0, CB10_CA6,  CB12_CA6,  CB11_CA6},  // M
    {0, CB10_CA5,  CB12_CA5,  CB11_CA5},  // ,<
    {0, CB10_CA4,  CB12_CA4,  CB11_CA4},  // .>
    {0, CB10_CA3,  CB12_CA3,  CB11_CA3},  // ?/
    {0, CB10_CA2,  CB12_CA2,  CB11_CA2},  // Shift_R
    {0, CB10_CA1,  CB12_CA1,  CB11_CA1},  // Up

    {0, CB7_CA6,  CB9_CA6,  CB8_CA6},  // Space
    {0, CB7_CA5,  CB9_CA5,  CB8_CA5},  // Win_R
    {0, CB7_CA4,  CB9_CA4,  CB8_CA4},  // Fn
    {0, CB7_CA3,  CB9_CA3,  CB8_CA3},  // Ctrl_R
    {0, CB7_CA2,  CB9_CA2,  CB8_CA2},  // Left
    {0, CB7_CA1,  CB9_CA1,  CB8_CA1},  // Down
    {0, CB7_CA7,  CB9_CA7,  CB8_CA7},  // Right
};

int rgb_matrix_led_index(int index) {
    return index;
}
#endif

================
File: q11/iso_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x01E1",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "split_count": [43, 47],
        "layout": [
            {"matrix":[0, 1], "flags":1, "x":17,  "y":0},
            {"matrix":[0, 2], "flags":1, "x":31,  "y":0},
            {"matrix":[0, 3], "flags":1, "x":45,  "y":0},
            {"matrix":[0, 4], "flags":1, "x":59,  "y":0},
            {"matrix":[0, 5], "flags":1, "x":72,  "y":0},
            {"matrix":[0, 6], "flags":1, "x":86,  "y":0},
            {"matrix":[0, 7], "flags":1, "x":100, "y":0},
            {"matrix":[1, 0], "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1], "flags":1, "x":17,  "y":15},
            {"matrix":[1, 2], "flags":4, "x":31,  "y":15},
            {"matrix":[1, 3], "flags":4, "x":45,  "y":15},
            {"matrix":[1, 4], "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5], "flags":4, "x":72,  "y":15},
            {"matrix":[1, 6], "flags":4, "x":86,  "y":15},
            {"matrix":[1, 7], "flags":4, "x":100, "y":15},

            {"matrix":[2, 0], "flags":1, "x":0,   "y":27},
            {"matrix":[2, 1], "flags":1, "x":21,  "y":27},
            {"matrix":[2, 2], "flags":4, "x":38,  "y":27},
            {"matrix":[2, 3], "flags":4, "x":52,  "y":27},
            {"matrix":[2, 4], "flags":4, "x":66,  "y":27},
            {"matrix":[2, 6], "flags":4, "x":79,  "y":27},
            {"matrix":[2, 7], "flags":4, "x":93,  "y":27},
            {"matrix":[3, 0], "flags":1, "x":0,   "y":40},
            {"matrix":[3, 1], "flags":8, "x":22,  "y":40},
            {"matrix":[3, 2], "flags":4, "x":41,  "y":40},
            {"matrix":[3, 3], "flags":4, "x":55,  "y":40},
            {"matrix":[3, 4], "flags":4, "x":69,  "y":40},
            {"matrix":[3, 5], "flags":4, "x":83,  "y":40},
            {"matrix":[3, 6], "flags":4, "x":97,  "y":40},

            {"matrix":[4, 0],  "flags":1, "x":0,   "y":52},
            {"matrix":[4, 1],  "flags":1, "x":19,  "y":52},
            {"matrix":[4, 2],  "flags":1, "x":34,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":76,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":90,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":103, "y":52},
            {"matrix":[5, 0],  "flags":1, "x":0,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":19,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":36,  "y":64},
            {"matrix":[5, 3],  "flags":1, "x":53,  "y":64},
            {"matrix":[5, 4],  "flags":1, "x":71,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":95,  "y":64},

            {"matrix":[6, 0], "flags":1, "x":110, "y":0},
            {"matrix":[6, 1], "flags":1, "x":124, "y":0},
            {"matrix":[6, 2], "flags":1, "x":138, "y":0},
            {"matrix":[6, 3], "flags":1, "x":152, "y":0},
            {"matrix":[6, 4], "flags":1, "x":165, "y":0},
            {"matrix":[6, 5], "flags":1, "x":179, "y":0},
            {"matrix":[6, 6], "flags":1, "x":193, "y":0},
            {"matrix":[6, 7], "flags":1, "x":207, "y":0},
            {"matrix":[7, 0], "flags":4, "x":110, "y":15},
            {"matrix":[7, 1], "flags":4, "x":124, "y":15},
            {"matrix":[7, 2], "flags":4, "x":138, "y":15},
            {"matrix":[7, 3], "flags":4, "x":152, "y":15},
            {"matrix":[7, 4], "flags":4, "x":165, "y":15},
            {"matrix":[7, 5], "flags":4, "x":179, "y":15},
            {"matrix":[7, 6], "flags":1, "x":200, "y":15},
            {"matrix":[7, 8], "flags":1, "x":224, "y":15},

            {"matrix":[8, 0], "flags":4, "x":103, "y":27},
            {"matrix":[8, 1], "flags":4, "x":117, "y":27},
            {"matrix":[8, 2], "flags":4, "x":131, "y":27},
            {"matrix":[8, 3], "flags":4, "x":145, "y":27},
            {"matrix":[8, 4], "flags":4, "x":158, "y":27},
            {"matrix":[8, 5], "flags":4, "x":172, "y":27},
            {"matrix":[8, 6], "flags":4, "x":186, "y":27},
            {"matrix":[8, 8], "flags":1, "x":224, "y":27},
            {"matrix":[9, 0], "flags":4, "x":107, "y":40},
            {"matrix":[9, 1], "flags":4, "x":121, "y":40},
            {"matrix":[9, 2], "flags":4, "x":134, "y":40},
            {"matrix":[9, 3], "flags":4, "x":148, "y":40},
            {"matrix":[9, 4], "flags":4, "x":162, "y":40},
            {"matrix":[9, 5], "flags":4, "x":176, "y":40},
            {"matrix":[9, 7], "flags":1, "x":190, "y":40},
            {"matrix":[8, 7], "flags":1, "x":208, "y":36},
            {"matrix":[9, 8], "flags":1, "x":224, "y":40},

            {"matrix":[10, 0], "flags":4, "x":114, "y":52},
            {"matrix":[10, 1], "flags":4, "x":127, "y":52},
            {"matrix":[10, 2], "flags":4, "x":141, "y":52},
            {"matrix":[10, 3], "flags":4, "x":155, "y":52},
            {"matrix":[10, 4], "flags":4, "x":169, "y":52},
            {"matrix":[10, 5], "flags":1, "x":188, "y":52},
            {"matrix":[10, 7], "flags":1, "x":210, "y":52},
            {"matrix":[11, 1], "flags":4, "x":126, "y":64},
            {"matrix":[11, 2], "flags":1, "x":152, "y":64},
            {"matrix":[11, 3], "flags":1, "x":166, "y":64},
            {"matrix":[11, 4], "flags":1, "x":180, "y":64},
            {"matrix":[11, 6], "flags":1, "x":196, "y":64},
            {"matrix":[11, 7], "flags":1, "x":210, "y":64},
            {"matrix":[11, 8], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q11/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0x80, 0xFF, 0xFF } // 300mA

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

// Needed as the master side could enter slave state during poweron
// of host, due to missing VUSB detection.
#define SPLIT_WATCHDOG_ENABLE

================
File: q11/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE
#define HAL_USE_SERIAL TRUE
#define HAL_USE_ADC TRUE

#include_next <halconf.h>

================
File: q11/info.json
================
{
    "keyboard_name": "Keychron Q11",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "usb": {
        "vid": "0x3434"
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "dip_switch": {
        "pins": ["A8"]
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "encoder": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["A7", "A6", "A5", "A4", "A3", "A2", "A1", "C15", null],
        "rows": ["A13", "A14", "A15", "B3", "B4", "B5"]
    },
    "diode_direction": "ROW2COL",
    "split": {
        "enabled": true,
        "encoder": {
            "right": {
                "rotary": [
                    {"pin_a": "C14", "pin_b": "C15"}
                ]
            }
        },
        "handedness": {
            "matrix_grid": ["A2", "A15"]
        },
        "matrix_pins": {
            "right": {
                "cols": ["A8", "A7", "A6", "A5", "A4", "A3", "A2", "A1", "A0"],
                "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
            }
        },
        "serial": {
            "driver": "usart",
            "pin": "A9"
        },
        "transport": {
            "sync" :{
                "matrix_state": true
            }
        },
        "bootmagic": {
            "matrix": [6, 7]
        }
    },
    "encoder": {
        "rotary": [
            {
                "pin_a": "B0",
                "pin_b": "B1"
            }
        ]
    },
    "rgb_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "sleep": true
    },
    "layouts": {
        "LAYOUT_91_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.25, "y": 0},
                {"matrix": [0, 6], "x": 6.25, "y": 0},
                {"matrix": [0, 7], "x": 7.25, "y": 0},
                {"matrix": [6, 0], "x": 8.25, "y": 0},
                {"matrix": [6, 1], "x": 9.25, "y": 0},
                {"matrix": [6, 2], "x": 10.25, "y": 0},
                {"matrix": [6, 3], "x": 11.25, "y": 0},
                {"matrix": [6, 4], "x": 12.25, "y": 0},
                {"matrix": [6, 5], "x": 13.25, "y": 0},
                {"matrix": [6, 6], "x": 14.25, "y": 0},
                {"matrix": [6, 7], "x": 15.25, "y": 0},
                {"matrix": [6, 8], "x": 16.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1.25, "y": 1.25},
                {"matrix": [1, 2], "x": 2.25, "y": 1.25},
                {"matrix": [1, 3], "x": 3.25, "y": 1.25},
                {"matrix": [1, 4], "x": 4.25, "y": 1.25},
                {"matrix": [1, 5], "x": 5.25, "y": 1.25},
                {"matrix": [1, 6], "x": 6.25, "y": 1.25},
                {"matrix": [1, 7], "x": 7.25, "y": 1.25},
                {"matrix": [7, 0], "x": 8.25, "y": 1.25},
                {"matrix": [7, 1], "x": 9.25, "y": 1.25},
                {"matrix": [7, 2], "x": 10.25, "y": 1.25},
                {"matrix": [7, 3], "x": 11.25, "y": 1.25},
                {"matrix": [7, 4], "x": 12.25, "y": 1.25},
                {"matrix": [7, 5], "x": 13.25, "y": 1.25},
                {"matrix": [7, 6], "x": 14.25, "y": 1.25, "w": 2},
                {"matrix": [7, 8], "x": 16.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25},
                {"matrix": [2, 1], "x": 1.25, "y": 2.25, "w": 1.5},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 6], "x": 5.75, "y": 2.25},
                {"matrix": [2, 7], "x": 6.75, "y": 2.25},
                {"matrix": [8, 0], "x": 7.75, "y": 2.25},
                {"matrix": [8, 1], "x": 8.75, "y": 2.25},
                {"matrix": [8, 2], "x": 9.75, "y": 2.25},
                {"matrix": [8, 3], "x": 10.75, "y": 2.25},
                {"matrix": [8, 4], "x": 11.75, "y": 2.25},
                {"matrix": [8, 5], "x": 12.75, "y": 2.25},
                {"matrix": [8, 6], "x": 13.75, "y": 2.25},
                {"matrix": [8, 7], "x": 14.75, "y": 2.25, "w": 1.5},
                {"matrix": [8, 8], "x": 16.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 2], "x": 3, "y": 3.25},
                {"matrix": [3, 3], "x": 4, "y": 3.25},
                {"matrix": [3, 4], "x": 5, "y": 3.25},
                {"matrix": [3, 5], "x": 6, "y": 3.25},
                {"matrix": [3, 6], "x": 7, "y": 3.25},
                {"matrix": [9, 0], "x": 8, "y": 3.25},
                {"matrix": [9, 1], "x": 9, "y": 3.25},
                {"matrix": [9, 2], "x": 10, "y": 3.25},
                {"matrix": [9, 3], "x": 11, "y": 3.25},
                {"matrix": [9, 4], "x": 12, "y": 3.25},
                {"matrix": [9, 5], "x": 13, "y": 3.25},
                {"matrix": [9, 7], "x": 14, "y": 3.25, "w": 2.25},
                {"matrix": [9, 8], "x": 16.5, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 2], "x": 1.25, "y": 4.25, "w": 2.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 4], "x": 4.5, "y": 4.25},
                {"matrix": [4, 5], "x": 5.5, "y": 4.25},
                {"matrix": [4, 6], "x": 6.5, "y": 4.25},
                {"matrix": [4, 7], "x": 7.5, "y": 4.25},
                {"matrix": [10, 0], "x": 8.5, "y": 4.25},
                {"matrix": [10, 1], "x": 9.5, "y": 4.25},
                {"matrix": [10, 2], "x": 10.5, "y": 4.25},
                {"matrix": [10, 3], "x": 11.5, "y": 4.25},
                {"matrix": [10, 4], "x": 12.5, "y": 4.25},
                {"matrix": [10, 5], "x": 13.5, "y": 4.25, "w": 1.75},
                {"matrix": [10, 7], "x": 15.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 4], "x": 5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 6.25, "y": 5.25, "w": 2.25},
                {"matrix": [11, 1], "x": 8.5, "y": 5.25, "w": 2.75},
                {"matrix": [11, 2], "x": 11.25, "y": 5.25},
                {"matrix": [11, 3], "x": 12.25, "y": 5.25},
                {"matrix": [11, 4], "x": 13.25, "y": 5.25},
                {"matrix": [11, 6], "x": 14.5, "y": 5.25},
                {"matrix": [11, 7], "x": 15.5, "y": 5.25},
                {"matrix": [11, 8], "x": 16.5, "y": 5.25}
            ]
        },
        "LAYOUT_92_iso": {
            "layout": [
                {"matrix":[0,0], "x":0, "y":0 },
                {"matrix":[0,1], "x":1.25, "y":0 },
                {"matrix":[0,2], "x":2.25, "y":0 },
                {"matrix":[0,3], "x":3.25, "y":0 },
                {"matrix":[0,4], "x":4.25, "y":0 },
                {"matrix":[0,5], "x":5.25, "y":0 },
                {"matrix":[0,6], "x":6.25, "y":0 },
                {"matrix":[0,7], "x":7.25, "y":0 },
                {"matrix":[6,0], "x":9, "y":0 },
                {"matrix":[6,1], "x":10, "y":0 },
                {"matrix":[6,2], "x":11, "y":0 },
                {"matrix":[6,3], "x":12, "y":0 },
                {"matrix":[6,4], "x":13, "y":0 },
                {"matrix":[6,5], "x":14, "y":0 },
                {"matrix":[6,6], "x":15, "y":0 },
                {"matrix":[6,7], "x":16, "y":0 },
                {"matrix":[6,8], "x":17.25, "y":0 },

                {"matrix":[1,0], "x":0, "y":1.25 },
                {"matrix":[1,1], "x":1.25, "y":1.25 },
                {"matrix":[1,2], "x":2.25, "y":1.25 },
                {"matrix":[1,3], "x":3.25, "y":1.25 },
                {"matrix":[1,4], "x":4.25, "y":1.25 },
                {"matrix":[1,5], "x":5.25, "y":1.25 },
                {"matrix":[1,6], "x":6.25, "y":1.25 },
                {"matrix":[1,7], "x":7.25, "y":1.25 },
                {"matrix":[7,0], "x":9, "y":1.25 },
                {"matrix":[7,1], "x":10, "y":1.25 },
                {"matrix":[7,2], "x":11, "y":1.25 },
                {"matrix":[7,3], "x":12, "y":1.25 },
                {"matrix":[7,4], "x":13, "y":1.25 },
                {"matrix":[7,5], "x":14, "y":1.25 },
                {"matrix":[7,6], "x":15, "y":1.25, "w":2 },
                {"matrix":[7,8], "x":17.25, "y":1.25 },

                {"matrix":[2,0], "x":0, "y":2.25 },
                {"matrix":[2,1], "x":1.25, "y":2.25, "w":1.5 },
                {"matrix":[2,2], "x":2.75, "y":2.25 },
                {"matrix":[2,3], "x":3.75, "y":2.25 },
                {"matrix":[2,4], "x":4.75, "y":2.25 },
                {"matrix":[2,6], "x":5.75, "y":2.25 },
                {"matrix":[2,7], "x":6.75, "y":2.25 },
                {"matrix":[8,0], "x":8.5, "y":2.25 },
                {"matrix":[8,1], "x":9.5, "y":2.25 },
                {"matrix":[8,2], "x":10.5, "y":2.25 },
                {"matrix":[8,3], "x":11.5, "y":2.25 },
                {"matrix":[8,4], "x":12.5, "y":2.25 },
                {"matrix":[8,5], "x":13.5, "y":2.25 },
                {"matrix":[8,6], "x":14.5, "y":2.25 },
                {"matrix":[8,8], "x":17.25, "y":2.25 },

                {"matrix":[3,0], "x":0, "y":3.25 },
                {"matrix":[3,1], "x":1.25, "y":3.25, "w":1.75 },
                {"matrix":[3,2], "x":3, "y":3.25 },
                {"matrix":[3,3], "x":4, "y":3.25 },
                {"matrix":[3,4], "x":5, "y":3.25 },
                {"matrix":[3,5], "x":6, "y":3.25 },
                {"matrix":[3,6], "x":7, "y":3.25 },
                {"matrix":[9,0], "x":8.75, "y":3.25 },
                {"matrix":[9,1], "x":9.75, "y":3.25 },
                {"matrix":[9,2], "x":10.75, "y":3.25 },
                {"matrix":[9,3], "x":11.75, "y":3.25 },
                {"matrix":[9,4], "x":12.75, "y":3.25 },
                {"matrix":[9,5], "x":13.75, "y":3.25 },
                {"matrix":[9,7], "x":14.75, "y":3.25 },
                {"matrix":[8,7], "x":15.75, "y":2.25, "w":1.25, "h":2 },
                {"matrix":[9,8], "x":17.25, "y":3.25 },

                {"matrix":[4,0], "x":0, "y":4.25 },
                {"matrix":[4,1], "x":1.25, "y":4.25, "w":1.25 },
                {"matrix":[4,2], "x":2.5, "y":4.25 },
                {"matrix":[4,3], "x":3.5, "y":4.25 },
                {"matrix":[4,4], "x":4.5, "y":4.25 },
                {"matrix":[4,5], "x":5.5, "y":4.25 },
                {"matrix":[4,6], "x":6.5, "y":4.25 },
                {"matrix":[4,7], "x":7.5, "y":4.25 },
                {"matrix":[10,0], "x":9.25, "y":4.25 },
                {"matrix":[10,1], "x":10.25, "y":4.25 },
                {"matrix":[10,2], "x":11.25, "y":4.25 },
                {"matrix":[10,3], "x":12.25, "y":4.25 },
                {"matrix":[10,4], "x":13.25, "y":4.25 },
                {"matrix":[10,5], "x":14.25, "y":4.25, "w":1.75 },
                {"matrix":[10,7], "x":16.25, "y":4.25 },

                {"matrix":[5,0], "x":0, "y":5.25 },
                {"matrix":[5,1], "x":1.25, "y":5.25, "w":1.25 },
                {"matrix":[5,2], "x":2.5, "y":5.25, "w":1.25 },
                {"matrix":[5,3], "x":3.75, "y":5.25, "w":1.25 },
                {"matrix":[5,4], "x":5, "y":5.25, "w":1.25 },
                {"matrix":[5,6], "x":6.25, "y":5.25, "w":2.25 },
                {"matrix":[11,1], "x":9.25, "y":5.25, "w":2.75 },
                {"matrix":[11,2], "x":12, "y":5.25 },
                {"matrix":[11,3], "x":13, "y":5.25 },
                {"matrix":[11,4], "x":14, "y":5.25 },
                {"matrix":[11,6], "x":15.25, "y":5.25 },
                {"matrix":[11,7], "x":16.25, "y":5.25 },
                {"matrix":[11,8], "x":17.25, "y":5.25}
            ]
        }
    }
}

================
File: q11/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

#undef STM32_SERIAL_USE_USART1
#define STM32_SERIAL_USE_USART1 TRUE

#undef STM32_ADC_USE_ADC1
#define STM32_ADC_USE_ADC1 TRUE

================
File: q11/q11.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 0 : 2));
    }
    return true;
}
#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)
bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
    return true;
}
#endif

#define ADC_BUFFER_DEPTH 1
#define ADC_NUM_CHANNELS 1
#define ADC_SAMPLING_RATE ADC_SMPR_SMP_12P5
#define ADC_RESOLUTION ADC_CFGR_RES_10BITS

static int16_t analogReadPin_my(pin_t pin) {
    ADCConfig          adcCfg = {};
    adcsample_t        sampleBuffer[ADC_NUM_CHANNELS * ADC_BUFFER_DEPTH];
    ADCDriver         *targetDriver       = &ADCD1;
    ADCConversionGroup adcConversionGroup = {
        .circular     = FALSE,
        .num_channels = (uint16_t)(ADC_NUM_CHANNELS),
        .cfgr         = ADC_RESOLUTION,
    };

    palSetLineMode(pin, PAL_MODE_INPUT_ANALOG);
    switch (pin) {
        case B0:
            adcConversionGroup.smpr[2] = ADC_SMPR2_SMP_AN15(ADC_SAMPLING_RATE);
            adcConversionGroup.sqr[0]  = ADC_SQR1_SQ1_N(ADC_CHANNEL_IN15);
            sampleBuffer[0]            = 0;
            break;
        case B1:
            adcConversionGroup.smpr[2] = ADC_SMPR2_SMP_AN16(ADC_SAMPLING_RATE);
            adcConversionGroup.sqr[0]  = ADC_SQR1_SQ1_N(ADC_CHANNEL_IN16);
            sampleBuffer[0]            = 0;
            break;
        default:
            return 0;
    }
    adcStart(targetDriver, &adcCfg);
    if (adcConvert(targetDriver, &adcConversionGroup, &sampleBuffer[0], ADC_BUFFER_DEPTH) != MSG_OK) {
        return 0;
    }

    return *sampleBuffer;
}

void keyboard_post_init_kb(void) {
    // 1. The pin A5/B5 of the USB C interface in the left hand is connected to the pin A0 of MCU,
    // A0 will be set to output and write high when keyboard initial.
    // 2. The same pin in the right hand is connected to the pin B0 and B1 of MCU respectively,
    // and the ADC function of B0 and B1 will be enabled when keyboard initial.
    // 3. because the serial usart RXD and TXD is multiplexed on USB's D+ and D- in the right hand.
    // So detect the voltage on the pin A5/B5 of the USB C interface by ADC,
    // and disable USB connectivity when the ADC value exceeds 1000,
    // to avoid affecting the serial usart communication between the left hand and the right hand.
    if (is_keyboard_left()) {
        gpio_set_pin_output(A0);
        gpio_write_pin_high(A0);
    } else {
        if ((analogReadPin_my(B0) > 1000) || (analogReadPin_my(B1) > 1000)) {
            gpio_set_pin_input(A11);
            gpio_set_pin_input(A12);
        }
    }

    keyboard_post_init_user();
}

================
File: q11/readme.md
================
# Keychron Q11

![Keychron Q11](https://i.imgur.com/FPTNqKj.jpg)

A customizable 75% split keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q11
* Hardware Availability: [Keychron Q11 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q11-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q11/ansi_encoder:default
    make keychron/q11/iso_encoder:default

Flashing example for this keyboard:

    make keychron/q11/ansi_encoder:default:flash
    make keychron/q11/iso_encoder:default:flash

**Reset Key**: The master and slave side should be flashed individually, to enter flashing mode, hold down the key located at *K01*, which programmed as *Esc* while plugging in the keyboard for the master side and hold down the key located at *K67*, which programmed as *Del* while plugging in the keyboard for the slave side.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q12/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_103(
        KC_MUTE,  KC_F13,   KC_F14,   KC_F15,    KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,            RM_NEXT,
        KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,   KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,           KC_PGUP,
        KC_P7,    KC_P8,    KC_P9,    KC_PPLS,   KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,           KC_PGDN,
        KC_P4,    KC_P5,    KC_P6,               KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,            KC_HOME,
        KC_P1,    KC_P2,    KC_P3,    KC_PENT,   KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_P0,              KC_PDOT,             KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN, KC_RGHT),
    [MAC_FN] = LAYOUT_ansi_103(
        RM_TOGG,  _______,  _______,  _______,   _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,           RM_TOGG,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,             _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,           _______,
        _______,  _______,  _______,  _______,   _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,            _______,             _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______, _______),
    [WIN_BASE] = LAYOUT_ansi_103(
        KC_MUTE,  _______,  _______,  _______,   KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,   KC_F10,   KC_F11,     KC_F12,   KC_DEL,            RM_NEXT,
        KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,   KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,    KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,           KC_PGUP,
        KC_P7,    KC_P8,    KC_P9,    KC_PPLS,   KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,    KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,           KC_PGDN,
        KC_P4,    KC_P5,    KC_P6,               KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,    KC_SCLN,  KC_QUOT,              KC_ENT,            KC_HOME,
        KC_P1,    KC_P2,    KC_P3,    KC_PENT,   KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM, KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_P0,              KC_PDOT,             KC_LCTL,  KC_LWIN,  KC_LALT,                                 KC_SPC,                                KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN, KC_RGHT),
    [WIN_FN] = LAYOUT_ansi_103(
        RM_TOGG,  _______,  _______,  _______,   _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT, KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,           RM_TOGG,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______, _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______, _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,             _______,  RM_PREV, RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______, _______,  _______,              _______,           _______,
        _______,  _______,  _______,  _______,   _______,            _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______, _______,  _______,              _______,  _______,
        _______,            _______,             _______,  _______,  _______,                                 _______,                               _______,  _______,    _______,  _______,  _______, _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q12/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q12/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    // {0, CB9_CA1,    CB7_CA1,    CB8_CA1}
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},  // F13
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},  // F14
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},  // F15
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},  // Esc
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},  // F1
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},  // F2
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},  // F3
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},  // F4
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10}, // F5
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11}, // F6
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12}, // F7
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13}, // F8
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // F9
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15}, // F10
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16}, // F11
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16}, // F12
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15}, // DEL
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14}, // Light


    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // num_lock
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // /
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // *
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // -
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // ~`
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 1!
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 2@
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 3#
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 4$
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 5%
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 6^
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // 7&
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // 8*
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14}, // 9(
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15}, // 0)
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // -_
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13}, // =+
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12}, // BackSpace
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11}, // PgUp

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},  // 7
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},  // 8
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},  // 9
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // +
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},  // TAB
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},  // Q
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},  // W
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},  // E
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},  // R
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10}, // T
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11}, // Y
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12}, // U
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13}, // I
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14}, // O
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15}, // P
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16}, // [
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10}, // ]
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},  // \|
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},  // PgDn

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16}, // 4
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15}, // 5
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14}, // 6
    // {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // +
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12}, // CapsLock
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11}, // A
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10}, // S
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},  // D
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},  // F
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},  // G
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},  // H
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},  // J
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},  // k
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},  // l
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},  // ；
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},  // '
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},  // Enter
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},  // Home

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16}, // 1
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15}, // 2
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14}, // 3
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13}, // Enter
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12}, //Shift_L
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10}, // Z
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},  // X
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},  // C
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},  // V
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},  // B
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},  // N
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},  // M
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},  // ,
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},  // .
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},  // ?
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},  // Shift_R
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},  // Up

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}, // 0
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14}, // .
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12}, // Ctrl_L
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11}, // Win_L
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10}, // Alt_L
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},  // Space
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},  // Alt_R
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},  // Fn
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},  // Ctrl_R
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},  // Left
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},  // Down
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  16,  17, __,  0,  1 },
        { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,  35,  36, 18, 19, 20 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,  54,  55, 37, 38, 39 },
        { 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76,  71,  72, 56, 57, 58 },
        { 77, __, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, __,  88,  89, 73, 74, 75 },
        { 92, 93, 94, __, __, 21, 95, 40, __, 96, 97, 98, 99, 100, 101, 90,  2, 91 },
    },
    {
        // LED Index to Physical Position
                {11,0},  {23,0},  {34,0},  {49,0},  {63,0},  {75,0},  {86,0},  {98,0},   {112,0},  {123,0},  {135,0},  {146,0},  {161,0},  {172,0},  {184,0},  {195,0},  {209,0},            {224,0},
        {0,15}, {11,15}, {23,15}, {34,15}, {49,15}, {60,15}, {72,15}, {83,15}, {95,15},  {106,15}, {118,15}, {129,15}, {141,15}, {152,15}, {164,15}, {175,15}, {186,15}, {204,15},           {224,15},
        {0,26}, {11,26}, {23,26}, {34,32}, {52,26}, {66,26}, {78,26}, {89,26}, {101,26}, {112,26}, {123,26}, {135,26}, {146,26}, {158,26}, {169,26}, {181,26}, {192,26}, {207,26},           {224,26},
        {0,38}, {11,38}, {23,38},          {53,38}, {69,38}, {81,38}, {92,38}, {103,38}, {115,38}, {126,38}, {138,38}, {149,38}, {161,38}, {172,38}, {184,38},           {202,38},           {224,38},
        {0,49}, {11,49}, {23,49}, {34,55}, {56,49},          {75,49}, {86,49}, {98,49},  {109,49}, {121,49}, {132,49}, {144,49}, {155,49}, {166,49}, {178,49},           {194,49}, {213,52},
        {6,61},          {23,61},          {50,61}, {65,61}, {79,61},                              {122,61},                               {163,61}, {175,61}, {186,61}, {201,64}, {213,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        8, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        4, 4, 4, 4,  1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        4, 4, 4,     8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        4, 4, 4, 4,  1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        4,    4,     1, 1, 1,          4,          1, 4, 1, 1, 1, 1,
    }
};
#endif

================
File: q12/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 59

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 18

================
File: q12/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q12",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01D1",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A2", "pin_b": "C14"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_103": {
            "layout": [
                {"matrix": [0, 15], "x": 0, "y": 0},
                {"matrix": [0, 16], "x": 1, "y": 0},
                {"matrix": [0, 17], "x": 2, "y": 0},
                {"matrix": [5, 16], "x": 3, "y": 0},
                {"matrix": [0, 0], "x": 4.25, "y": 0},
                {"matrix": [0, 1], "x": 5.5, "y": 0},
                {"matrix": [0, 2], "x": 6.5, "y": 0},
                {"matrix": [0, 3], "x": 7.5, "y": 0},
                {"matrix": [0, 4], "x": 8.5, "y": 0},
                {"matrix": [0, 5], "x": 9.75, "y": 0},
                {"matrix": [0, 6], "x": 10.75, "y": 0},
                {"matrix": [0, 7], "x": 11.75, "y": 0},
                {"matrix": [0, 8], "x": 12.75, "y": 0},
                {"matrix": [0, 9], "x": 14, "y": 0},
                {"matrix": [0, 10], "x": 15, "y": 0},
                {"matrix": [0, 11], "x": 16, "y": 0},
                {"matrix": [0, 12], "x": 17, "y": 0},
                {"matrix": [0, 13], "x": 18.25, "y": 0},
                {"matrix": [0, 14], "x": 19.5, "y": 0},

                {"matrix": [1, 15], "x": 0, "y": 1.25},
                {"matrix": [1, 16], "x": 1, "y": 1.25},
                {"matrix": [1, 17], "x": 2, "y": 1.25},
                {"matrix": [5, 5], "x": 3, "y": 1.25},
                {"matrix": [1, 0], "x": 4.25, "y": 1.25},
                {"matrix": [1, 1], "x": 5.25, "y": 1.25},
                {"matrix": [1, 2], "x": 6.25, "y": 1.25},
                {"matrix": [1, 3], "x": 7.25, "y": 1.25},
                {"matrix": [1, 4], "x": 8.25, "y": 1.25},
                {"matrix": [1, 5], "x": 9.25, "y": 1.25},
                {"matrix": [1, 6], "x": 10.25, "y": 1.25},
                {"matrix": [1, 7], "x": 11.25, "y": 1.25},
                {"matrix": [1, 8], "x": 12.25, "y": 1.25},
                {"matrix": [1, 9], "x": 13.25, "y": 1.25},
                {"matrix": [1, 10], "x": 14.25, "y": 1.25},
                {"matrix": [1, 11], "x": 15.25, "y": 1.25},
                {"matrix": [1, 12], "x": 16.25, "y": 1.25},
                {"matrix": [1, 13], "x": 17.25, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 19.5, "y": 1.25},

                {"matrix": [2, 15], "x": 0, "y": 2.25},
                {"matrix": [2, 16], "x": 1, "y": 2.25},
                {"matrix": [2, 17], "x": 2, "y": 2.25},
                {"matrix": [5, 7], "x": 3, "y": 2.25, "h": 2},
                {"matrix": [2, 0], "x": 4.25, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 5.75, "y": 2.25},
                {"matrix": [2, 2], "x": 6.75, "y": 2.25},
                {"matrix": [2, 3], "x": 7.75, "y": 2.25},
                {"matrix": [2, 4], "x": 8.75, "y": 2.25},
                {"matrix": [2, 5], "x": 9.75, "y": 2.25},
                {"matrix": [2, 6], "x": 10.75, "y": 2.25},
                {"matrix": [2, 7], "x": 11.75, "y": 2.25},
                {"matrix": [2, 8], "x": 12.75, "y": 2.25},
                {"matrix": [2, 9], "x": 13.75, "y": 2.25},
                {"matrix": [2, 10], "x": 14.75, "y": 2.25},
                {"matrix": [2, 11], "x": 15.75, "y": 2.25},
                {"matrix": [2, 12], "x": 16.75, "y": 2.25},
                {"matrix": [2, 13], "x": 17.75, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 19.5, "y": 2.25},

                {"matrix": [3, 15], "x": 0, "y": 3.25},
                {"matrix": [3, 16], "x": 1, "y": 3.25},
                {"matrix": [3, 17], "x": 2, "y": 3.25},
                {"matrix": [3, 0], "x": 4.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 6, "y": 3.25},
                {"matrix": [3, 2], "x": 7, "y": 3.25},
                {"matrix": [3, 3], "x": 8, "y": 3.25},
                {"matrix": [3, 4], "x": 9, "y": 3.25},
                {"matrix": [3, 5], "x": 10, "y": 3.25},
                {"matrix": [3, 6], "x": 11, "y": 3.25},
                {"matrix": [3, 7], "x": 12, "y": 3.25},
                {"matrix": [3, 8], "x": 13, "y": 3.25},
                {"matrix": [3, 9], "x": 14, "y": 3.25},
                {"matrix": [3, 10], "x": 15, "y": 3.25},
                {"matrix": [3, 11], "x": 16, "y": 3.25},
                {"matrix": [3, 13], "x": 17, "y": 3.25, "w": 2.25},
                {"matrix": [3, 14], "x": 19.5, "y": 3.25},

                {"matrix": [4, 15], "x": 0, "y": 4.25},
                {"matrix": [4, 16], "x": 1, "y": 4.25},
                {"matrix": [4, 17], "x": 2, "y": 4.25},
                {"matrix": [3, 12], "x": 3, "y": 4.25, "h": 2},
                {"matrix": [4, 0], "x": 4.25, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 6.5, "y": 4.25},
                {"matrix": [4, 3], "x": 7.5, "y": 4.25},
                {"matrix": [4, 4], "x": 8.5, "y": 4.25},
                {"matrix": [4, 5], "x": 9.5, "y": 4.25},
                {"matrix": [4, 6], "x": 10.5, "y": 4.25},
                {"matrix": [4, 7], "x": 11.5, "y": 4.25},
                {"matrix": [4, 8], "x": 12.5, "y": 4.25},
                {"matrix": [4, 9], "x": 13.5, "y": 4.25},
                {"matrix": [4, 10], "x": 14.5, "y": 4.25},
                {"matrix": [4, 11], "x": 15.5, "y": 4.25},
                {"matrix": [4, 13], "x": 16.5, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 18.5, "y": 4.5},

                {"matrix": [5, 15], "x": 0, "y": 5.25, "w": 2},
                {"matrix": [5, 17], "x": 2, "y": 5.25},
                {"matrix": [5, 0], "x": 4.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 5.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 6.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 8, "y": 5.25, "w": 6.25},
                {"matrix": [5, 9], "x": 14.25, "y": 5.25},
                {"matrix": [5, 10], "x": 15.25, "y": 5.25},
                {"matrix": [5, 11], "x": 16.25, "y": 5.25},
                {"matrix": [5, 12], "x": 17.5, "y": 5.5},
                {"matrix": [5, 13], "x": 18.5, "y": 5.5},
                {"matrix": [5, 14], "x": 19.5, "y": 5.5}
            ]
        }
    }
}

================
File: q12/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q12/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_104(
        KC_MUTE,  KC_F13,   KC_F14,   KC_F15,    KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,            RM_NEXT,
        KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,   KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,           KC_PGUP,
        KC_P7,    KC_P8,    KC_P9,    KC_PPLS,   KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                     KC_PGDN,
        KC_P4,    KC_P5,    KC_P6,               KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,            KC_HOME,
        KC_P1,    KC_P2,    KC_P3,    KC_PENT,   KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_P0,              KC_PDOT,             KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN, KC_RGHT),
    [MAC_FN] = LAYOUT_iso_104(
        RM_TOGG,  _______,  _______,  _______,   _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,           RM_TOGG,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                     _______,
        _______,  _______,  _______,             _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,            _______,             _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______, _______),
    [WIN_BASE] = LAYOUT_iso_104(
        KC_MUTE,  _______,  _______,  _______,   KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,  KC_F11,     KC_F12,   KC_DEL,            RM_NEXT,
        KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,   KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,    KC_MINS,    KC_EQL,   KC_BSPC,           KC_PGUP,
        KC_P7,    KC_P8,    KC_P9,    KC_PPLS,   KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,    KC_LBRC,    KC_RBRC,                     KC_PGDN,
        KC_P4,    KC_P5,    KC_P6,               KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN, KC_QUOT,    KC_NUHS,  KC_ENT,            KC_HOME,
        KC_P1,    KC_P2,    KC_P3,    KC_PENT,   KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,  KC_SLSH,              KC_RSFT,  KC_UP,
        KC_P0,              KC_PDOT,             KC_LCTL,  KC_LWIN,  KC_LALT,                                 KC_SPC,                                 KC_RALT, MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN, KC_RGHT),
    [WIN_FN] = LAYOUT_iso_104(
        RM_TOGG,  _______,  _______,  _______,   _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE, KC_VOLD,    KC_VOLU,  _______,           RM_TOGG,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______, _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______, _______,    _______,                     _______,
        _______,  _______,  _______,             _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______, _______,    _______,  _______,           _______,
        _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  NK_TOGG,  _______,  _______,  _______, _______,              _______,  _______,
        _______,            _______,             _______,  _______,  _______,                                 _______,                                _______, _______,    _______,  _______,  _______, _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q12/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q12/iso_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 58

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 18

================
File: q12/iso_encoder/iso_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    // {0, CB9_CA1,    CB7_CA1,    CB8_CA1}
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},  // F13
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},  // F14
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},  // F15
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},  // Esc
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},  // F1
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},  // F2
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},  // F3
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},  // F4
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10}, // F5
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11}, // F6
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12}, // F7
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13}, // F8
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // F9
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15}, // F10
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16}, // F11
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16}, // F12
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15}, // DEL
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14}, // Light


    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // num_lock
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // /
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // *
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // -
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // ~`
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 1!
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 2@
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 3#
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 4$
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 5%
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 6^
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // 7&
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // 8*
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14}, // 9(
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15}, // 0)
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // -_
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13}, // =+
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12}, // BackSpace
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11}, // PgUp

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},  // 7
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},  // 8
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},  // 9
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // +
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},  // TAB
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},  // Q
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},  // W
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},  // E
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},  // R
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10}, // T
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11}, // Y
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12}, // U
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13}, // I
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14}, // O
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15}, // P
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16}, // [
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10}, // ]
    // {0, CB12_CA9,    CB10_CA9,    CB11_CA9},  // \|
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},  // PgDn

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16}, // 4
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15}, // 5
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14}, // 6
    // {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // +
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12}, // CapsLock
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11}, // A
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10}, // S
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},  // D
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},  // F
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},  // G
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},  // H
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},  // J
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},  // k
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},  // l
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},  // ；
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},  // '
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},  // #~
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},  // Enter
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},  // Home

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16}, // 1
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15}, // 2
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14}, // 3
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13}, // Enter
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12}, //Shift_L
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11}, // |
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10}, // Z
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},  // X
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},  // C
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},  // V
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},  // B
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},  // N
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},  // M
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},  // ,
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},  // .
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},  // ?
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},  // Shift_R
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},  // Up

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}, // 0
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14}, // .
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12}, // Ctrl_L
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11}, // Win_L
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10}, // Alt_L
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},  // Space
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},  // Alt_R
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},  // Fn
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},  // Ctrl_R
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},  // Left
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},  // Down
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,   16,  17, __,  0,  1 },
        { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,   35,  36, 18, 19, 20 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,   71,  54, 37, 38, 39 },
        { 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 76,   70,  72, 55, 56, 57 },
        { 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, __,   89,  90, 73, 74, 75 },
        { 93, 94, 95, __, __, 21, 96, 40, __, 97, 98, 99, 100, 101, 102, 91,  2, 92 },
    },
    {
        // LED Index to Physical Position
                {11,0},  {23,0},  {34,0},  {49,0},  {63,0},  {75,0},  {86,0},  {98,0},   {112,0},  {123,0},  {135,0},  {146,0},  {160,0},  {172,0},  {183,0},  {194,0},  {209,0},            {224,0},
        {0,15}, {11,15}, {23,15}, {34,15}, {49,15}, {60,15}, {72,15}, {83,15}, {95,15},  {106,15}, {117,15}, {129,15}, {140,15}, {152,15}, {163,15}, {175,15}, {186,15}, {204,15},           {224,15},
        {0,26}, {11,26}, {23,26}, {34,32}, {52,26}, {66,26}, {77,26}, {89,26}, {100,26}, {112,26}, {123,26}, {135,26}, {146,26}, {158,26}, {169,26}, {180,26}, {192,26},                     {224,26},
        {0,38}, {11,38}, {23,38},          {53,38}, {69,38}, {80,38}, {92,38}, {103,38}, {115,38}, {126,38}, {137,38}, {149,38}, {160,38}, {172,38}, {183,38}, {195,38}, {210,34},           {224,38},
        {0,49}, {11,49}, {23,49}, {34,55}, {50,49}, {63,49}, {75,49}, {86,49}, {97,49},  {109,49}, {120,49}, {132,49}, {143,49}, {155,49}, {166,49}, {177,49}, {193,49},           {212,52},
        {6,61},          {23,61},          {50,61}, {65,61}, {79,61},                              {122,61},                               {163,61}, {174,61}, {186,61}, {201,64}, {212,64}, {223,64},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        8, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        4, 4, 4, 4,  1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        4, 4, 4,     8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        4, 4, 4, 4,  1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        4,    4,     1, 1, 1,          4,          1, 4, 1, 1, 1, 1,
    }
};
#endif

================
File: q12/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q12",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01D3",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A2", "pin_b": "C14"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_104": {
            "layout": [
                {"matrix": [0, 15], "x": 0, "y": 0},
                {"matrix": [0, 16], "x": 1, "y": 0},
                {"matrix": [0, 17], "x": 2, "y": 0},
                {"matrix": [5, 16], "x": 3, "y": 0},
                {"matrix": [0, 0], "x": 4.25, "y": 0},
                {"matrix": [0, 1], "x": 5.5, "y": 0},
                {"matrix": [0, 2], "x": 6.5, "y": 0},
                {"matrix": [0, 3], "x": 7.5, "y": 0},
                {"matrix": [0, 4], "x": 8.5, "y": 0},
                {"matrix": [0, 5], "x": 9.75, "y": 0},
                {"matrix": [0, 6], "x": 10.75, "y": 0},
                {"matrix": [0, 7], "x": 11.75, "y": 0},
                {"matrix": [0, 8], "x": 12.75, "y": 0},
                {"matrix": [0, 9], "x": 14, "y": 0},
                {"matrix": [0, 10], "x": 15, "y": 0},
                {"matrix": [0, 11], "x": 16, "y": 0},
                {"matrix": [0, 12], "x": 17, "y": 0},
                {"matrix": [0, 13], "x": 18.25, "y": 0},
                {"matrix": [0, 14], "x": 19.5, "y": 0},

                {"matrix": [1, 15], "x": 0, "y": 1.25},
                {"matrix": [1, 16], "x": 1, "y": 1.25},
                {"matrix": [1, 17], "x": 2, "y": 1.25},
                {"matrix": [5, 5], "x": 3, "y": 1.25},
                {"matrix": [1, 0], "x": 4.25, "y": 1.25},
                {"matrix": [1, 1], "x": 5.25, "y": 1.25},
                {"matrix": [1, 2], "x": 6.25, "y": 1.25},
                {"matrix": [1, 3], "x": 7.25, "y": 1.25},
                {"matrix": [1, 4], "x": 8.25, "y": 1.25},
                {"matrix": [1, 5], "x": 9.25, "y": 1.25},
                {"matrix": [1, 6], "x": 10.25, "y": 1.25},
                {"matrix": [1, 7], "x": 11.25, "y": 1.25},
                {"matrix": [1, 8], "x": 12.25, "y": 1.25},
                {"matrix": [1, 9], "x": 13.25, "y": 1.25},
                {"matrix": [1, 10], "x": 14.25, "y": 1.25},
                {"matrix": [1, 11], "x": 15.25, "y": 1.25},
                {"matrix": [1, 12], "x": 16.25, "y": 1.25},
                {"matrix": [1, 13], "x": 17.25, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 19.5, "y": 1.25},

                {"matrix": [2, 15], "x": 0, "y": 2.25},
                {"matrix": [2, 16], "x": 1, "y": 2.25},
                {"matrix": [2, 17], "x": 2, "y": 2.25},
                {"matrix": [5, 7], "x": 3, "y": 2.25, "h": 2},
                {"matrix": [2, 0], "x": 4.25, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 5.75, "y": 2.25},
                {"matrix": [2, 2], "x": 6.75, "y": 2.25},
                {"matrix": [2, 3], "x": 7.75, "y": 2.25},
                {"matrix": [2, 4], "x": 8.75, "y": 2.25},
                {"matrix": [2, 5], "x": 9.75, "y": 2.25},
                {"matrix": [2, 6], "x": 10.75, "y": 2.25},
                {"matrix": [2, 7], "x": 11.75, "y": 2.25},
                {"matrix": [2, 8], "x": 12.75, "y": 2.25},
                {"matrix": [2, 9], "x": 13.75, "y": 2.25},
                {"matrix": [2, 10], "x": 14.75, "y": 2.25},
                {"matrix": [2, 11], "x": 15.75, "y": 2.25},
                {"matrix": [2, 12], "x": 16.75, "y": 2.25},
                {"matrix": [2, 14], "x": 19.5, "y": 2.25},

                {"matrix": [3, 15], "x": 0, "y": 3.25},
                {"matrix": [3, 16], "x": 1, "y": 3.25},
                {"matrix": [3, 17], "x": 2, "y": 3.25},
                {"matrix": [3, 0], "x": 4.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 6, "y": 3.25},
                {"matrix": [3, 2], "x": 7, "y": 3.25},
                {"matrix": [3, 3], "x": 8, "y": 3.25},
                {"matrix": [3, 4], "x": 9, "y": 3.25},
                {"matrix": [3, 5], "x": 10, "y": 3.25},
                {"matrix": [3, 6], "x": 11, "y": 3.25},
                {"matrix": [3, 7], "x": 12, "y": 3.25},
                {"matrix": [3, 8], "x": 13, "y": 3.25},
                {"matrix": [3, 9], "x": 14, "y": 3.25},
                {"matrix": [3, 10], "x": 15, "y": 3.25},
                {"matrix": [3, 11], "x": 16, "y": 3.25},
                {"matrix": [3, 13], "x": 17, "y": 3.25},
                {"matrix": [2, 13], "x": 18, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 14], "x": 19.5, "y": 3.25},

                {"matrix": [4, 15], "x": 0, "y": 4.25},
                {"matrix": [4, 16], "x": 1, "y": 4.25},
                {"matrix": [4, 17], "x": 2, "y": 4.25},
                {"matrix": [3, 12], "x": 3, "y": 4.25, "h": 2},
                {"matrix": [4, 0], "x": 4.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 5.5, "y": 4.25},
                {"matrix": [4, 2], "x": 6.5, "y": 4.25},
                {"matrix": [4, 3], "x": 7.5, "y": 4.25},
                {"matrix": [4, 4], "x": 8.5, "y": 4.25},
                {"matrix": [4, 5], "x": 9.5, "y": 4.25},
                {"matrix": [4, 6], "x": 10.5, "y": 4.25},
                {"matrix": [4, 7], "x": 11.5, "y": 4.25},
                {"matrix": [4, 8], "x": 12.5, "y": 4.25},
                {"matrix": [4, 9], "x": 13.5, "y": 4.25},
                {"matrix": [4, 10], "x": 14.5, "y": 4.25},
                {"matrix": [4, 11], "x": 15.5, "y": 4.25},
                {"matrix": [4, 13], "x": 16.5, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 18.5, "y": 4.5},

                {"matrix": [5, 15], "x": 0, "y": 5.25, "w": 2},
                {"matrix": [5, 17], "x": 2, "y": 5.25},
                {"matrix": [5, 0], "x": 4.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 5.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 6.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 8, "y": 5.25, "w": 6.25},
                {"matrix": [5, 9], "x": 14.25, "y": 5.25},
                {"matrix": [5, 10], "x": 15.25, "y": 5.25},
                {"matrix": [5, 11], "x": 16.25, "y": 5.25},
                {"matrix": [5, 12], "x": 17.5, "y": 5.5},
                {"matrix": [5, 13], "x": 18.5, "y": 5.5},
                {"matrix": [5, 14], "x": 19.5, "y": 5.5}
            ]
        }
    }
}

================
File: q12/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q12/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0xAD, 0xAD, 0x55, 0xAD, 0xAD, 0x55, 0xAD, 0xAD, 0x55, 0xAD, 0xAD, 0x55 }

================
File: q12/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE
#define PAL_USE_CALLBACKS TRUE

#include_next <halconf.h>

================
File: q12/info.json
================
{
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations":{
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: q12/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN C15
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN A1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN A0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOut(uint8_t dataOut) {
    for (uint8_t i = 0; i < 8; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftout_single(uint8_t data) {
    if (data & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }
    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);

    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 10) {
            shiftout_single(0x00);
        } else {
            shiftout_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - 1))
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
        gpio_atomic_set_pin_output_high(LATCH_PIN);
        gpio_atomic_set_pin_output_low(LATCH_PIN);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == 10)
            // unselect shift Register
            shiftOut(0xFF);
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    if (current_col < 10) {
        matrix_output_select_delay();
    } else {
        for (int8_t cycle = 4; cycle > 0; cycle--) {
            matrix_output_select_delay(); // 0.25us
            matrix_output_select_delay();
            matrix_output_select_delay();
            matrix_output_select_delay();
        }
    }

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q12/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q12/q12.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}
#endif

#if defined(RGB_MATRIX_ENABLE) && (defined(CAPS_LOCK_LED_INDEX) || defined(NUM_LOCK_LED_INDEX))
bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
    return true;
}
#endif

================
File: q12/readme.md
================
# Keychron Q12

A customizable 96% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q12
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/q12/q12_ansi_stm32l432:default

Flashing example for this keyboard:

    make keychron/q12/q12_ansi_stm32l432:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q1v1/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT, MO(WIN_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______)
};

================
File: q1v1/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {
/* Refer to IS31 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {0, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {0, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {0, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {0, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {0, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {0, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {0, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {0, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {0, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {0, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {0, SW3_CS13,   SW1_CS13,   SW2_CS13},
    {0, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {0, SW3_CS15,   SW1_CS15,   SW2_CS15},
    {0, SW3_CS16,   SW1_CS16,   SW2_CS16},

    {0, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {0, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {0, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {0, SW6_CS4,    SW4_CS4,    SW5_CS4},
    {0, SW6_CS5,    SW4_CS5,    SW5_CS5},
    {0, SW6_CS6,    SW4_CS6,    SW5_CS6},
    {0, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {0, SW6_CS8,    SW4_CS8,    SW5_CS8},
    {0, SW6_CS9,    SW4_CS9,    SW5_CS9},
    {0, SW6_CS10,   SW4_CS10,   SW5_CS10},
    {0, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {0, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {0, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {0, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {0, SW6_CS16,   SW4_CS16,   SW5_CS16},

    {0, SW9_CS1,    SW7_CS1,    SW8_CS1},
    {0, SW9_CS2,    SW7_CS2,    SW8_CS2},
    {0, SW9_CS3,    SW7_CS3,    SW8_CS3},
    {0, SW9_CS4,    SW7_CS4,    SW8_CS4},
    {0, SW9_CS5,    SW7_CS5,    SW8_CS5},
    {0, SW9_CS6,    SW7_CS6,    SW8_CS6},
    {0, SW9_CS7,    SW7_CS7,    SW8_CS7},
    {0, SW9_CS8,    SW7_CS8,    SW8_CS8},
    {0, SW9_CS9,    SW7_CS9,    SW8_CS9},
    {0, SW9_CS10,   SW7_CS10,   SW8_CS10},
    {0, SW9_CS11,   SW7_CS11,   SW8_CS11},
    {0, SW9_CS12,   SW7_CS12,   SW8_CS12},
    {0, SW9_CS13,   SW7_CS13,   SW8_CS13},
    {0, SW9_CS14,   SW7_CS14,   SW8_CS14},
    {0, SW9_CS16,   SW7_CS16,   SW8_CS16},

    {0, SW12_CS1,    SW10_CS1,    SW11_CS1},
    {0, SW12_CS2,    SW10_CS2,    SW11_CS2},
    {0, SW12_CS3,    SW10_CS3,    SW11_CS3},
    {0, SW12_CS4,    SW10_CS4,    SW11_CS4},
    {0, SW12_CS5,    SW10_CS5,    SW11_CS5},
    {0, SW12_CS6,    SW10_CS6,    SW11_CS6},
    {0, SW12_CS7,    SW10_CS7,    SW11_CS7},
    {0, SW12_CS8,    SW10_CS8,    SW11_CS8},
    {0, SW12_CS9,    SW10_CS9,    SW11_CS9},
    {0, SW12_CS10,   SW10_CS10,   SW11_CS10},
    {0, SW12_CS11,   SW10_CS11,   SW11_CS11},
    {0, SW12_CS12,   SW10_CS12,   SW11_CS12},
    {0, SW12_CS14,   SW10_CS14,   SW11_CS14},
    {0, SW12_CS16,   SW10_CS16,   SW11_CS16},

    {1, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {1, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {1, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {1, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {1, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {1, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {1, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {1, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {1, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {1, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {1, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {1, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {1, SW3_CS15,   SW1_CS15,   SW2_CS15},

    {1, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {1, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {1, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {1, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {1, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {1, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {1, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {1, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {1, SW6_CS15,   SW4_CS15,   SW5_CS15},
    {1, SW6_CS16,   SW4_CS16,   SW5_CS16}

};

#endif // RGB_MATRIX_ENABLE

================
File: q1v1/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v1/ansi/keyboard.json
================
{
    "usb": {
        "pid": "0x0100",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 18, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 33, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 62, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 81, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 95, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 158, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 173, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 187, "y": 0, "flags": 1},
            {"matrix": [4, 14], "x": 206, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 29, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 44, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 59, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 88, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 103, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 118, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 132, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 162, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 176, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 4, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 22, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 37, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 51, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 81, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 95, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 110, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 125, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 140, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 154, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 169, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 184, "y": 26, "flags": 4},
            {"matrix": [2, 13], "x": 202, "y": 26, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 26, "flags": 1},

            {"matrix": [3, 0], "x": 6, "y": 38, "flags": 1},
            {"matrix": [3, 1], "x": 26, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 40, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 55, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 70, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 84, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 99, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 114, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 129, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 143, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 158, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 173, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 196, "y": 38, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 38, "flags": 1},

            {"matrix": [4, 0], "x": 9, "y": 49, "flags": 1},
            {"matrix": [4, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 185, "y": 49, "flags": 1},
            {"matrix": [3, 12], "x": 209, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x":2, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x":20, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x":39, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x":94, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x":147, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x":162, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x":176, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x":195, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x":209, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x":224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 1.25, "y": 0},
                {"matrix": [0, 3], "x": 2.25, "y": 0},
                {"matrix": [0, 4], "x": 3.25, "y": 0},
                {"matrix": [0, 5], "x": 4.25, "y": 0},
                {"matrix": [0, 6], "x": 5.5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.75, "y": 0},
                {"matrix": [0, 11], "x": 10.75, "y": 0},
                {"matrix": [0, 12], "x": 11.75, "y": 0},
                {"matrix": [0, 13], "x": 12.75, "y": 0},
                {"matrix": [4, 14], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1},
                {"matrix": [1, 1], "x": 1, "y": 1},
                {"matrix": [1, 2], "x": 2, "y": 1},
                {"matrix": [1, 3], "x": 3, "y": 1},
                {"matrix": [1, 4], "x": 4, "y": 1},
                {"matrix": [1, 5], "x": 5, "y": 1},
                {"matrix": [1, 6], "x": 6, "y": 1},
                {"matrix": [1, 7], "x": 7, "y": 1},
                {"matrix": [1, 8], "x": 8, "y": 1},
                {"matrix": [1, 9], "x": 9, "y": 1},
                {"matrix": [1, 10], "x": 10, "y": 1},
                {"matrix": [1, 11], "x": 11, "y": 1},
                {"matrix": [1, 12], "x": 12, "y": 1},
                {"matrix": [1, 13], "x": 13, "y": 1, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2},
                {"matrix": [2, 2], "x": 2.5, "y": 2},
                {"matrix": [2, 3], "x": 3.5, "y": 2},
                {"matrix": [2, 4], "x": 4.5, "y": 2},
                {"matrix": [2, 5], "x": 5.5, "y": 2},
                {"matrix": [2, 6], "x": 6.5, "y": 2},
                {"matrix": [2, 7], "x": 7.5, "y": 2},
                {"matrix": [2, 8], "x": 8.5, "y": 2},
                {"matrix": [2, 9], "x": 9.5, "y": 2},
                {"matrix": [2, 10], "x": 10.5, "y": 2},
                {"matrix": [2, 11], "x": 11.5, "y": 2},
                {"matrix": [2, 12], "x": 12.5, "y": 2},
                {"matrix": [2, 13], "x": 13.5, "y": 2, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3},
                {"matrix": [3, 2], "x": 2.75, "y": 3},
                {"matrix": [3, 3], "x": 3.75, "y": 3},
                {"matrix": [3, 4], "x": 4.75, "y": 3},
                {"matrix": [3, 5], "x": 5.75, "y": 3},
                {"matrix": [3, 6], "x": 6.75, "y": 3},
                {"matrix": [3, 7], "x": 7.75, "y": 3},
                {"matrix": [3, 8], "x": 8.75, "y": 3},
                {"matrix": [3, 9], "x": 9.75, "y": 3},
                {"matrix": [3, 10], "x": 10.75, "y": 3},
                {"matrix": [3, 11], "x": 11.75, "y": 3},
                {"matrix": [3, 13], "x": 12.75, "y": 3, "w": 2.25},
                {"matrix": [3, 14], "x": 15.25, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4},
                {"matrix": [4, 3], "x": 3.25, "y": 4},
                {"matrix": [4, 4], "x": 4.25, "y": 4},
                {"matrix": [4, 5], "x": 5.25, "y": 4},
                {"matrix": [4, 6], "x": 6.25, "y": 4},
                {"matrix": [4, 7], "x": 7.25, "y": 4},
                {"matrix": [4, 8], "x": 8.25, "y": 4},
                {"matrix": [4, 9], "x": 9.25, "y": 4},
                {"matrix": [4, 10], "x": 10.25, "y": 4},
                {"matrix": [4, 11], "x": 11.25, "y": 4},
                {"matrix": [4, 13], "x": 12.25, "y": 4, "w": 1.75},
                {"matrix": [3, 12], "x": 14.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5},
                {"matrix": [5, 11], "x": 11, "y": 5},
                {"matrix": [5, 12], "x": 12, "y": 5},
                {"matrix": [5, 13], "x": 13.25, "y": 5.25},
                {"matrix": [4, 12], "x": 14.25, "y": 5.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25}
            ]
        }
    }
}

================
File: q1v1/ansi/readme.md
================
# The ANSI variant of the Keychron Q1

================
File: q1v1/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_ROPT, MO(MAC_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT, MO(WIN_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
};
#endif

================
File: q1v1/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q1v1/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {
/* Refer to IS31 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {0, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {0, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {0, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {0, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {0, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {0, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {0, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {0, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {0, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {0, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {0, SW3_CS13,   SW1_CS13,   SW2_CS13},
    {0, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {0, SW3_CS15,   SW1_CS15,   SW2_CS15},
    {0, SW3_CS16,   SW1_CS16,   SW2_CS16},

    {0, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {0, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {0, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {0, SW6_CS4,    SW4_CS4,    SW5_CS4},
    {0, SW6_CS5,    SW4_CS5,    SW5_CS5},
    {0, SW6_CS6,    SW4_CS6,    SW5_CS6},
    {0, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {0, SW6_CS8,    SW4_CS8,    SW5_CS8},
    {0, SW6_CS9,    SW4_CS9,    SW5_CS9},
    {0, SW6_CS10,   SW4_CS10,   SW5_CS10},
    {0, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {0, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {0, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {0, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {0, SW6_CS16,   SW4_CS16,   SW5_CS16},

    {0, SW9_CS1,    SW7_CS1,    SW8_CS1},
    {0, SW9_CS2,    SW7_CS2,    SW8_CS2},
    {0, SW9_CS3,    SW7_CS3,    SW8_CS3},
    {0, SW9_CS4,    SW7_CS4,    SW8_CS4},
    {0, SW9_CS5,    SW7_CS5,    SW8_CS5},
    {0, SW9_CS6,    SW7_CS6,    SW8_CS6},
    {0, SW9_CS7,    SW7_CS7,    SW8_CS7},
    {0, SW9_CS8,    SW7_CS8,    SW8_CS8},
    {0, SW9_CS9,    SW7_CS9,    SW8_CS9},
    {0, SW9_CS10,   SW7_CS10,   SW8_CS10},
    {0, SW9_CS11,   SW7_CS11,   SW8_CS11},
    {0, SW9_CS12,   SW7_CS12,   SW8_CS12},
    {0, SW9_CS13,   SW7_CS13,   SW8_CS13},
    {0, SW9_CS14,   SW7_CS14,   SW8_CS14},
    {0, SW9_CS16,   SW7_CS16,   SW8_CS16},

    {0, SW12_CS1,    SW10_CS1,    SW11_CS1},
    {0, SW12_CS2,    SW10_CS2,    SW11_CS2},
    {0, SW12_CS3,    SW10_CS3,    SW11_CS3},
    {0, SW12_CS4,    SW10_CS4,    SW11_CS4},
    {0, SW12_CS5,    SW10_CS5,    SW11_CS5},
    {0, SW12_CS6,    SW10_CS6,    SW11_CS6},
    {0, SW12_CS7,    SW10_CS7,    SW11_CS7},
    {0, SW12_CS8,    SW10_CS8,    SW11_CS8},
    {0, SW12_CS9,    SW10_CS9,    SW11_CS9},
    {0, SW12_CS10,   SW10_CS10,   SW11_CS10},
    {0, SW12_CS11,   SW10_CS11,   SW11_CS11},
    {0, SW12_CS12,   SW10_CS12,   SW11_CS12},
    {0, SW12_CS14,   SW10_CS14,   SW11_CS14},
    {0, SW12_CS16,   SW10_CS16,   SW11_CS16},

    {1, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {1, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {1, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {1, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {1, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {1, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {1, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {1, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {1, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {1, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {1, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {1, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {1, SW3_CS15,   SW1_CS15,   SW2_CS15},

    {1, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {1, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {1, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {1, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {1, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {1, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {1, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {1, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {1, SW6_CS15,   SW4_CS15,   SW5_CS15},
    {1, SW6_CS16,   SW4_CS16,   SW5_CS16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q1v1/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v1/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0101",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "E6", "pin_b": "B7"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 18, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 33, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 62, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 81, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 95, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 158, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 173, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 187, "y": 0, "flags": 1},
            {"matrix": [4, 14], "x": 206, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 29, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 44, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 59, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 88, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 103, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 118, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 132, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 162, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 176, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 4, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 22, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 37, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 51, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 81, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 95, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 110, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 125, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 140, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 154, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 169, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 184, "y": 26, "flags": 4},
            {"matrix": [2, 13], "x": 202, "y": 26, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 26, "flags": 1},

            {"matrix": [3, 0], "x": 6, "y": 38, "flags": 1},
            {"matrix": [3, 1], "x": 26, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 40, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 55, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 70, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 84, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 99, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 114, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 129, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 143, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 158, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 173, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 196, "y": 38, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 38, "flags": 1},

            {"matrix": [4, 0], "x": 9, "y": 49, "flags": 1},
            {"matrix": [4, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 185, "y": 49, "flags": 1},
            {"matrix": [3, 12], "x": 209, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x":2, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x":20, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x":39, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x":94, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x":147, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x":162, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x":176, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x":195, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x":209, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x":224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 1.25, "y": 0},
                {"matrix": [0, 3], "x": 2.25, "y": 0},
                {"matrix": [0, 4], "x": 3.25, "y": 0},
                {"matrix": [0, 5], "x": 4.25, "y": 0},
                {"matrix": [0, 6], "x": 5.5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.75, "y": 0},
                {"matrix": [0, 11], "x": 10.75, "y": 0},
                {"matrix": [0, 12], "x": 11.75, "y": 0},
                {"matrix": [0, 13], "x": 12.75, "y": 0},
                {"matrix": [4, 14], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1},
                {"matrix": [1, 1], "x": 1, "y": 1},
                {"matrix": [1, 2], "x": 2, "y": 1},
                {"matrix": [1, 3], "x": 3, "y": 1},
                {"matrix": [1, 4], "x": 4, "y": 1},
                {"matrix": [1, 5], "x": 5, "y": 1},
                {"matrix": [1, 6], "x": 6, "y": 1},
                {"matrix": [1, 7], "x": 7, "y": 1},
                {"matrix": [1, 8], "x": 8, "y": 1},
                {"matrix": [1, 9], "x": 9, "y": 1},
                {"matrix": [1, 10], "x": 10, "y": 1},
                {"matrix": [1, 11], "x": 11, "y": 1},
                {"matrix": [1, 12], "x": 12, "y": 1},
                {"matrix": [1, 13], "x": 13, "y": 1, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2},
                {"matrix": [2, 2], "x": 2.5, "y": 2},
                {"matrix": [2, 3], "x": 3.5, "y": 2},
                {"matrix": [2, 4], "x": 4.5, "y": 2},
                {"matrix": [2, 5], "x": 5.5, "y": 2},
                {"matrix": [2, 6], "x": 6.5, "y": 2},
                {"matrix": [2, 7], "x": 7.5, "y": 2},
                {"matrix": [2, 8], "x": 8.5, "y": 2},
                {"matrix": [2, 9], "x": 9.5, "y": 2},
                {"matrix": [2, 10], "x": 10.5, "y": 2},
                {"matrix": [2, 11], "x": 11.5, "y": 2},
                {"matrix": [2, 12], "x": 12.5, "y": 2},
                {"matrix": [2, 13], "x": 13.5, "y": 2, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3},
                {"matrix": [3, 2], "x": 2.75, "y": 3},
                {"matrix": [3, 3], "x": 3.75, "y": 3},
                {"matrix": [3, 4], "x": 4.75, "y": 3},
                {"matrix": [3, 5], "x": 5.75, "y": 3},
                {"matrix": [3, 6], "x": 6.75, "y": 3},
                {"matrix": [3, 7], "x": 7.75, "y": 3},
                {"matrix": [3, 8], "x": 8.75, "y": 3},
                {"matrix": [3, 9], "x": 9.75, "y": 3},
                {"matrix": [3, 10], "x": 10.75, "y": 3},
                {"matrix": [3, 11], "x": 11.75, "y": 3},
                {"matrix": [3, 13], "x": 12.75, "y": 3, "w": 2.25},
                {"matrix": [3, 14], "x": 15.25, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4},
                {"matrix": [4, 3], "x": 3.25, "y": 4},
                {"matrix": [4, 4], "x": 4.25, "y": 4},
                {"matrix": [4, 5], "x": 5.25, "y": 4},
                {"matrix": [4, 6], "x": 6.25, "y": 4},
                {"matrix": [4, 7], "x": 7.25, "y": 4},
                {"matrix": [4, 8], "x": 8.25, "y": 4},
                {"matrix": [4, 9], "x": 9.25, "y": 4},
                {"matrix": [4, 10], "x": 10.25, "y": 4},
                {"matrix": [4, 11], "x": 11.25, "y": 4},
                {"matrix": [4, 13], "x": 12.25, "y": 4, "w": 1.75},
                {"matrix": [3, 12], "x": 14.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5},
                {"matrix": [5, 11], "x": 11, "y": 5},
                {"matrix": [5, 12], "x": 12, "y": 5},
                {"matrix": [5, 13], "x": 13.25, "y": 5.25},
                {"matrix": [4, 12], "x": 14.25, "y": 5.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25}
            ]
        }
    }
}

================
File: q1v1/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q1
- Enable EC11 rotary encoder
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume
- Press top right key pushbutton to mute

================
File: q1v1/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,            KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT, MO(WIN_FN),KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,            _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,  _______,  _______,  _______)
    };

================
File: q1v1/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: q1v1/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {
/* Refer to IS31 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {0, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {0, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {0, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {0, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {0, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {0, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {0, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {0, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {0, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {0, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {0, SW3_CS13,   SW1_CS13,   SW2_CS13},
    {0, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {0, SW3_CS15,   SW1_CS15,   SW2_CS15},
    {0, SW3_CS16,   SW1_CS16,   SW2_CS16},

    {0, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {0, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {0, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {0, SW6_CS4,    SW4_CS4,    SW5_CS4},
    {0, SW6_CS5,    SW4_CS5,    SW5_CS5},
    {0, SW6_CS6,    SW4_CS6,    SW5_CS6},
    {0, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {0, SW6_CS8,    SW4_CS8,    SW5_CS8},
    {0, SW6_CS9,    SW4_CS9,    SW5_CS9},
    {0, SW6_CS10,   SW4_CS10,   SW5_CS10},
    {0, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {0, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {0, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {0, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {0, SW6_CS16,   SW4_CS16,   SW5_CS16},

    {0, SW9_CS1,    SW7_CS1,    SW8_CS1},
    {0, SW9_CS2,    SW7_CS2,    SW8_CS2},
    {0, SW9_CS3,    SW7_CS3,    SW8_CS3},
    {0, SW9_CS4,    SW7_CS4,    SW8_CS4},
    {0, SW9_CS5,    SW7_CS5,    SW8_CS5},
    {0, SW9_CS6,    SW7_CS6,    SW8_CS6},
    {0, SW9_CS7,    SW7_CS7,    SW8_CS7},
    {0, SW9_CS8,    SW7_CS8,    SW8_CS8},
    {0, SW9_CS9,    SW7_CS9,    SW8_CS9},
    {0, SW9_CS10,   SW7_CS10,   SW8_CS10},
    {0, SW9_CS11,   SW7_CS11,   SW8_CS11},
    {0, SW9_CS12,   SW7_CS12,   SW8_CS12},
    {0, SW9_CS13,   SW7_CS13,   SW8_CS13},
    {0, SW9_CS16,   SW7_CS16,   SW8_CS16},

    {0, SW12_CS1,    SW10_CS1,    SW11_CS1},
    {0, SW12_CS2,    SW10_CS2,    SW11_CS2},
    {0, SW12_CS3,    SW10_CS3,    SW11_CS3},
    {0, SW12_CS4,    SW10_CS4,    SW11_CS4},
    {0, SW12_CS5,    SW10_CS5,    SW11_CS5},
    {0, SW12_CS6,    SW10_CS6,    SW11_CS6},
    {0, SW12_CS7,    SW10_CS7,    SW11_CS7},
    {0, SW12_CS8,    SW10_CS8,    SW11_CS8},
    {0, SW12_CS9,    SW10_CS9,    SW11_CS9},
    {0, SW12_CS10,   SW10_CS10,   SW11_CS10},
    {0, SW12_CS11,   SW10_CS11,   SW11_CS11},
    {0, SW12_CS12,   SW10_CS12,   SW11_CS12},
	{0, SW12_CS14,   SW10_CS14,   SW11_CS14},
	{0, SW9_CS14,   SW7_CS14,   SW8_CS14},
    {0, SW12_CS16,   SW10_CS16,   SW11_CS16},

    {1, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {1, SW3_CS2,    SW1_CS2,    SW2_CS2},
    {1, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {1, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {1, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {1, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {1, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {1, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {1, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {1, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {1, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {1, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {1, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {1, SW3_CS15,   SW1_CS15,   SW2_CS15},

    {1, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {1, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {1, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {1, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {1, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {1, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {1, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {1, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {1, SW6_CS15,   SW4_CS15,   SW5_CS15},
    {1, SW6_CS16,   SW4_CS16,   SW5_CS16}
};

#define __ NO_LED

led_config_t g_led_config = {
	{
        // Key Matrix to LED Index
		{  0, __,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 14 },
		{ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
		{ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 57, 43 },
		{ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 72, 56, 58 },
		{ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 81, 71, 13 },
		{ 73, 74, 75, __, __, __, 76, __, __, __, 77, 78, 79, 80, 82 }
	},
	{
        // LED Index to Physical Position
        {0,0},           {18,0},  {33,0},  {48,0},  {62,0},  {81,0},  {95,0},   {110,0},  {125,0},  {143,0},  {158,0},  {173,0},  {187,0},  {206,0},  {224,0},
        {0,15}, {15,15}, {29,15}, {44,15}, {59,15}, {73,15}, {88,15}, {103,15}, {118,15}, {132,15}, {147,15}, {162,15}, {176,15}, {198,15},           {224,15},
        {4,26}, {22,26}, {37,26}, {51,26}, {66,26}, {81,26}, {95,26}, {110,26}, {125,26}, {140,26}, {154,26}, {169,26}, {184,26},                     {224,26},
        {6,38}, {26,38}, {40,38}, {55,38}, {70,38}, {84,38}, {99,38}, {114,38}, {129,38}, {143,38}, {158,38}, {173,38}, {187,38}, {203,32},           {224,38},
        {2,49}, {18,49}, {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {151,49}, {165,49},           {185,49}, {209,52},
        {2,61}, {20,61}, {39,61}, {94,61},                            {147,61},                               {162,61}, {176,61}, {195,64}, {209,64}, {224,64}
    },
	{
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,           4,         1, 1, 1, 1, 1, 1
	}
};

#endif // RGB_MATRIX_ENABLE

================
File: q1v1/iso/keyboard.json
================
{
    "usb": {
        "pid": "0x0102",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 18, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 33, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 62, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 81, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 95, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 158, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 173, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 187, "y": 0, "flags": 1},
            {"matrix": [4, 14], "x": 206, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 29, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 44, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 59, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 88, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 103, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 118, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 132, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 162, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 176, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 4, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 22, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 37, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 51, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 81, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 95, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 110, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 125, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 140, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 154, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 169, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 184, "y": 26, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 26, "flags": 1},

            {"matrix": [3, 0], "x": 6, "y": 38, "flags": 1},
            {"matrix": [3, 1], "x": 26, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 40, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 55, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 70, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 84, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 99, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 114, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 129, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 143, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 158, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 173, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 38, "flags": 4},
            {"matrix": [2, 13], "x": 203, "y": 32, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 38, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 49, "flags": 1},
            {"matrix": [4, 1], "x": 18, "y": 49, "flags": 4},
            {"matrix": [4, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 185, "y": 49, "flags": 1},
            {"matrix": [3, 12], "x": 209, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 20, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 39, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 94, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x": 147, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 162, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 176, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 1.25, "y": 0},
                {"matrix": [0, 3], "x": 2.25, "y": 0},
                {"matrix": [0, 4], "x": 3.25, "y": 0},
                {"matrix": [0, 5], "x": 4.25, "y": 0},
                {"matrix": [0, 6], "x": 5.5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.75, "y": 0},
                {"matrix": [0, 11], "x": 10.75, "y": 0},
                {"matrix": [0, 12], "x": 11.75, "y": 0},
                {"matrix": [0, 13], "x": 12.75, "y": 0},
                {"matrix": [4, 14], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 14], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [3, 12], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [4, 12], "x": 14.25, "y": 5.5},
                {"matrix": [5, 14], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: q1v1/iso/readme.md
================
# The ISO variant of the Keychron Q1

================
File: q1v1/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H


enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD ,                               KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LGUI,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
        _______,            KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
};
#endif

================
File: q1v1/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q1v1/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: q1v1/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const is31fl3733_led_t PROGMEM g_is31fl3733_leds[IS31FL3733_LED_COUNT] = {
/* Refer to IS31 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {0, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {0, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {0, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {0, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {0, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {0, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {0, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {0, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {0, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {0, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {0, SW3_CS13,   SW1_CS13,   SW2_CS13},
    {0, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {0, SW3_CS15,   SW1_CS15,   SW2_CS15},
    {0, SW3_CS16,   SW1_CS16,   SW2_CS16},

    {0, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {0, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {0, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {0, SW6_CS4,    SW4_CS4,    SW5_CS4},
    {0, SW6_CS5,    SW4_CS5,    SW5_CS5},
    {0, SW6_CS6,    SW4_CS6,    SW5_CS6},
    {0, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {0, SW6_CS8,    SW4_CS8,    SW5_CS8},
    {0, SW6_CS9,    SW4_CS9,    SW5_CS9},
    {0, SW6_CS10,   SW4_CS10,   SW5_CS10},
    {0, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {0, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {0, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {0, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {0, SW6_CS16,   SW4_CS16,   SW5_CS16},

    {0, SW9_CS1,    SW7_CS1,    SW8_CS1},
    {0, SW9_CS2,    SW7_CS2,    SW8_CS2},
    {0, SW9_CS3,    SW7_CS3,    SW8_CS3},
    {0, SW9_CS4,    SW7_CS4,    SW8_CS4},
    {0, SW9_CS5,    SW7_CS5,    SW8_CS5},
    {0, SW9_CS6,    SW7_CS6,    SW8_CS6},
    {0, SW9_CS7,    SW7_CS7,    SW8_CS7},
    {0, SW9_CS8,    SW7_CS8,    SW8_CS8},
    {0, SW9_CS9,    SW7_CS9,    SW8_CS9},
    {0, SW9_CS10,   SW7_CS10,   SW8_CS10},
    {0, SW9_CS11,   SW7_CS11,   SW8_CS11},
    {0, SW9_CS12,   SW7_CS12,   SW8_CS12},
    {0, SW9_CS13,   SW7_CS13,   SW8_CS13},
    {0, SW9_CS16,   SW7_CS16,   SW8_CS16},

    {0, SW12_CS1,    SW10_CS1,    SW11_CS1},
    {0, SW12_CS2,    SW10_CS2,    SW11_CS2},
    {0, SW12_CS3,    SW10_CS3,    SW11_CS3},
    {0, SW12_CS4,    SW10_CS4,    SW11_CS4},
    {0, SW12_CS5,    SW10_CS5,    SW11_CS5},
    {0, SW12_CS6,    SW10_CS6,    SW11_CS6},
    {0, SW12_CS7,    SW10_CS7,    SW11_CS7},
    {0, SW12_CS8,    SW10_CS8,    SW11_CS8},
    {0, SW12_CS9,    SW10_CS9,    SW11_CS9},
    {0, SW12_CS10,   SW10_CS10,   SW11_CS10},
    {0, SW12_CS11,   SW10_CS11,   SW11_CS11},
    {0, SW12_CS12,   SW10_CS12,   SW11_CS12},
    {0, SW12_CS14,   SW10_CS14,   SW11_CS14},
    {0, SW9_CS14,   SW7_CS14,   SW8_CS14},
    {0, SW12_CS16,   SW10_CS16,   SW11_CS16},

    {1, SW3_CS1,    SW1_CS1,    SW2_CS1},
    {1, SW3_CS2,    SW1_CS2,    SW2_CS2},
    {1, SW3_CS3,    SW1_CS3,    SW2_CS3},
    {1, SW3_CS4,    SW1_CS4,    SW2_CS4},
    {1, SW3_CS5,    SW1_CS5,    SW2_CS5},
    {1, SW3_CS6,    SW1_CS6,    SW2_CS6},
    {1, SW3_CS7,    SW1_CS7,    SW2_CS7},
    {1, SW3_CS8,    SW1_CS8,    SW2_CS8},
    {1, SW3_CS9,    SW1_CS9,    SW2_CS9},
    {1, SW3_CS10,   SW1_CS10,   SW2_CS10},
    {1, SW3_CS11,   SW1_CS11,   SW2_CS11},
    {1, SW3_CS12,   SW1_CS12,   SW2_CS12},
    {1, SW3_CS14,   SW1_CS14,   SW2_CS14},
    {1, SW3_CS15,   SW1_CS15,   SW2_CS15},

    {1, SW6_CS1,    SW4_CS1,    SW5_CS1},
    {1, SW6_CS2,    SW4_CS2,    SW5_CS2},
    {1, SW6_CS3,    SW4_CS3,    SW5_CS3},
    {1, SW6_CS7,    SW4_CS7,    SW5_CS7},
    {1, SW6_CS11,   SW4_CS11,   SW5_CS11},
    {1, SW6_CS12,   SW4_CS12,   SW5_CS12},
    {1, SW6_CS13,   SW4_CS13,   SW5_CS13},
    {1, SW6_CS14,   SW4_CS14,   SW5_CS14},
    {1, SW6_CS15,   SW4_CS15,   SW5_CS15},
    {1, SW6_CS16,   SW4_CS16,   SW5_CS16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q1v1/iso_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0103",
        "device_version": "1.0.2"
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "E6", "pin_b": "B7"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 18, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 33, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 62, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 81, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 95, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 125, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 158, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 173, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 187, "y": 0, "flags": 1},
            {"matrix": [4, 14], "x": 206, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 29, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 44, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 59, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 73, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 88, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 103, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 118, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 132, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 162, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 176, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 198, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 4, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 22, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 37, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 51, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 81, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 95, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 110, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 125, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 140, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 154, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 169, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 184, "y": 26, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 26, "flags": 1},

            {"matrix": [3, 0], "x": 6, "y": 38, "flags": 1},
            {"matrix": [3, 1], "x": 26, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 40, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 55, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 70, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 84, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 99, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 114, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 129, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 143, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 158, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 173, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 38, "flags": 4},
            {"matrix": [2, 13], "x": 203, "y": 32, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 38, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 49, "flags": 1},
            {"matrix": [4, 1], "x": 18, "y": 49, "flags": 4},
            {"matrix": [4, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 185, "y": 49, "flags": 1},
            {"matrix": [3, 12], "x": 209, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 20, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 39, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 94, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x": 147, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 162, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 176, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 1.25, "y": 0},
                {"matrix": [0, 3], "x": 2.25, "y": 0},
                {"matrix": [0, 4], "x": 3.25, "y": 0},
                {"matrix": [0, 5], "x": 4.25, "y": 0},
                {"matrix": [0, 6], "x": 5.5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.75, "y": 0},
                {"matrix": [0, 11], "x": 10.75, "y": 0},
                {"matrix": [0, 12], "x": 11.75, "y": 0},
                {"matrix": [0, 13], "x": 12.75, "y": 0},
                {"matrix": [4, 14], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 14], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [3, 12], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [4, 12], "x": 14.25, "y": 5.5},
                {"matrix": [5, 14], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: q1v1/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q1

- Enables EC11 rotary encoder.
- Turn clockwise to increase volume and turn counter-clockwise to decrease volume.
- Press top right button to mute.

================
File: q1v1/config.h
================
/* Copyright 2021 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define IS31FL3733_I2C_ADDRESS_1 IS31FL3733_I2C_ADDRESS_GND_GND
#define IS31FL3733_I2C_ADDRESS_2 IS31FL3733_I2C_ADDRESS_VCC_VCC

/* Encoder Configuration*/
#define ENCODER_DEFAULT_POS 0x3

================
File: q1v1/info.json
================
{
    "keyboard_name": "Keychron Q1v1",
    "manufacturer": "Keychron",
    "maintainer": "lalalademaxiya1",
    "bootloader": "atmel-dfu",
    "diode_direction": "ROW2COL",
    "build": {
        "lto": true
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "dip_switch": {
        "matrix_grid": [ [0, 1] ]
    },
    "matrix_pins": {
        "cols": ["D5", "D4", "D6", "D7", "B4", "B5", "B6", "C6", "C7", "F7", "F6", "F5", "F4", "F1", "F0"],
        "rows": ["D3", "D2", "B3", "B2", "B1", "B0"]
    },
    "processor": "atmega32u4",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "is31fl3733",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "force_nkro": true,
        "vid": "0x3434"
    }
}

================
File: q1v1/q1v1.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q1v1/readme.md
================
# Keychron Q1v1

![Keychron Q1v1](https://i.imgur.com/BbJNGLY.jpg)

A customizable 75% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q1v1
* Hardware Availability: [Keychron Q1v1 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q1-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q1v1/ansi:default
    make keychron/q1v1/ansi_encoder:default
    make keychron/q1v1/iso:default
    make keychron/q1v1/iso_encoder:default

Flashing example for this keyboard:

    make keychron/q1v1/ansi:default:flash
    make keychron/q1v1/ansi_encoder:default:flash
    make keychron/q1v1/iso:default:flash
    make keychron/q1v1/iso_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q1v2/ansi/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: q1v2/ansi/ansi.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/ansi/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v2/ansi/keyboard.json
================
{
   "usb": {
        "pid": "0x0106",
        "device_version": "2.0.0"
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix":[0,0], "x":0, "y":0},
                {"matrix":[0,1], "x":1.25, "y":0},
                {"matrix":[0,2], "x":2.25, "y":0},
                {"matrix":[0,3], "x":3.25, "y":0},
                {"matrix":[0,4], "x":4.25, "y":0},
                {"matrix":[0,5], "x":5.5, "y":0},
                {"matrix":[0,6], "x":6.5, "y":0},
                {"matrix":[0,7], "x":7.5, "y":0},
                {"matrix":[0,8], "x":8.5, "y":0},
                {"matrix":[0,9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1,0], "x":0, "y":1.25},
                {"matrix":[1,1], "x":1, "y":1.25},
                {"matrix":[1,2], "x":2, "y":1.25},
                {"matrix":[1,3], "x":3, "y":1.25},
                {"matrix":[1,4], "x":4, "y":1.25},
                {"matrix":[1,5], "x":5, "y":1.25},
                {"matrix":[1,6], "x":6, "y":1.25},
                {"matrix":[1,7], "x":7, "y":1.25},
                {"matrix":[1,8], "x":8, "y":1.25},
                {"matrix":[1,9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2,0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2,1], "x":1.5, "y":2.25},
                {"matrix":[2,2], "x":2.5, "y":2.25},
                {"matrix":[2,3], "x":3.5, "y":2.25},
                {"matrix":[2,4], "x":4.5, "y":2.25},
                {"matrix":[2,5], "x":5.5, "y":2.25},
                {"matrix":[2,6], "x":6.5, "y":2.25},
                {"matrix":[2,7], "x":7.5, "y":2.25},
                {"matrix":[2,8], "x":8.5, "y":2.25},
                {"matrix":[2,9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3,0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3,1], "x":1.75, "y":3.25},
                {"matrix":[3,2], "x":2.75, "y":3.25},
                {"matrix":[3,3], "x":3.75, "y":3.25},
                {"matrix":[3,4], "x":4.75, "y":3.25},
                {"matrix":[3,5], "x":5.75, "y":3.25},
                {"matrix":[3,6], "x":6.75, "y":3.25},
                {"matrix":[3,7], "x":7.75, "y":3.25},
                {"matrix":[3,8], "x":8.75, "y":3.25},
                {"matrix":[3,9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4,0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4,2], "x":2.25, "y":4.25},
                {"matrix":[4,3], "x":3.25, "y":4.25},
                {"matrix":[4,4], "x":4.25, "y":4.25},
                {"matrix":[4,5], "x":5.25, "y":4.25},
                {"matrix":[4,6], "x":6.25, "y":4.25},
                {"matrix":[4,7], "x":7.25, "y":4.25},
                {"matrix":[4,8], "x":8.25, "y":4.25},
                {"matrix":[4,9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":1.75},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5,0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5,1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5,2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5,6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25},
                {"matrix":[5,11], "x":11, "y":5.25},
                {"matrix":[5,12], "x":12, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.5},
                {"matrix":[5,14], "x":14.25, "y":5.5},
                {"matrix":[5,15], "x":15.25, "y":5.5}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":206, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":118, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":162, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":26},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":26},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":26},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":26},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":26},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":26},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":26},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":26},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":26},
            {"matrix":[2, 9],  "flags":4, "x":140, "y":26},
            {"matrix":[2, 10], "flags":4, "x":154, "y":26},
            {"matrix":[2, 11], "flags":4, "x":169, "y":26},
            {"matrix":[2, 12], "flags":4, "x":184, "y":26},
            {"matrix":[2, 13], "flags":4, "x":202, "y":26},
            {"matrix":[2, 15], "flags":1, "x":224, "y":26},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":38},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":38},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":38},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":38},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":38},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":38},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":38},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":38},
            {"matrix":[3, 8],  "flags":4, "x":129, "y":38},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":38},
            {"matrix":[3, 10], "flags":4, "x":158, "y":38},
            {"matrix":[3, 11], "flags":4, "x":173, "y":38},
            {"matrix":[3, 13], "flags":1, "x":196, "y":38},
            {"matrix":[3, 15], "flags":1, "x":224, "y":38},

            {"matrix":[4, 0],  "flags":1, "x":9,   "y":49},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":49},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":49},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":49},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":49},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":49},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":49},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":49},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":49},
            {"matrix":[4, 10], "flags":4, "x":151, "y":49},
            {"matrix":[4, 11], "flags":4, "x":165, "y":49},
            {"matrix":[4, 13], "flags":1, "x":185, "y":49},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":61},
            {"matrix":[5, 1],  "flags":1, "x":20,  "y":61},
            {"matrix":[5, 2],  "flags":1, "x":39,  "y":61},
            {"matrix":[5, 6],  "flags":4, "x":94,  "y":61},
            {"matrix":[5, 10], "flags":1, "x":147, "y":61},
            {"matrix":[5, 11], "flags":1, "x":162, "y":61},
            {"matrix":[5, 12], "flags":1, "x":176, "y":61},
            {"matrix":[5, 13], "flags":1, "x":195, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/ansi/rules.mk
================
SRC += matrix.c

================
File: q1v2/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LCMD,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q1v2/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q1v2/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v2/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0107",
        "device_version": "2.0.0"
    },
    "features": {
        "encoder": true
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8", "resolution": 4}
        ]
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix":[0,0], "x":0, "y":0},
                {"matrix":[0,1], "x":1.25, "y":0},
                {"matrix":[0,2], "x":2.25, "y":0},
                {"matrix":[0,3], "x":3.25, "y":0},
                {"matrix":[0,4], "x":4.25, "y":0},
                {"matrix":[0,5], "x":5.5, "y":0},
                {"matrix":[0,6], "x":6.5, "y":0},
                {"matrix":[0,7], "x":7.5, "y":0},
                {"matrix":[0,8], "x":8.5, "y":0},
                {"matrix":[0,9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1,0], "x":0, "y":1.25},
                {"matrix":[1,1], "x":1, "y":1.25},
                {"matrix":[1,2], "x":2, "y":1.25},
                {"matrix":[1,3], "x":3, "y":1.25},
                {"matrix":[1,4], "x":4, "y":1.25},
                {"matrix":[1,5], "x":5, "y":1.25},
                {"matrix":[1,6], "x":6, "y":1.25},
                {"matrix":[1,7], "x":7, "y":1.25},
                {"matrix":[1,8], "x":8, "y":1.25},
                {"matrix":[1,9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2,0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2,1], "x":1.5, "y":2.25},
                {"matrix":[2,2], "x":2.5, "y":2.25},
                {"matrix":[2,3], "x":3.5, "y":2.25},
                {"matrix":[2,4], "x":4.5, "y":2.25},
                {"matrix":[2,5], "x":5.5, "y":2.25},
                {"matrix":[2,6], "x":6.5, "y":2.25},
                {"matrix":[2,7], "x":7.5, "y":2.25},
                {"matrix":[2,8], "x":8.5, "y":2.25},
                {"matrix":[2,9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,13], "x":13.5, "y":2.25, "w":1.5},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3,0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3,1], "x":1.75, "y":3.25},
                {"matrix":[3,2], "x":2.75, "y":3.25},
                {"matrix":[3,3], "x":3.75, "y":3.25},
                {"matrix":[3,4], "x":4.75, "y":3.25},
                {"matrix":[3,5], "x":5.75, "y":3.25},
                {"matrix":[3,6], "x":6.75, "y":3.25},
                {"matrix":[3,7], "x":7.75, "y":3.25},
                {"matrix":[3,8], "x":8.75, "y":3.25},
                {"matrix":[3,9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25, "w":2.25},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4,0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4,2], "x":2.25, "y":4.25},
                {"matrix":[4,3], "x":3.25, "y":4.25},
                {"matrix":[4,4], "x":4.25, "y":4.25},
                {"matrix":[4,5], "x":5.25, "y":4.25},
                {"matrix":[4,6], "x":6.25, "y":4.25},
                {"matrix":[4,7], "x":7.25, "y":4.25},
                {"matrix":[4,8], "x":8.25, "y":4.25},
                {"matrix":[4,9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":1.75},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5,0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5,1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5,2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5,6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25},
                {"matrix":[5,11], "x":11, "y":5.25},
                {"matrix":[5,12], "x":12, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.5},
                {"matrix":[5,14], "x":14.25, "y":5.5},
                {"matrix":[5,15], "x":15.25, "y":5.5}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":206, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":118, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":162, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":26},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":26},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":26},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":26},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":26},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":26},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":26},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":26},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":26},
            {"matrix":[2, 9],  "flags":4, "x":140, "y":26},
            {"matrix":[2, 10], "flags":4, "x":154, "y":26},
            {"matrix":[2, 11], "flags":4, "x":169, "y":26},
            {"matrix":[2, 12], "flags":4, "x":184, "y":26},
            {"matrix":[2, 13], "flags":4, "x":202, "y":26},
            {"matrix":[2, 15], "flags":1, "x":224, "y":26},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":38},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":38},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":38},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":38},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":38},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":38},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":38},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":38},
            {"matrix":[3, 8],  "flags":4, "x":129, "y":38},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":38},
            {"matrix":[3, 10], "flags":4, "x":158, "y":38},
            {"matrix":[3, 11], "flags":4, "x":173, "y":38},
            {"matrix":[3, 13], "flags":1, "x":196, "y":38},
            {"matrix":[3, 15], "flags":1, "x":224, "y":38},

            {"matrix":[4, 0],  "flags":1, "x":9,   "y":49},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":49},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":49},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":49},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":49},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":49},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":49},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":49},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":49},
            {"matrix":[4, 10], "flags":4, "x":151, "y":49},
            {"matrix":[4, 11], "flags":4, "x":165, "y":49},
            {"matrix":[4, 13], "flags":1, "x":185, "y":49},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":61},
            {"matrix":[5, 1],  "flags":1, "x":20,  "y":61},
            {"matrix":[5, 2],  "flags":1, "x":39,  "y":61},
            {"matrix":[5, 6],  "flags":4, "x":94,  "y":61},
            {"matrix":[5, 10], "flags":1, "x":147, "y":61},
            {"matrix":[5, 11], "flags":1, "x":162, "y":61},
            {"matrix":[5, 12], "flags":1, "x":176, "y":61},
            {"matrix":[5, 13], "flags":1, "x":195, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/ansi_encoder/rules.mk
================
SRC += matrix.c

================
File: q1v2/iso/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______)
};

================
File: q1v2/iso/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: q1v2/iso/iso.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/iso/keyboard.json
================
{
    "usb": {
        "pid": "0x0108",
        "device_version": "2.0.0"
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":1.25, "y":0},
                {"matrix":[0, 2], "x":2.25, "y":0},
                {"matrix":[0, 3], "x":3.25, "y":0},
                {"matrix":[0, 4], "x":4.25, "y":0},
                {"matrix":[0, 5], "x":5.5, "y":0},
                {"matrix":[0, 6], "x":6.5, "y":0},
                {"matrix":[0, 7], "x":7.5, "y":0},
                {"matrix":[0, 8], "x":8.5, "y":0},
                {"matrix":[0, 9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25},
                {"matrix":[2,13], "x":13.75, "y":2.25, "w":1.25, "h":2},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":1.25},
                {"matrix":[4, 1], "x":1.25, "y":4.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":1.75},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25},
                {"matrix":[5,11], "x":11, "y":5.25},
                {"matrix":[5,12], "x":12, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.5},
                {"matrix":[5,14], "x":14.25, "y":5.5},
                {"matrix":[5,15], "x":15.25, "y":5.5}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":206, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":118, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":162, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":26},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":26},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":26},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":26},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":26},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":26},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":26},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":26},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":26},
            {"matrix":[2, 9],  "flags":4, "x":140, "y":26},
            {"matrix":[2, 10], "flags":4, "x":154, "y":26},
            {"matrix":[2, 11], "flags":4, "x":169, "y":26},
            {"matrix":[2, 12], "flags":4, "x":184, "y":26},
            {"matrix":[2, 15], "flags":1, "x":224, "y":26},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":38},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":38},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":38},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":38},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":38},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":38},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":38},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":38},
            {"matrix":[3, 8],  "flags":4, "x":129, "y":38},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":38},
            {"matrix":[3, 10], "flags":4, "x":158, "y":38},
            {"matrix":[3, 11], "flags":4, "x":173, "y":38},
            {"matrix":[3, 13], "flags":1, "x":187, "y":38},
            {"matrix":[2, 13], "flags":4, "x":203, "y":32},
            {"matrix":[3, 15], "flags":1, "x":224, "y":38},

            {"matrix":[4, 0],  "flags":1, "x":2,   "y":49},
            {"matrix":[4, 1],  "flags":4, "x":18,  "y":49},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":49},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":49},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":49},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":49},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":49},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":49},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":49},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":49},
            {"matrix":[4, 10], "flags":4, "x":151, "y":49},
            {"matrix":[4, 11], "flags":4, "x":165, "y":49},
            {"matrix":[4, 13], "flags":1, "x":185, "y":49},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":61},
            {"matrix":[5, 1],  "flags":1, "x":20,  "y":61},
            {"matrix":[5, 2],  "flags":1, "x":39,  "y":61},
            {"matrix":[5, 6],  "flags":4, "x":94,  "y":61},
            {"matrix":[5, 10], "flags":1, "x":147, "y":61},
            {"matrix":[5, 11], "flags":1, "x":162, "y":61},
            {"matrix":[5, 12], "flags":1, "x":176, "y":61},
            {"matrix":[5, 13], "flags":1, "x":195, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/iso/rules.mk
================
SRC += matrix.c

================
File: q1v2/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q1v2/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q1v2/iso_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: q1v2/iso_encoder/iso_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/iso_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0109",
        "device_version": "2.0.0"
    },
    "features": {
        "encoder": true
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8", "resolution": 4}
        ]
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":1.25, "y":0},
                {"matrix":[0, 2], "x":2.25, "y":0},
                {"matrix":[0, 3], "x":3.25, "y":0},
                {"matrix":[0, 4], "x":4.25, "y":0},
                {"matrix":[0, 5], "x":5.5, "y":0},
                {"matrix":[0, 6], "x":6.5, "y":0},
                {"matrix":[0, 7], "x":7.5, "y":0},
                {"matrix":[0, 8], "x":8.5, "y":0},
                {"matrix":[0, 9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.25},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25, "w":2},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25},
                {"matrix":[2,13], "x":13.75, "y":2.25, "w":1.25, "h":2},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":1.25},
                {"matrix":[4, 1], "x":1.25, "y":4.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,13], "x":12.25, "y":4.25, "w":1.75},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25, "w":1.25},
                {"matrix":[5, 2], "x":2.5, "y":5.25, "w":1.25},
                {"matrix":[5, 6], "x":3.75, "y":5.25, "w":6.25},
                {"matrix":[5,10], "x":10, "y":5.25},
                {"matrix":[5,11], "x":11, "y":5.25},
                {"matrix":[5,12], "x":12, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.5},
                {"matrix":[5,14], "x":14.25, "y":5.5},
                {"matrix":[5,15], "x":15.25, "y":5.5}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":206, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":118, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":162, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":1, "x":198, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":26},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":26},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":26},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":26},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":26},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":26},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":26},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":26},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":26},
            {"matrix":[2, 9],  "flags":4, "x":140, "y":26},
            {"matrix":[2, 10], "flags":4, "x":154, "y":26},
            {"matrix":[2, 11], "flags":4, "x":169, "y":26},
            {"matrix":[2, 12], "flags":4, "x":184, "y":26},
            {"matrix":[2, 15], "flags":1, "x":224, "y":26},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":38},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":38},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":38},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":38},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":38},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":38},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":38},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":38},
            {"matrix":[3, 8],  "flags":4, "x":129, "y":38},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":38},
            {"matrix":[3, 10], "flags":4, "x":158, "y":38},
            {"matrix":[3, 11], "flags":4, "x":173, "y":38},
            {"matrix":[3, 13], "flags":1, "x":187, "y":38},
            {"matrix":[2, 13], "flags":4, "x":203, "y":32},
            {"matrix":[3, 15], "flags":1, "x":224, "y":38},

            {"matrix":[4, 0],  "flags":1, "x":2,   "y":49},
            {"matrix":[4, 1],  "flags":4, "x":18,  "y":49},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":49},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":49},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":49},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":49},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":49},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":49},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":49},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":49},
            {"matrix":[4, 10], "flags":4, "x":151, "y":49},
            {"matrix":[4, 11], "flags":4, "x":165, "y":49},
            {"matrix":[4, 13], "flags":1, "x":185, "y":49},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":61},
            {"matrix":[5, 1],  "flags":1, "x":20,  "y":61},
            {"matrix":[5, 2],  "flags":1, "x":39,  "y":61},
            {"matrix":[5, 6],  "flags":4, "x":94,  "y":61},
            {"matrix":[5, 10], "flags":1, "x":147, "y":61},
            {"matrix":[5, 11], "flags":1, "x":162, "y":61},
            {"matrix":[5, 12], "flags":1, "x":176, "y":61},
            {"matrix":[5, 13], "flags":1, "x":195, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/iso_encoder/rules.mk
================
SRC += matrix.c

================
File: q1v2/jis/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   KC_DEL,   KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: q1v2/jis/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v2/jis/jis.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/jis/keyboard.json
================
{
    "usb": {
        "pid": "0x010A",
        "device_version": "2.0.0"
    },
    "layouts": {
        "LAYOUT": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":1.25, "y":0},
                {"matrix":[0, 2], "x":2.25, "y":0},
                {"matrix":[0, 3], "x":3.25, "y":0},
                {"matrix":[0, 4], "x":4.25, "y":0},
                {"matrix":[0, 5], "x":5.5, "y":0},
                {"matrix":[0, 6], "x":6.5, "y":0},
                {"matrix":[0, 7], "x":7.5, "y":0},
                {"matrix":[0, 8], "x":8.5, "y":0},
                {"matrix":[0, 9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.251},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25},
                {"matrix":[1,14], "x":14, "y":1.25},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25},
                {"matrix":[2,13], "x":13.75, "y":2.25, "w":1.25, "h":2},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,12], "x":12.25, "y":4.25},
                {"matrix":[4,13], "x":13.25, "y":4.25},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25},
                {"matrix":[5, 2], "x":2.25, "y":5.25, "w":1.25},
                {"matrix":[5, 3], "x":3.5, "y":5.25},
                {"matrix":[5, 6], "x":4.5, "y":5.25, "w":4.5},
                {"matrix":[5, 9], "x":9, "y":5.25, "w":1.25},
                {"matrix":[5,10], "x":10.25, "y":5.25},
                {"matrix":[5,11], "x":11.25, "y":5.25},
                {"matrix":[5,12], "x":12.25, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.25},
                {"matrix":[5,14], "x":14.25, "y":5.25},
                {"matrix":[5,15], "x":15.25, "y":5.25}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":205, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":117, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":161, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":4, "x":191, "y":15},
            {"matrix":[1, 14], "flags":1, "x":205, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":28},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":28},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":28},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":28},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":28},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":28},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":28},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":28},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":28},
            {"matrix":[2, 9],  "flags":4, "x":139, "y":28},
            {"matrix":[2, 10], "flags":4, "x":154, "y":28},
            {"matrix":[2, 11], "flags":4, "x":169, "y":28},
            {"matrix":[2, 12], "flags":4, "x":183, "y":28},
            {"matrix":[2, 15], "flags":1, "x":224, "y":28},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":40},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":40},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":40},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":40},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":40},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":40},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":40},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":40},
            {"matrix":[3, 8],  "flags":4, "x":128, "y":40},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":40},
            {"matrix":[3, 10], "flags":4, "x":158, "y":40},
            {"matrix":[3, 11], "flags":4, "x":172, "y":40},
            {"matrix":[3, 13], "flags":4, "x":187, "y":40},
            {"matrix":[2, 13], "flags":1, "x":207, "y":36},
            {"matrix":[3, 15], "flags":1, "x":224, "y":40},

            {"matrix":[4, 0],  "flags":1, "x":9,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":52},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":52},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":52},
            {"matrix":[4, 10], "flags":4, "x":150, "y":52},
            {"matrix":[4, 11], "flags":4, "x":165, "y":52},
            {"matrix":[4, 12], "flags":4, "x":180, "y":52},
            {"matrix":[4, 13], "flags":1, "x":194, "y":52},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":18,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":35,  "y":64},
            {"matrix":[5, 3],  "flags":1, "x":51,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":92,  "y":64},
            {"matrix":[5, 9],  "flags":1, "x":134, "y":64},
            {"matrix":[5, 10], "flags":1, "x":150, "y":64},
            {"matrix":[5, 11], "flags":1, "x":165, "y":64},
            {"matrix":[5, 12], "flags":1, "x":180, "y":64},
            {"matrix":[5, 13], "flags":1, "x":194, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/jis/rules.mk
================
SRC += matrix.c

================
File: q1v2/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_MCTL,  KC_LPAD,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   KC_DEL,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q1v2/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q1v2/jis_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: q1v2/jis_encoder/jis_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#endif

================
File: q1v2/jis_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x010B",
        "device_version": "2.0.0"
    },
    "features": {
        "encoder": true
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8", "resolution": 4}
        ]
    },
    "layouts": {
        "LAYOUT": {
            "layout": [
                {"matrix":[0, 0], "x":0, "y":0},
                {"matrix":[0, 1], "x":1.25, "y":0},
                {"matrix":[0, 2], "x":2.25, "y":0},
                {"matrix":[0, 3], "x":3.25, "y":0},
                {"matrix":[0, 4], "x":4.25, "y":0},
                {"matrix":[0, 5], "x":5.5, "y":0},
                {"matrix":[0, 6], "x":6.5, "y":0},
                {"matrix":[0, 7], "x":7.5, "y":0},
                {"matrix":[0, 8], "x":8.5, "y":0},
                {"matrix":[0, 9], "x":9.75, "y":0},
                {"matrix":[0,10], "x":10.75, "y":0},
                {"matrix":[0,11], "x":11.75, "y":0},
                {"matrix":[0,12], "x":12.75, "y":0},
                {"matrix":[0,13], "x":14, "y":0},
                {"matrix":[0,15], "x":15.25, "y":0},

                {"matrix":[1, 0], "x":0, "y":1.25},
                {"matrix":[1, 1], "x":1, "y":1.25},
                {"matrix":[1, 2], "x":2, "y":1.25},
                {"matrix":[1, 3], "x":3, "y":1.25},
                {"matrix":[1, 4], "x":4, "y":1.251},
                {"matrix":[1, 5], "x":5, "y":1.25},
                {"matrix":[1, 6], "x":6, "y":1.25},
                {"matrix":[1, 7], "x":7, "y":1.25},
                {"matrix":[1, 8], "x":8, "y":1.25},
                {"matrix":[1, 9], "x":9, "y":1.25},
                {"matrix":[1,10], "x":10, "y":1.25},
                {"matrix":[1,11], "x":11, "y":1.25},
                {"matrix":[1,12], "x":12, "y":1.25},
                {"matrix":[1,13], "x":13, "y":1.25},
                {"matrix":[1,14], "x":14, "y":1.25},
                {"matrix":[1,15], "x":15.25, "y":1.25},

                {"matrix":[2, 0], "x":0, "y":2.25, "w":1.5},
                {"matrix":[2, 1], "x":1.5, "y":2.25},
                {"matrix":[2, 2], "x":2.5, "y":2.25},
                {"matrix":[2, 3], "x":3.5, "y":2.25},
                {"matrix":[2, 4], "x":4.5, "y":2.25},
                {"matrix":[2, 5], "x":5.5, "y":2.25},
                {"matrix":[2, 6], "x":6.5, "y":2.25},
                {"matrix":[2, 7], "x":7.5, "y":2.25},
                {"matrix":[2, 8], "x":8.5, "y":2.25},
                {"matrix":[2, 9], "x":9.5, "y":2.25},
                {"matrix":[2,10], "x":10.5, "y":2.25},
                {"matrix":[2,11], "x":11.5, "y":2.25},
                {"matrix":[2,12], "x":12.5, "y":2.25},
                {"matrix":[2,15], "x":15.25, "y":2.25},

                {"matrix":[3, 0], "x":0, "y":3.25, "w":1.75},
                {"matrix":[3, 1], "x":1.75, "y":3.25},
                {"matrix":[3, 2], "x":2.75, "y":3.25},
                {"matrix":[3, 3], "x":3.75, "y":3.25},
                {"matrix":[3, 4], "x":4.75, "y":3.25},
                {"matrix":[3, 5], "x":5.75, "y":3.25},
                {"matrix":[3, 6], "x":6.75, "y":3.25},
                {"matrix":[3, 7], "x":7.75, "y":3.25},
                {"matrix":[3, 8], "x":8.75, "y":3.25},
                {"matrix":[3, 9], "x":9.75, "y":3.25},
                {"matrix":[3,10], "x":10.75, "y":3.25},
                {"matrix":[3,11], "x":11.75, "y":3.25},
                {"matrix":[3,13], "x":12.75, "y":3.25},
                {"matrix":[2,13], "x":13.75, "y":2.25, "w":1.25, "h":2},
                {"matrix":[3,15], "x":15.25, "y":3.25},

                {"matrix":[4, 0], "x":0, "y":4.25, "w":2.25},
                {"matrix":[4, 2], "x":2.25, "y":4.25},
                {"matrix":[4, 3], "x":3.25, "y":4.25},
                {"matrix":[4, 4], "x":4.25, "y":4.25},
                {"matrix":[4, 5], "x":5.25, "y":4.25},
                {"matrix":[4, 6], "x":6.25, "y":4.25},
                {"matrix":[4, 7], "x":7.25, "y":4.25},
                {"matrix":[4, 8], "x":8.25, "y":4.25},
                {"matrix":[4, 9], "x":9.25, "y":4.25},
                {"matrix":[4,10], "x":10.25, "y":4.25},
                {"matrix":[4,11], "x":11.25, "y":4.25},
                {"matrix":[4,12], "x":12.25, "y":4.25},
                {"matrix":[4,13], "x":13.25, "y":4.25},
                {"matrix":[4,14], "x":14.25, "y":4.5},

                {"matrix":[5, 0], "x":0, "y":5.25, "w":1.25},
                {"matrix":[5, 1], "x":1.25, "y":5.25},
                {"matrix":[5, 2], "x":2.25, "y":5.25, "w":1.25},
                {"matrix":[5, 3], "x":3.5, "y":5.25},
                {"matrix":[5, 6], "x":4.5, "y":5.25, "w":4.5},
                {"matrix":[5, 9], "x":9, "y":5.25, "w":1.25},
                {"matrix":[5,10], "x":10.25, "y":5.25},
                {"matrix":[5,11], "x":11.25, "y":5.25},
                {"matrix":[5,12], "x":12.25, "y":5.25},
                {"matrix":[5,13], "x":13.25, "y":5.25},
                {"matrix":[5,14], "x":14.25, "y":5.25},
                {"matrix":[5,15], "x":15.25, "y":5.25}
            ]
        }
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":0,   "y":0},
            {"matrix":[0, 1],  "flags":1, "x":18,  "y":0},
            {"matrix":[0, 2],  "flags":1, "x":33,  "y":0},
            {"matrix":[0, 3],  "flags":1, "x":48,  "y":0},
            {"matrix":[0, 4],  "flags":1, "x":62,  "y":0},
            {"matrix":[0, 5],  "flags":1, "x":81,  "y":0},
            {"matrix":[0, 6],  "flags":1, "x":95,  "y":0},
            {"matrix":[0, 7],  "flags":1, "x":110, "y":0},
            {"matrix":[0, 8],  "flags":1, "x":125, "y":0},
            {"matrix":[0, 9],  "flags":1, "x":143, "y":0},
            {"matrix":[0, 10], "flags":1, "x":158, "y":0},
            {"matrix":[0, 11], "flags":1, "x":173, "y":0},
            {"matrix":[0, 12], "flags":1, "x":187, "y":0},
            {"matrix":[0, 13], "flags":1, "x":205, "y":0},
            {"matrix":[0, 15], "flags":1, "x":224, "y":0},

            {"matrix":[1, 0],  "flags":1, "x":0,   "y":15},
            {"matrix":[1, 1],  "flags":4, "x":15,  "y":15},
            {"matrix":[1, 2],  "flags":4, "x":29,  "y":15},
            {"matrix":[1, 3],  "flags":4, "x":44,  "y":15},
            {"matrix":[1, 4],  "flags":4, "x":59,  "y":15},
            {"matrix":[1, 5],  "flags":4, "x":73,  "y":15},
            {"matrix":[1, 6],  "flags":4, "x":88,  "y":15},
            {"matrix":[1, 7],  "flags":4, "x":103, "y":15},
            {"matrix":[1, 8],  "flags":4, "x":117, "y":15},
            {"matrix":[1, 9],  "flags":4, "x":132, "y":15},
            {"matrix":[1, 10], "flags":4, "x":147, "y":15},
            {"matrix":[1, 11], "flags":4, "x":161, "y":15},
            {"matrix":[1, 12], "flags":4, "x":176, "y":15},
            {"matrix":[1, 13], "flags":4, "x":191, "y":15},
            {"matrix":[1, 14], "flags":1, "x":205, "y":15},
            {"matrix":[1, 15], "flags":1, "x":224, "y":15},

            {"matrix":[2, 0],  "flags":1, "x":4,   "y":28},
            {"matrix":[2, 1],  "flags":4, "x":22,  "y":28},
            {"matrix":[2, 2],  "flags":4, "x":37,  "y":28},
            {"matrix":[2, 3],  "flags":4, "x":51,  "y":28},
            {"matrix":[2, 4],  "flags":4, "x":66,  "y":28},
            {"matrix":[2, 5],  "flags":4, "x":81,  "y":28},
            {"matrix":[2, 6],  "flags":4, "x":95,  "y":28},
            {"matrix":[2, 7],  "flags":4, "x":110, "y":28},
            {"matrix":[2, 8],  "flags":4, "x":125, "y":28},
            {"matrix":[2, 9],  "flags":4, "x":139, "y":28},
            {"matrix":[2, 10], "flags":4, "x":154, "y":28},
            {"matrix":[2, 11], "flags":4, "x":169, "y":28},
            {"matrix":[2, 12], "flags":4, "x":183, "y":28},
            {"matrix":[2, 15], "flags":1, "x":224, "y":28},

            {"matrix":[3, 0],  "flags":9, "x":6,   "y":40},
            {"matrix":[3, 1],  "flags":4, "x":26,  "y":40},
            {"matrix":[3, 2],  "flags":4, "x":40,  "y":40},
            {"matrix":[3, 3],  "flags":4, "x":55,  "y":40},
            {"matrix":[3, 4],  "flags":4, "x":70,  "y":40},
            {"matrix":[3, 5],  "flags":4, "x":84,  "y":40},
            {"matrix":[3, 6],  "flags":4, "x":99,  "y":40},
            {"matrix":[3, 7],  "flags":4, "x":114, "y":40},
            {"matrix":[3, 8],  "flags":4, "x":128, "y":40},
            {"matrix":[3, 9],  "flags":4, "x":143, "y":40},
            {"matrix":[3, 10], "flags":4, "x":158, "y":40},
            {"matrix":[3, 11], "flags":4, "x":172, "y":40},
            {"matrix":[3, 13], "flags":4, "x":187, "y":40},
            {"matrix":[2, 13], "flags":1, "x":207, "y":36},
            {"matrix":[3, 15], "flags":1, "x":224, "y":40},

            {"matrix":[4, 0],  "flags":1, "x":9,   "y":52},
            {"matrix":[4, 2],  "flags":4, "x":33,  "y":52},
            {"matrix":[4, 3],  "flags":4, "x":48,  "y":52},
            {"matrix":[4, 4],  "flags":4, "x":62,  "y":52},
            {"matrix":[4, 5],  "flags":4, "x":77,  "y":52},
            {"matrix":[4, 6],  "flags":4, "x":92,  "y":52},
            {"matrix":[4, 7],  "flags":4, "x":106, "y":52},
            {"matrix":[4, 8],  "flags":4, "x":121, "y":52},
            {"matrix":[4, 9],  "flags":4, "x":136, "y":52},
            {"matrix":[4, 10], "flags":4, "x":150, "y":52},
            {"matrix":[4, 11], "flags":4, "x":165, "y":52},
            {"matrix":[4, 12], "flags":4, "x":180, "y":52},
            {"matrix":[4, 13], "flags":1, "x":194, "y":52},
            {"matrix":[4, 14], "flags":1, "x":209, "y":52},

            {"matrix":[5, 0],  "flags":1, "x":2,   "y":64},
            {"matrix":[5, 1],  "flags":1, "x":18,  "y":64},
            {"matrix":[5, 2],  "flags":1, "x":35,  "y":64},
            {"matrix":[5, 3],  "flags":1, "x":51,  "y":64},
            {"matrix":[5, 6],  "flags":4, "x":92,  "y":64},
            {"matrix":[5, 9],  "flags":1, "x":134, "y":64},
            {"matrix":[5, 10], "flags":1, "x":150, "y":64},
            {"matrix":[5, 11], "flags":1, "x":165, "y":64},
            {"matrix":[5, 12], "flags":1, "x":180, "y":64},
            {"matrix":[5, 13], "flags":1, "x":194, "y":64},
            {"matrix":[5, 14], "flags":1, "x":209, "y":64},
            {"matrix":[5, 15], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q1v2/jis_encoder/rules.mk
================
SRC += matrix.c

================
File: q1v2/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define MATRIX_COLS 16
#define MATRIX_ROWS 6

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE \
    { 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50 }

#define HOLD_ON_OTHER_KEY_PRESS // Old default behavior of mod-taps

================
File: q1v2/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q1v2/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q1",
    "url": "https://github.com/Keychron",
    "maintainer": "keychron-contrib",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "usb": {
        "vid": "0x3434"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", null, null, null, null, null, null, null, null],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"],
        "custom": true,
        "custom_lite": true
    },
    "diode_direction": "ROW2COL",
    "rgb_matrix": {
        "driver": "snled27351",
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "sleep": true
    }
}

================
File: q1v2/matrix.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN A7
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN B1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN B0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOut(uint8_t dataOut) {
    for (uint8_t i = 0; i < 8; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftout_single(uint8_t data) {
    if (data & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }

    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);

    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 8) {
            shiftout_single(0x00);
        } else {
            shiftout_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - 1)) shiftout_single(0x01);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];

        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == (MATRIX_COLS - 1))
            // unselect Shift Register
            shiftOut(0xFF);
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    if (current_col < 8) {
        matrix_output_select_delay();
    } else {
        for (int8_t cycle = 4; cycle > 0; cycle--) {
            matrix_output_select_delay(); // 0.25us
            matrix_output_select_delay();
            matrix_output_select_delay();
            matrix_output_select_delay();
        }
    }

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q1v2/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q1v2/q1v2.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}
#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#    ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#    endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif

================
File: q1v2/readme.md
================
# Keychron Q1 Version 2

![Keychron Q1V2](https://i.imgur.com/BbJNGLYh.jpg)

A customizable 75% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q1 Version 2
* Hardware Availability: [Keychron Q1 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q1)

Make example for this keyboard (after setting up your build environment):

    make keychron/q1v2/ansi:default
    make keychron/q1v2/ansi_encoder:default
    make keychron/q1v2/iso:default
    make keychron/q1v2/iso_encoder:default
    make keychron/q1v2/jis:default
    make keychron/q1v2/jis_encoder:default

Flashing example for this keyboard:

    make keychron/q1v2/ansi:default:flash
    make keychron/q1v2/ansi_encoder:default:flash
    make keychron/q1v2/iso:default:flash
    make keychron/q1v2/iso_encoder:default:flash
    make keychron/q1v2/jis:default:flash
    make keychron/q1v2/jis_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q2/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,          KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT, KC_LCMD,                            KC_SPC,                             KC_RCMD, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,          KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN, KC_LALT,                            KC_SPC,                             KC_RALT, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID, KC_BRIU, _______, _______, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU, _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______, _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,           _______,          _______,
        _______,          _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,           _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______, _______, _______, _______),

    [_FN2] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID, KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU, _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______, _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,           _______,          _______,
        _______,          _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,           _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______, _______, _______, _______),

    [_FN3] = LAYOUT_ansi_67(
        KC_TILD, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,   KC_F12,  _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______, _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,           _______,          _______,
        _______,          _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,           _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______, _______, _______, _______)
};

================
File: q2/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q2/ansi/keyboard.json
================
{
    "usb": {
        "pid": "0x0110",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1}, 
            {"matrix": [0, 1], "x": 15, "y": 0, "flags": 4}, 
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 4}, 
            {"matrix": [0, 3], "x": 44, "y": 0, "flags": 4}, 
            {"matrix": [0, 4], "x": 59, "y": 0, "flags": 4}, 
            {"matrix": [0, 5], "x": 73, "y": 0, "flags": 4}, 
            {"matrix": [0, 6], "x": 88, "y": 0, "flags": 4}, 
            {"matrix": [0, 7], "x": 103, "y": 0, "flags": 4}, 
            {"matrix": [0, 8], "x": 118, "y": 0, "flags": 4}, 
            {"matrix": [0, 9], "x": 132, "y": 0, "flags": 4}, 
            {"matrix": [0, 10], "x": 147, "y": 0, "flags": 4}, 
            {"matrix": [0, 11], "x": 162, "y": 0, "flags": 4}, 
            {"matrix": [0, 12], "x": 176, "y": 0, "flags": 4}, 
            {"matrix": [0, 13], "x": 198, "y": 0, "flags": 1}, 
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 202, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 30, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 30, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 30, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 30, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 30, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 30, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 30, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 30, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 30, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 30, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 30, "flags": 4},
            {"matrix": [2, 13], "x": 196, "y": 30, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 30, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 45, "flags": 1},
            {"matrix": [3, 2], "x": 33, "y": 45, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 45, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 45, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 45, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 45, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 45, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 45, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 45, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 45, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 45, "flags": 4},
            {"matrix": [3, 13], "x": 185, "y": 45, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 60, "flags": 1},
            {"matrix": [4, 1], "x": 20, "y": 60, "flags": 1},
            {"matrix": [4, 2], "x": 39, "y": 60, "flags": 1},
            {"matrix": [4, 6], "x": 94, "y": 60, "flags": 4},
            {"matrix": [4, 10], "x": 147, "y": 60, "flags": 1},
            {"matrix": [4, 11], "x": 162, "y": 60, "flags": 1},
            {"matrix": [4, 12], "x": 176, "y": 60, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}

        ]
    },
    "layouts": {
        "LAYOUT_ansi_67": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 13], "x": 13.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: q2/ansi/readme.md
================
# The ANSI variant of the Keychron Q2

================
File: q2/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,          KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT, KC_LCMD,                            KC_SPC,                             KC_RCMD, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,    KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,   KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,             KC_ENT,           KC_HOME,
        KC_LSFT,          KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,             KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN, KC_LALT,                            KC_SPC,                             KC_RALT, MO(_FN2), MO(_FN3),  KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID, KC_BRIU, _______, _______, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,   _______,          RM_TOGG,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,   _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,             _______,          _______,
        _______,          _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,             _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,   _______, _______, _______),

    [_FN2] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID, KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,   _______,          RM_TOGG,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,   _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,             _______,          _______,
        _______,          _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,             _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,   _______, _______, _______),

    [_FN3] = LAYOUT_ansi_67(
        KC_TILD, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,   KC_F12,    _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,   _______,          _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,             _______,          _______,
        _______,          _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,             _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,   _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [_FN1]     = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [_FN2]     = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [_FN3]     = { ENCODER_CCW_CW(_______, _______) },
};
#endif

================
File: q2/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q2/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q2/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0111",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1}, 
            {"matrix": [0, 1], "x": 15, "y": 0, "flags": 4}, 
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 4}, 
            {"matrix": [0, 3], "x": 44, "y": 0, "flags": 4}, 
            {"matrix": [0, 4], "x": 59, "y": 0, "flags": 4}, 
            {"matrix": [0, 5], "x": 73, "y": 0, "flags": 4}, 
            {"matrix": [0, 6], "x": 88, "y": 0, "flags": 4}, 
            {"matrix": [0, 7], "x": 103, "y": 0, "flags": 4}, 
            {"matrix": [0, 8], "x": 118, "y": 0, "flags": 4}, 
            {"matrix": [0, 9], "x": 132, "y": 0, "flags": 4}, 
            {"matrix": [0, 10], "x": 147, "y": 0, "flags": 4}, 
            {"matrix": [0, 11], "x": 162, "y": 0, "flags": 4}, 
            {"matrix": [0, 12], "x": 176, "y": 0, "flags": 4}, 
            {"matrix": [0, 13], "x": 198, "y": 0, "flags": 1}, 
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 202, "y": 15, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 30, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 30, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 30, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 30, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 30, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 30, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 30, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 30, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 30, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 30, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 30, "flags": 4},
            {"matrix": [2, 13], "x": 196, "y": 30, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 30, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 45, "flags": 1},
            {"matrix": [3, 2], "x": 33, "y": 45, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 45, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 45, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 45, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 45, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 45, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 45, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 45, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 45, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 45, "flags": 4},
            {"matrix": [3, 13], "x": 185, "y": 45, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 60, "flags": 1},
            {"matrix": [4, 1], "x": 20, "y": 60, "flags": 1},
            {"matrix": [4, 2], "x": 39, "y": 60, "flags": 1},
            {"matrix": [4, 6], "x": 94, "y": 60, "flags": 4},
            {"matrix": [4, 10], "x": 147, "y": 60, "flags": 1},
            {"matrix": [4, 11], "x": 162, "y": 60, "flags": 1},
            {"matrix": [4, 12], "x": 176, "y": 60, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}

        ]
    },
    "layouts": {
        "LAYOUT_ansi_67": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 13], "x": 13.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: q2/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q2 and support encoder

- Enable EC11 rotary encoder
- Turn colckwise to increase volume and turn anti-colckwise to decrease volume
- Press top right key pushbutton to mute

================
File: q2/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT, KC_LCMD,                            KC_SPC,                             KC_RCMD, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN, KC_LALT,                            KC_SPC,                             KC_RALT, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID, KC_BRIU, _______, _______, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID, KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_68(
        KC_TILD, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______)
};

================
File: q2/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: q2/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
	{1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/iso/keyboard.json
================
{
    "usb": {
        "pid": "0x0112",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1}, 
            {"matrix": [0, 1], "x": 15, "y": 0, "flags": 4}, 
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 4}, 
            {"matrix": [0, 3], "x": 44, "y": 0, "flags": 4}, 
            {"matrix": [0, 4], "x": 59, "y": 0, "flags": 4}, 
            {"matrix": [0, 5], "x": 73, "y": 0, "flags": 4}, 
            {"matrix": [0, 6], "x": 88, "y": 0, "flags": 4}, 
            {"matrix": [0, 7], "x": 103, "y": 0, "flags": 4}, 
            {"matrix": [0, 8], "x": 118, "y": 0, "flags": 4}, 
            {"matrix": [0, 9], "x": 132, "y": 0, "flags": 4}, 
            {"matrix": [0, 10], "x": 147, "y": 0, "flags": 4}, 
            {"matrix": [0, 11], "x": 162, "y": 0, "flags": 4}, 
            {"matrix": [0, 12], "x": 176, "y": 0, "flags": 4}, 
            {"matrix": [0, 13], "x": 198, "y": 0, "flags": 1}, 
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 15, "flags": 4},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 30, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 30, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 30, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 30, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 30, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 30, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 30, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 30, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 30, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 30, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 30, "flags": 4},
            {"matrix": [2, 13], "x": 187, "y": 30, "flags": 4},
            {"matrix": [1, 13], "x": 204, "y": 23, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 30, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 45, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 45, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 45, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 45, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 45, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 45, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 45, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 45, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 45, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 45, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 45, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 45, "flags": 4},
            {"matrix": [3, 13], "x": 185, "y": 45, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 60, "flags": 1},
            {"matrix": [4, 1], "x": 20, "y": 60, "flags": 1},
            {"matrix": [4, 2], "x": 39, "y": 60, "flags": 1},
            {"matrix": [4, 6], "x": 94, "y": 60, "flags": 4},
            {"matrix": [4, 10], "x": 147, "y": 60, "flags": 1},
            {"matrix": [4, 11], "x": 162, "y": 60, "flags": 1},
            {"matrix": [4, 12], "x": 176, "y": 60, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}

        ]
    },
    "layouts": {
        "LAYOUT_iso_68": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: q2/iso/readme.md
================
# The ISO variant of the Keychron Q2

================
File: q2/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT, KC_LCMD,                            KC_SPC,                             KC_RCMD, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN, KC_LALT,                            KC_SPC,                             KC_RALT, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID, KC_BRIU, _______, _______, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID, KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE, KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_68(
        KC_TILD, KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT, RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,                    _______,
        _______, RM_PREV, RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,  _______,  _______,          _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,            _______, _______,
        _______, _______, _______,                            _______,                            _______, _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [_FN1]     = { ENCODER_CCW_CW(_______, _______) },
    [_FN2]     = { ENCODER_CCW_CW(_______, _______) },
    [_FN3]     = { ENCODER_CCW_CW(_______, _______) },
};
#endif

================
File: q2/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q2/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: q2/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
	{1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/iso_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0113",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1}, 
            {"matrix": [0, 1], "x": 15, "y": 0, "flags": 4}, 
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 4}, 
            {"matrix": [0, 3], "x": 44, "y": 0, "flags": 4}, 
            {"matrix": [0, 4], "x": 59, "y": 0, "flags": 4}, 
            {"matrix": [0, 5], "x": 73, "y": 0, "flags": 4}, 
            {"matrix": [0, 6], "x": 88, "y": 0, "flags": 4}, 
            {"matrix": [0, 7], "x": 103, "y": 0, "flags": 4}, 
            {"matrix": [0, 8], "x": 118, "y": 0, "flags": 4}, 
            {"matrix": [0, 9], "x": 132, "y": 0, "flags": 4}, 
            {"matrix": [0, 10], "x": 147, "y": 0, "flags": 4}, 
            {"matrix": [0, 11], "x": 162, "y": 0, "flags": 4}, 
            {"matrix": [0, 12], "x": 176, "y": 0, "flags": 4}, 
            {"matrix": [0, 13], "x": 198, "y": 0, "flags": 1}, 
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 15, "flags": 4},
            {"matrix": [1, 14], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 30, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 30, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 30, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 30, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 30, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 30, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 30, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 30, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 30, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 30, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 30, "flags": 4},
            {"matrix": [2, 13], "x": 187, "y": 30, "flags": 4},
            {"matrix": [1, 13], "x": 204, "y": 23, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 30, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 45, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 45, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 45, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 45, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 45, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 45, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 45, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 45, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 45, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 45, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 45, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 45, "flags": 4},
            {"matrix": [3, 13], "x": 185, "y": 45, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 60, "flags": 1},
            {"matrix": [4, 1], "x": 20, "y": 60, "flags": 1},
            {"matrix": [4, 2], "x": 39, "y": 60, "flags": 1},
            {"matrix": [4, 6], "x": 94, "y": 60, "flags": 4},
            {"matrix": [4, 10], "x": 147, "y": 60, "flags": 1},
            {"matrix": [4, 11], "x": 162, "y": 60, "flags": 1},
            {"matrix": [4, 12], "x": 176, "y": 60, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}

        ]
    },
    "layouts": {
        "LAYOUT_iso_68": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: q2/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q2 and support encoder

- Enable EC11 rotary encoder
- Turn colckwise to increase volume and turn anti-colckwise to decrease volume
- Press top right key pushbutton to mute

================
File: q2/jis/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,  KC_LNG2,                   KC_SPC,                    KC_LNG1, KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,  KC_INT5,                   KC_SPC,                    KC_INT4, KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_jis_71(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______)
};

================
File: q2/jis/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE { 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q2/jis/jis.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/jis/keyboard.json
================
{
    "usb": {
        "pid": "0x0114",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 4, "flags": 1},
            {"matrix": [0, 1], "x": 15, "y": 4, "flags": 4},
            {"matrix": [0, 2], "x": 29, "y": 4, "flags": 4},
            {"matrix": [0, 3], "x": 44, "y": 4, "flags": 4},
            {"matrix": [0, 4], "x": 59, "y": 4, "flags": 4},
            {"matrix": [0, 5], "x": 73, "y": 4, "flags": 4},
            {"matrix": [0, 6], "x": 88, "y": 4, "flags": 4},
            {"matrix": [0, 7], "x": 103, "y": 4, "flags": 4},
            {"matrix": [0, 8], "x": 118, "y": 4, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 4, "flags": 4},
            {"matrix": [0, 10], "x": 147, "y": 4, "flags": 4},
            {"matrix": [0, 11], "x": 162, "y": 4, "flags": 4},
            {"matrix": [0, 12], "x": 176, "y": 4, "flags": 4},
            {"matrix": [0, 13], "x": 191, "y": 4, "flags": 4},
            {"matrix": [3, 1], "x": 206, "y": 4, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 19, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 19, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 19, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 19, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 19, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 19, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 19, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 19, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 19, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 19, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 19, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 19, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 19, "flags": 4},
            {"matrix": [1, 14], "x": 224, "y": 19, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 34, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 34, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 34, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 34, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 34, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 34, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 34, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 34, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 34, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 34, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 34, "flags": 4},
            {"matrix": [2, 13], "x": 187, "y": 34, "flags": 4},
            {"matrix": [1, 13], "x": 204, "y": 26, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 34, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 49, "flags": 1},
            {"matrix": [3, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [3, 12], "x": 180, "y": 49, "flags": 4},
            {"matrix": [3, 13], "x": 195, "y": 49, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 35, "y": 64, "flags": 1},
            {"matrix": [4, 3], "x": 51, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 92, "y": 64, "flags": 4},
            {"matrix": [4, 9], "x": 134, "y": 64, "flags": 1},
            {"matrix": [4, 10], "x": 151, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 165, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 180, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_jis_71": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25},
                {"matrix": [3, 1], "x": 14, "y": 0.25},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 12], "x": 12.25, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.25},
                {"matrix": [3, 14], "x": 14.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 6], "x": 4.5, "y": 4.25, "w": 4.5},
                {"matrix": [4, 9], "x": 9, "y": 4.25, "w": 1.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [2, 12], "x": 14.25, "y": 4.25},
                {"matrix": [4, 14], "x": 15.25, "y": 4.25}
            ]
        }
    }
}

================
File: q2/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,  KC_LNG2,                   KC_SPC,                    KC_LNG1, KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,  KC_INT5,                   KC_SPC,                    KC_INT4, KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_jis_71(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = { ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q2/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q2/jis_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE { 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D, 0xC0, 0xC0, 0x5D }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q2/jis_encoder/jis_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#endif // RGB_MATRIX_ENABLE

================
File: q2/jis_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0115",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 4, "flags": 1},
            {"matrix": [0, 1], "x": 15, "y": 4, "flags": 4},
            {"matrix": [0, 2], "x": 29, "y": 4, "flags": 4},
            {"matrix": [0, 3], "x": 44, "y": 4, "flags": 4},
            {"matrix": [0, 4], "x": 59, "y": 4, "flags": 4},
            {"matrix": [0, 5], "x": 73, "y": 4, "flags": 4},
            {"matrix": [0, 6], "x": 88, "y": 4, "flags": 4},
            {"matrix": [0, 7], "x": 103, "y": 4, "flags": 4},
            {"matrix": [0, 8], "x": 118, "y": 4, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 4, "flags": 4},
            {"matrix": [0, 10], "x": 147, "y": 4, "flags": 4},
            {"matrix": [0, 11], "x": 162, "y": 4, "flags": 4},
            {"matrix": [0, 12], "x": 176, "y": 4, "flags": 4},
            {"matrix": [0, 13], "x": 191, "y": 4, "flags": 4},
            {"matrix": [3, 1], "x": 206, "y": 4, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 19, "flags": 1},
            {"matrix": [1, 1], "x": 22, "y": 19, "flags": 4},
            {"matrix": [1, 2], "x": 37, "y": 19, "flags": 4},
            {"matrix": [1, 3], "x": 51, "y": 19, "flags": 4},
            {"matrix": [1, 4], "x": 66, "y": 19, "flags": 4},
            {"matrix": [1, 5], "x": 81, "y": 19, "flags": 4},
            {"matrix": [1, 6], "x": 95, "y": 19, "flags": 4},
            {"matrix": [1, 7], "x": 110, "y": 19, "flags": 4},
            {"matrix": [1, 8], "x": 125, "y": 19, "flags": 4},
            {"matrix": [1, 9], "x": 140, "y": 19, "flags": 4},
            {"matrix": [1, 10], "x": 154, "y": 19, "flags": 4},
            {"matrix": [1, 11], "x": 169, "y": 19, "flags": 4},
            {"matrix": [1, 12], "x": 184, "y": 19, "flags": 4},
            {"matrix": [1, 14], "x": 224, "y": 19, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 34, "flags": 1},
            {"matrix": [2, 1], "x": 26, "y": 34, "flags": 4},
            {"matrix": [2, 2], "x": 40, "y": 34, "flags": 4},
            {"matrix": [2, 3], "x": 55, "y": 34, "flags": 4},
            {"matrix": [2, 4], "x": 70, "y": 34, "flags": 4},
            {"matrix": [2, 5], "x": 84, "y": 34, "flags": 4},
            {"matrix": [2, 6], "x": 99, "y": 34, "flags": 4},
            {"matrix": [2, 7], "x": 114, "y": 34, "flags": 4},
            {"matrix": [2, 8], "x": 129, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 143, "y": 34, "flags": 4},
            {"matrix": [2, 10], "x": 158, "y": 34, "flags": 4},
            {"matrix": [2, 11], "x": 173, "y": 34, "flags": 4},
            {"matrix": [2, 13], "x": 187, "y": 34, "flags": 4},
            {"matrix": [1, 13], "x": 204, "y": 26, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 34, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 49, "flags": 1},
            {"matrix": [3, 2], "x": 33, "y": 49, "flags": 4},
            {"matrix": [3, 3], "x": 48, "y": 49, "flags": 4},
            {"matrix": [3, 4], "x": 62, "y": 49, "flags": 4},
            {"matrix": [3, 5], "x": 77, "y": 49, "flags": 4},
            {"matrix": [3, 6], "x": 92, "y": 49, "flags": 4},
            {"matrix": [3, 7], "x": 106, "y": 49, "flags": 4},
            {"matrix": [3, 8], "x": 121, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 136, "y": 49, "flags": 4},
            {"matrix": [3, 10], "x": 151, "y": 49, "flags": 4},
            {"matrix": [3, 11], "x": 165, "y": 49, "flags": 4},
            {"matrix": [3, 12], "x": 180, "y": 49, "flags": 4},
            {"matrix": [3, 13], "x": 195, "y": 49, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 49, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 35, "y": 64, "flags": 1},
            {"matrix": [4, 3], "x": 51, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 92, "y": 64, "flags": 4},
            {"matrix": [4, 9], "x": 134, "y": 64, "flags": 1},
            {"matrix": [4, 10], "x": 151, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 165, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 180, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 195, "y": 64, "flags": 1},
            {"matrix": [2, 12], "x": 209, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_jis_71": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25},
                {"matrix": [3, 1], "x": 14, "y": 0.25},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 12], "x": 12.25, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.25},
                {"matrix": [3, 14], "x": 14.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 6], "x": 4.5, "y": 4.25, "w": 4.5},
                {"matrix": [4, 9], "x": 9, "y": 4.25, "w": 1.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [2, 12], "x": 14.25, "y": 4.25},
                {"matrix": [4, 14], "x": 15.25, "y": 4.25}
            ]
        }
    }
}

================
File: q2/chconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define CH_CFG_ST_FREQUENCY 10000

#define CH_CFG_OPTIMIZE_SPEED FALSE

#define CH_CFG_USE_CONDVARS_TIMEOUT FALSE

#include_next <chconf.h>

================
File: q2/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define MATRIX_UNSELECT_DRIVE_HIGH

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

/* Encoder Configuration*/
#define ENCODER_DEFAULT_POS 0x3

================
File: q2/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q2/info.json
================
{
    "keyboard_name": "Keychron Q2",
    "manufacturer": "Keychron",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dynamic_keymap": {
        "layer_count": 5
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q2/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q2/q2.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q2/readme.md
================
# Keychron Q2

![Keychron Q2](https://i.imgur.com/9bJ6Moh.jpg)

A customizable 65% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q2
* Hardware Availability: [Keychron Q2 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q2-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q2/ansi:default
    make keychron/q2/ansi_encoder:default
    make keychron/q2/iso:default
    make keychron/q2/iso_encoder:default
    make keychron/q2/jis:default
    make keychron/q2/jis_encoder:default

Flashing example for this keyboard:

    make keychron/q2/ansi:default:flash
    make keychron/q2/ansi_encoder:default:flash
    make keychron/q2/iso:default:flash
    make keychron/q2/iso_encoder:default:flash
    make keychron/q2/jis:default:flash
    make keychron/q2/jis_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q3/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  _______,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: q3/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#endif // RGB_MATRIX_ENABLE

================
File: q3/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* We use a pin with a stronger pull resistor than the internal MCU pins */
// #define MATRIX_UNSELECT_DRIVE_HIGH

#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: q3/ansi/keyboard.json
================
{
    "usb": {
        "pid": "0x0120",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 85, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 98, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 111, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4}, 
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 20, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 33, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 46, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 13], "x": 179, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},           
            {"matrix": [3, 13], "x": 174, "y": 40, "flags": 1},
            
            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},          
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},           
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},                               
            {"matrix": [5, 10], "x": 131, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 164, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "matrix_pins": {
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"],
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "H3"]
    },
    "community_layouts": ["tkl_ansi"],
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/ansi/readme.md
================
# The ANSI variant of the Keychron Q3

================
File: q3/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_f13_ansi(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_f13_ansi(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_f13_ansi(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_f13_ansi(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q3/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q3/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#endif // RGB_MATRIX_ENABLE

================
File: q3/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: q3/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0121",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 16, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 55, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 71, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 126, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 139, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 152, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 165, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4}, 
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 13], "x": 179, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},           
            {"matrix": [3, 13], "x": 174, "y": 40, "flags": 1},
            
            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},          
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},           
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},                               
            {"matrix": [5, 10], "x": 131, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 164, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "community_layouts": ["tkl_f13_ansi"],
    "layouts": {
        "LAYOUT_tkl_f13_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q3

- Enable rotary encoder support.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q3/ansi_encoder/rules.mk
================
# Custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q3/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_iso(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_iso(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_iso(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_iso(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: q3/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* We use a pin with a stronger pull resistor than the internal MCU pins */
// #define MATRIX_UNSELECT_DRIVE_HIGH

#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 49

================
File: q3/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#endif // RGB_MATRIX_ENABLE

================
File: q3/iso/keyboard.json
================
{
    "usb": {
        "pid": "0x0122",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 111, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4}, 
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},   
            {"matrix": [3, 13], "x": 166, "y": 40, "flags": 4},        
            {"matrix": [2, 13], "x": 183, "y": 36, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 52, "flags": 1},
            {"matrix": [4, 1], "x": 16, "y": 52, "flags": 4},          
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},           
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},                               
            {"matrix": [5, 10], "x": 131, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 164, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "matrix_pins": {
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"],
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "H3"]
    },
    "community_layouts": ["tkl_iso"],
    "layouts": {
        "LAYOUT_tkl_iso": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/iso/readme.md
================
# The ISO variant of the Keychron Q3

================
File: q3/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_f13_iso(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_f13_iso(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_f13_iso(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_f13_iso(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q3/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q3/iso_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

#define SNLED27351_CURRENT_TUNE \
    { 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44, 0x9D, 0x9D, 0x44 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 49

================
File: q3/iso_encoder/iso_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#endif // RGB_MATRIX_ENABLE

================
File: q3/iso_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0123",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 16, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 55, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 71, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 126, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 139, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 152, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 165, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4}, 
            {"matrix": [1, 13], "x": 176, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},   
            {"matrix": [3, 13], "x": 166, "y": 40, "flags": 4},        
            {"matrix": [2, 13], "x": 183, "y": 36, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 52, "flags": 1},
            {"matrix": [4, 1], "x": 16, "y": 52, "flags": 4},          
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},           
            {"matrix": [4, 13], "x": 171, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 18, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 34, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},                               
            {"matrix": [5, 10], "x": 131, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 148, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 164, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "community_layouts": ["tkl_f13_iso"],
    "layouts": {
        "LAYOUT_tkl_f13_iso": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q3

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q3/iso_encoder/rules.mk
================
# Custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q3/jis/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_91(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,            KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,      KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_91(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,             _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_91(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,             KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,      KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_91(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,            _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),
};

================
File: q3/jis/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

#define SNLED27351_CURRENT_TUNE \
    { 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: q3/jis/jis.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},  // ESC
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},  // F1
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},  // F2
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},  // F3
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},  // F4
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},  // F5
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},  // F6
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},  // F7
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},  // F8
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10}, // F9
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11}, // F10
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12}, // F11
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13}, // F12
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15}, // Print
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16}, // Cortana
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15}, // Light

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // `~
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // 1!
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // 2@
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // 3#
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // 4$
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 5%
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 6^
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 7&
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 8*
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 9()
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 0)
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // -_
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // =+
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13}, // |
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // Backspace
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15}, // Ins
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Home
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16}, // Page Up

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},  // tab
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},  // Q
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},  // W
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // E
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},  // R
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},  // T
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},  // Y
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},  // U
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},  // I
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10}, // O
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11}, // P
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12}, // [{
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14}, // }}
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15}, // Del
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16}, // End
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13}, // Page Down

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},  // Cpas
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},  // A
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},  // S
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},  // D
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},  // F
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},  // G
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},  // H
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},  // J
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},  // K
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10}, // L
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11}, // ;
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12}, // :
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14}, // #~
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13}, // Enter

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},  // LShift
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},  // Z
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},  // X
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},  // C
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},  // V
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},  // B
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},  // N
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},  // M
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10}, // ,<
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11}, // .>
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12}, // /?
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13}, // |
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14}, // RShift
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Up

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},  // LCtrl
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},  // LWin
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},  // LAlt
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},  // NUm
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},  // Space
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10}, // Jap
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11}, // RAlt
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12}, // RWin
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13}, // Fn
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14}, // RCtrl
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15}, // Left
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}, // Down
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15}, // Right
};

#endif // GB_MATRIX_ENABLE

================
File: q3/jis/keyboard.json
================
{
    "usb": {
        "pid": "0x0124",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 26, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 39, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 52, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 111, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 143, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 156, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 169, "y": 15, "flags": 4}, 
            {"matrix": [0, 13], "x": 182, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},   
            {"matrix": [3, 13], "x": 166, "y": 40, "flags": 4},        
            {"matrix": [2, 13], "x": 183, "y": 36, "flags": 1},

            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},    
            {"matrix": [4, 12], "x": 159, "y": 52, "flags": 4},       
            {"matrix": [4, 13], "x": 177, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 16, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 31, "y": 64, "flags": 1},
            {"matrix": [5, 3], "x": 45, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 83, "y": 64, "flags": 4},
            {"matrix": [5, 9], "x": 119, "y": 64, "flags": 1},                               
            {"matrix": [5, 10], "x": 135, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 151, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 166, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "matrix_pins": {
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"],
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "H3"]
    },
    "layout_aliases": {
        "LAYOUT_tkl_jis": "LAYOUT_jis_91"
    },
    "community_layouts": ["tkl_jis"],
    "layouts": {
        "LAYOUT_jis_91": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25},
                {"matrix": [0, 13], "x": 14, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.75, "y": 5.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/jis/readme.md
================
# The JIS variant of the Keychron Q3

================
File: q3/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_92(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,      KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_92(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_92(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,      KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_92(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),
};

// clang-format on

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: q3/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q3/jis_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

#define SNLED27351_CURRENT_TUNE \
    { 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 51

================
File: q3/jis_encoder/jis_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},  // ESC
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},  // F1
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},  // F2
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},  // F3
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},  // F4
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},  // F5
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},  // F6
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},  // F7
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},  // F8
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10}, // F9
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11}, // F10
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12}, // F11
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13}, // F12
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // Mute
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15}, // Print
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16}, // Cortana
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15}, // Light

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // `~
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // 1!
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // 2@
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // 3#
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // 4$
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 5%
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 6^
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 7&
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 8*
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 9()
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 0)
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // -_
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // =+
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14}, // |
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},  // Backspace
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15}, // Ins
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Home
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16}, // Page Up

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},  // tab
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},  // Q
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},  // W
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},  // E
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},  // R
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},  // T
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},  // Y
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},  // U
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},  // I
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10}, // O
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11}, // P
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12}, // [{
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13}, // }}
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15}, // Del
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16}, // End
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13}, // Page Down

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},  // Cpas
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},  // A
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},  // S
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},  // D
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},  // F
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},  // G
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},  // H
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},  // J
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},  // K
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10}, // L
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11}, // ;
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12}, // :
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14}, // #~
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14}, // Enter

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},  // LShift
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},  // Z
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},  // X
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},  // C
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},  // V
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},  // B
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},  // N
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},  // M
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10}, // ,<
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11}, // .>
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12}, // /?
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13}, // |
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14}, // RShift
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Up

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},  // LCtrl
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},  // LWin
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},  // LAlt
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},  // NUm
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},  // Space
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10}, // Jap
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11}, // RAlt
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12}, // RWin
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13}, // Fn
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14}, // RCtrl
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15}, // Left
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}, // Down
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15}, // Right
};

#endif // RGB_MATRIX_ENABLE

================
File: q3/jis_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0125",
        "device_version": "1.0.0"
    },
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 16, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 29, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 55, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 71, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 110, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 126, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 139, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 152, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 165, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 182, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 198, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 211, "y": 0, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 13, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 26, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 39, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 52, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 65, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 78, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 91, "y": 15, "flags": 4},  
            {"matrix": [1, 8], "x": 104, "y": 15, "flags": 4}, 
            {"matrix": [1, 9], "x": 117, "y": 15, "flags": 4}, 
            {"matrix": [1, 10], "x": 130, "y": 15, "flags": 4}, 
            {"matrix": [1, 11], "x": 143, "y": 15, "flags": 4}, 
            {"matrix": [1, 12], "x": 156, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 169, "y": 15, "flags": 4}, 
            {"matrix": [0, 13], "x": 182, "y": 15, "flags": 1}, 
            {"matrix": [1, 14], "x": 198, "y": 15, "flags": 1}, 
            {"matrix": [1, 15], "x": 211, "y": 15, "flags": 1}, 
            {"matrix": [3, 15], "x": 224, "y": 15, "flags": 1},

            {"matrix": [2, 0], "x": 3, "y": 28, "flags": 1}, 
            {"matrix": [2, 1], "x": 19, "y": 28, "flags": 4}, 
            {"matrix": [2, 2], "x": 32, "y": 28, "flags": 4}, 
            {"matrix": [2, 3], "x": 45, "y": 28, "flags": 4}, 
            {"matrix": [2, 4], "x": 59, "y": 28, "flags": 4}, 
            {"matrix": [2, 5], "x": 72, "y": 28, "flags": 4}, 
            {"matrix": [2, 6], "x": 85, "y": 28, "flags": 4}, 
            {"matrix": [2, 7], "x": 98, "y": 28, "flags": 4},  
            {"matrix": [2, 8], "x": 111, "y": 28, "flags": 4}, 
            {"matrix": [2, 9], "x": 124, "y": 28, "flags": 4}, 
            {"matrix": [2, 10], "x": 137, "y": 28, "flags": 4}, 
            {"matrix": [2, 11], "x": 150, "y": 28, "flags": 4}, 
            {"matrix": [2, 12], "x": 163, "y": 28, "flags": 4}, 
            {"matrix": [2, 14], "x": 198, "y": 28, "flags": 1}, 
            {"matrix": [2, 15], "x": 211, "y": 28, "flags": 1}, 
            {"matrix": [3, 12], "x": 224, "y": 28, "flags": 1},

            {"matrix": [3, 0], "x": 5, "y": 40, "flags": 8}, 
            {"matrix": [3, 1], "x": 23, "y": 40, "flags": 4}, 
            {"matrix": [3, 2], "x": 36, "y": 40, "flags": 4}, 
            {"matrix": [3, 3], "x": 49, "y": 40, "flags": 4}, 
            {"matrix": [3, 4], "x": 62, "y": 40, "flags": 4}, 
            {"matrix": [3, 5], "x": 75, "y": 40, "flags": 4}, 
            {"matrix": [3, 6], "x": 88, "y": 40, "flags": 4}, 
            {"matrix": [3, 7], "x": 101, "y": 40, "flags": 4}, 
            {"matrix": [3, 8], "x": 114, "y": 40, "flags": 4}, 
            {"matrix": [3, 9], "x": 127, "y": 40, "flags": 4}, 
            {"matrix": [3, 10], "x": 140, "y": 40, "flags": 4}, 
            {"matrix": [3, 11], "x": 153, "y": 40, "flags": 4},   
            {"matrix": [3, 13], "x": 166, "y": 40, "flags": 4},        
            {"matrix": [2, 13], "x": 183, "y": 36, "flags": 1},

            {"matrix": [4, 0], "x": 8, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 29, "y": 52, "flags": 4}, 
            {"matrix": [4, 3], "x": 42, "y": 52, "flags": 4}, 
            {"matrix": [4, 4], "x": 55, "y": 52, "flags": 4}, 
            {"matrix": [4, 5], "x": 68, "y": 52, "flags": 4}, 
            {"matrix": [4, 6], "x": 81, "y": 52, "flags": 4}, 
            {"matrix": [4, 7], "x": 94, "y": 52, "flags": 4},  
            {"matrix": [4, 8], "x": 107, "y": 52, "flags": 4}, 
            {"matrix": [4, 9], "x": 120, "y": 52, "flags": 4}, 
            {"matrix": [4, 10], "x": 133, "y": 52, "flags": 4}, 
            {"matrix": [4, 11], "x": 146, "y": 52, "flags": 4},    
            {"matrix": [4, 12], "x": 159, "y": 52, "flags": 4},       
            {"matrix": [4, 13], "x": 177, "y": 52, "flags": 1},           
            {"matrix": [4, 15], "x": 211, "y": 52, "flags": 1},

            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1}, 
            {"matrix": [5, 1], "x": 16, "y": 64, "flags": 1}, 
            {"matrix": [5, 2], "x": 31, "y": 64, "flags": 1},
            {"matrix": [5, 3], "x": 45, "y": 64, "flags": 1},                            
            {"matrix": [5, 6], "x": 81, "y": 64, "flags": 4},
            {"matrix": [5, 9], "x": 119, "y": 64, "flags": 1},                               
            {"matrix": [5, 10], "x": 135, "y": 64, "flags": 1}, 
            {"matrix": [5, 11], "x": 151, "y": 64, "flags": 1}, 
            {"matrix": [5, 12], "x": 166, "y": 64, "flags": 1}, 
            {"matrix": [5, 13], "x": 180, "y": 64, "flags": 1}, 
            {"matrix": [5, 14], "x": 198, "y": 64, "flags": 1}, 
            {"matrix": [5, 15], "x": 211, "y": 64, "flags": 1}, 
            {"matrix": [4, 14], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layout_aliases": {
        "LAYOUT_tkl_f13_jis": "LAYOUT_jis_92"
    },
    "community_layouts": ["tkl_f13_jis"],
    "layouts": {
        "LAYOUT_jis_92": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25},
                {"matrix": [5, 5], "x": 14, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.75, "y": 5.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: q3/jis_encoder/readme.md
================
# The JIS variant of the Keychron Q3

- Enable rotary encoder support.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q3/jis_encoder/rules.mk
================
# Custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q3/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

/* Encoder Configuration*/
#define ENCODER_DEFAULT_POS 0x3

================
File: q3/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q3/info.json
================
{
    "manufacturer": "Keychron Q3",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "dip_switch": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q3/matrix.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN A7
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN B1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN B0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOut(uint8_t dataOut) {
    for (uint8_t i = 0; i < 8; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftout_single(uint8_t data) {
    if (data & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }

    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);

    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 8) {
            shiftout_single(0x00);
        } else {
            shiftout_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - 1))
            shiftout_single(0x01);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];

        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == (MATRIX_COLS - 1))
            // unselect Shift Register
            shiftOut(0xFF);
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }
    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q3/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q3/q3.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"
#include "rgb_matrix.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q3/readme.md
================
# Keychron Q3

![Keychron Q3](https://i.imgur.com/KjP4nqdh.jpg)

A customizable 80% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q3
* Hardware Availability: [Keychron Q3 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q3-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q3/ansi:default
    make keychron/q3/ansi_encoder:default
    make keychron/q3/iso:default
    make keychron/q3/iso_encoder:default
    make keychron/q3/jis:default
    make keychron/q3/jis_encoder:default

Flashing example for this keyboard:

    make keychron/q3/ansi:default:flash
    make keychron/q3/ansi_encoder:default:flash
    make keychron/q3/iso:default:flash
    make keychron/q3/iso_encoder:default:flash
    make keychron/q3/jis:default:flash
    make keychron/q3/jis_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q4/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_61(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,
        KC_LSFT,           KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LOPT,  KC_LCMD,                            KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_RCTL),

    [WIN_BASE] = LAYOUT_ansi_61(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,
        KC_LSFT,           KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LGUI,  KC_LALT,                            KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_RCTL),

    [_FN1] = LAYOUT_ansi_61(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, KC_INS,   KC_PGUP,  KC_HOME,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_NO,   KC_PGDN,  KC_END,             _______,
        _______,           _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN2] = LAYOUT_ansi_61(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, KC_APP,  KC_SCRL, KC_INS,   KC_PGUP,  KC_HOME,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_PSCR, KC_PGDN,  KC_END,             _______,
        _______,           _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN3] = LAYOUT_ansi_61(
        KC_TILD, KC_F1,    KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,
        _______,           _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______)
};

// clang-format on

================
File: q4/ansi/keymaps/rbox_custom/config.h
================
//  qmk compile -kb keychron/q4/ansi/v2 -km rbox_custom

#pragma once

#define RGB_MATRIX_MAXIMUM_BRIGHTNESS 255

#define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_MODE_RAINBOW_SWIRL

// enabled only of RGB_MATRIX_KEYPRESSES or RGB_MATRIX_KEYRELEASES is defined
#define RGB_MATRIX_KEYPRESSES
#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE
#define ENABLE_RGB_MATRIX_SOLID_REACTIVE
#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE
#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS
#define ENABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS
#define ENABLE_RGB_MATRIX_SPLASH
#define ENABLE_RGB_MATRIX_SOLID_SPLASH

================
File: q4/ansi/keymaps/rbox_custom/keymap.c
================
#include QMK_KEYBOARD_H

enum custom_layers {
    _BL,
    _NAV,
    _LIGHT,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    /* Base Layer - Mac */
    [_BL] = LAYOUT_ansi_61(
        QK_GESC,  KC_1,   KC_2,   KC_3,   KC_4,   KC_5,   KC_6,   KC_7,   KC_8,   KC_9,   KC_0,   KC_MINS, KC_EQL,  KC_BSPC,
        KC_TAB,  KC_Q,   KC_W,   KC_E,   KC_R,   KC_T,   KC_Y,   KC_U,   KC_I,   KC_O,   KC_P,   KC_LBRC, KC_RBRC, KC_BSLS,
        MO(_NAV), KC_A,   KC_S,   KC_D,   KC_F,   KC_G,   KC_H,   KC_J,   KC_K,   KC_L,   KC_SCLN, KC_QUOT, KC_ENT,
        KC_LSFT, KC_Z,   KC_X,   KC_C,   KC_V,   KC_B,   KC_N,   KC_M,   KC_COMM, KC_DOT, KC_SLSH, KC_RSFT,
        KC_LCTL, KC_LOPT, KC_LCMD,                          KC_SPC,                                    KC_RALT, KC_RGUI, MO(_LIGHT), KC_RCTL
    ),

    /* Navigation Layer (Activated by holding Caps Lock) */
    [_NAV] = LAYOUT_ansi_61(
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, KC_DEL,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, KC_LEFT, KC_DOWN, KC_UP,  KC_RGHT, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______,                          _______,                                _______, _______, _______, _______
    ),

    [_LIGHT] = LAYOUT_ansi_61(
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, RGB_TOG, RGB_MOD, RGB_HUI, RGB_HUD, RGB_SAI, RGB_SAD, RGB_VAI, RGB_VAD, RGB_SPI, RGB_SPD, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______, _______,
        _______, _______, _______,                          _______,                                _______, _______, _______, _______
    )
};

================
File: q4/ansi/keymaps/rbox_custom/rules.mk
================
BOOTMAGIC_ENABLE = yes
RGB_MATRIX_ENABLE = yes
EXTRAKEY_ENABLE = no	# Audio control and System control
NKRO_ENABLE = yes       # N-Key Rollover

================
File: q4/ansi/v1/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

================
File: q4/ansi/v1/keyboard.json
================
{
    "usb": {
        "device_version": "1.0.6"
    }
}

================
File: q4/ansi/v1/v1.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
};

#endif

================
File: q4/ansi/v2/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

================
File: q4/ansi/v2/keyboard.json
================
{
    "usb": {
        "device_version": "2.0.0"
    }
}

================
File: q4/ansi/v2/v2.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {0, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif

================
File: q4/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable CapsLock LED*/
#define CAPS_LOCK_LED_INDEX 28

================
File: q4/ansi/info.json
================
{
    "usb": {
        "pid": "0x0140"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 16, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 32, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 0, "flags": 4},  
            {"matrix": [0, 4], "x": 64, "y": 0, "flags": 4},  
            {"matrix": [0, 5], "x": 81, "y": 0, "flags": 4},  
            {"matrix": [0, 6], "x": 97, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 113, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 129, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 145, "y": 0, "flags": 4},  
            {"matrix": [0, 10], "x": 161, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 177, "y": 0, "flags": 4},  
            {"matrix": [0, 12], "x": 193, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 218, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4,"y": 16, "flags": 1},
            {"matrix": [1, 1], "x": 24,"y": 16, "flags": 4},
            {"matrix": [1, 2], "x": 40,"y": 16, "flags": 4},
            {"matrix": [1, 3], "x": 56,"y": 16, "flags": 4},
            {"matrix": [1, 4], "x": 73,"y": 16, "flags": 4},
            {"matrix": [1, 5], "x": 89,"y": 16, "flags": 4},
            {"matrix": [1, 6], "x": 105,"y": 16, "flags": 4},
            {"matrix": [1, 7], "x": 121,"y": 16, "flags": 4},
            {"matrix": [1, 8], "x": 137,"y": 16, "flags": 4},
            {"matrix": [1, 9], "x": 153,"y": 16, "flags": 4},
            {"matrix": [1, 10], "x": 169,"y": 16, "flags": 4},
            {"matrix": [1, 11], "x": 185,"y": 16, "flags": 4},
            {"matrix": [1, 12], "x": 202,"y": 16, "flags": 4},
            {"matrix": [1, 13], "x": 222,"y": 16, "flags": 4},

            {"matrix": [2, 0], "x": 6, "y": 32, "flags": 8},
            {"matrix": [2, 1], "x": 28, "y": 32, "flags": 4},
            {"matrix": [2, 2], "x": 44, "y": 32, "flags": 4},
            {"matrix": [2, 3], "x": 60, "y": 32, "flags": 4},
            {"matrix": [2, 4], "x": 77, "y": 32, "flags": 4},
            {"matrix": [2, 5], "x": 93, "y": 32, "flags": 4},
            {"matrix": [2, 6], "x": 109, "y": 32, "flags": 4},
            {"matrix": [2, 7], "x": 125, "y": 32, "flags": 4},
            {"matrix": [2, 8], "x": 141, "y": 32, "flags": 4},
            {"matrix": [2, 9], "x": 157, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 173, "y": 32, "flags": 4},
            {"matrix": [2, 11], "x": 189, "y": 32, "flags": 4},
            {"matrix": [2, 13], "x": 216, "y": 32, "flags": 1},

            {"matrix": [3, 0], "x": 10, "y": 48, "flags": 1}, 
            {"matrix": [3, 2], "x": 36, "y": 48, "flags": 4}, 
            {"matrix": [3, 3], "x": 52, "y": 48, "flags": 4}, 
            {"matrix": [3, 4], "x": 69, "y": 48, "flags": 4}, 
            {"matrix": [3, 5], "x": 85, "y": 48, "flags": 4}, 
            {"matrix": [3, 6], "x": 101, "y": 48, "flags": 4}, 
            {"matrix": [3, 7], "x": 117, "y": 48, "flags": 4}, 
            {"matrix": [3, 8], "x": 133, "y": 48, "flags": 4}, 
            {"matrix": [3, 9], "x": 149, "y": 48, "flags": 4}, 
            {"matrix": [3, 10], "x": 165, "y": 48, "flags": 4}, 
            {"matrix": [3, 11], "x": 181, "y": 48, "flags": 4}, 
            {"matrix": [3, 13], "x": 212, "y": 48, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 22, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 103, "y": 64, "flags": 4},
            {"matrix": [4, 10], "x": 164, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 184, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 204, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 224, "y": 64, "flags": 1}

        ]
    },
    "layouts": {
        "LAYOUT_ansi_61": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 13], "x": 13.5, "y": 1, "w": 1.5},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2, "w": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4, "w": 1.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4, "w": 1.25},
                {"matrix": [4, 12], "x": 12.5, "y": 4, "w": 1.25},
                {"matrix": [4, 13], "x": 13.75, "y": 4, "w": 1.25}
            ]
        }
    }
}

================
File: q4/ansi/readme.md
================
# The ANSI variant of the Keychron Q4

================
File: q4/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_62(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,
        KC_LSFT, KC_NUBS,  KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LOPT,  KC_LCMD,                            KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_RCTL),

    [WIN_BASE] = LAYOUT_iso_62(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,
        KC_LSFT, KC_NUBS,  KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LGUI,  KC_LALT,                            KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_RCTL),

    [_FN1] = LAYOUT_iso_62(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, KC_INS,   KC_PGUP,  KC_HOME,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_NO,   KC_PGDN,  KC_END,   _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,   _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN2] = LAYOUT_iso_62(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, KC_APP,  KC_SCRL, KC_INS,   KC_PGUP,  KC_HOME,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_PSCR, KC_PGDN,  KC_END,   _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN3] = LAYOUT_iso_62(
        KC_TILD, KC_F1,    KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______)
};

// clnag-format on

================
File: q4/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Enable CapsLock LED*/
#define CAPS_LOCK_LED_INDEX 27

================
File: q4/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {0, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif

================
File: q4/iso/keyboard.json
================
{
    "usb": {
        "pid": "0x0142",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 16, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 32, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 64, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 81, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 97, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 113, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 129, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 145, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 161, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 177, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 193, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 218, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 16, "flags": 1},
            {"matrix": [1, 1], "x": 24, "y": 16, "flags": 4},
            {"matrix": [1, 2], "x": 40, "y": 16, "flags": 4},
            {"matrix": [1, 3], "x": 56, "y": 16, "flags": 4},
            {"matrix": [1, 4], "x": 73, "y": 16, "flags": 4},
            {"matrix": [1, 5], "x": 89, "y": 16, "flags": 4},
            {"matrix": [1, 6], "x": 105, "y": 16, "flags": 4},
            {"matrix": [1, 7], "x": 121, "y": 16, "flags": 4},
            {"matrix": [1, 8], "x": 137, "y": 16, "flags": 4},
            {"matrix": [1, 9], "x": 153, "y": 16, "flags": 4},
            {"matrix": [1, 10], "x": 169, "y": 16, "flags": 4},
            {"matrix": [1, 11], "x": 185, "y": 16, "flags": 4},
            {"matrix": [1, 12], "x": 202, "y": 16, "flags": 4},

            {"matrix": [2, 0], "x": 6, "y": 32, "flags": 8},
            {"matrix": [2, 1], "x": 28, "y": 32, "flags": 4},
            {"matrix": [2, 2], "x": 44, "y": 32, "flags": 4},
            {"matrix": [2, 3], "x": 60, "y": 32, "flags": 4},
            {"matrix": [2, 4], "x": 77, "y": 32, "flags": 4},
            {"matrix": [2, 5], "x": 93, "y": 32, "flags": 4},
            {"matrix": [2, 6], "x": 109, "y": 32, "flags": 4},
            {"matrix": [2, 7], "x": 125, "y": 32, "flags": 4},
            {"matrix": [2, 8], "x": 141, "y": 32, "flags": 4},
            {"matrix": [2, 9], "x": 157, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 173, "y": 32, "flags": 4},
            {"matrix": [2, 11], "x": 189, "y": 32, "flags": 4},
            {"matrix": [2, 13], "x": 206, "y": 32, "flags": 4},
            {"matrix": [1, 13], "x": 224, "y": 24, "flags": 1},

            {"matrix": [3, 0], "x": 2, "y": 48, "flags": 1},
            {"matrix": [3, 1], "x": 20, "y": 48, "flags": 4},
            {"matrix": [3, 2], "x": 36, "y": 48, "flags": 4},
            {"matrix": [3, 3], "x": 52, "y": 48, "flags": 4},
            {"matrix": [3, 4], "x": 69, "y": 48, "flags": 4},
            {"matrix": [3, 5], "x": 85, "y": 48, "flags": 4},
            {"matrix": [3, 6], "x": 101, "y": 48, "flags": 4},
            {"matrix": [3, 7], "x": 117, "y": 48, "flags": 4},
            {"matrix": [3, 8], "x": 133, "y": 48, "flags": 4},
            {"matrix": [3, 9], "x": 149, "y": 48, "flags": 4},
            {"matrix": [3, 10], "x": 165, "y": 48, "flags": 4},
            {"matrix": [3, 11], "x": 181, "y": 48, "flags": 4},
            {"matrix": [3, 13], "x": 212, "y": 48, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 22, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 103, "y": 64, "flags": 4},
            {"matrix": [4, 10], "x": 164, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 184, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 204, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "layouts": {
        "LAYOUT_iso_62": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2},
                {"matrix": [1, 13], "x": 13.75, "y": 1, "w": 1.25, "h": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4, "w": 1.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4, "w": 1.25},
                {"matrix": [4, 12], "x": 12.5, "y": 4, "w": 1.25},
                {"matrix": [4, 13], "x": 13.75, "y": 4, "w": 1.25}
            ]
        }
    }
}

================
File: q4/iso/readme.md
================
# The ISO variant of the Keychron Q4

================
File: q4/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60 }

================
File: q4/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q4/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q4",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dip_switch": {
        "enabled": true,
        "matrix_grid": [ [4, 4] ]
    },
    "dynamic_keymap": {
        "layer_count": 5
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q4/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q4/q4.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)
bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q4/readme.md
================
# Keychron Q4

![Keychron Q4](https://i.imgur.com/daIVjVGh.jpg)

A customizable 60% keyboard.

Q4 Version 1 uses only 2 ICs for CKLED2001 and Q4 Version 2 uses only one IC.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q4
* Hardware Availability: [Keychron Q4 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q4-qmk-via-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q4/ansi/v1:default
    make keychron/q4/ansi/v2:default
    make keychron/q4/iso:default

Flashing example for this keyboard:

    make keychron/q4/ansi/v1:default:flash
    make keychron/q4/ansi/v2:default:flash
    make keychron/q4/iso:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q5/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_100(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_100(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_100(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_100(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

================
File: q5/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#endif // RGB_MATRIX_ENABLE

================
File: q5/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 54

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 33

================
File: q5/ansi/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 12, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 24, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 36, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 60, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 72, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 84, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 109, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 121, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 133, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 145, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 157, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 188, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 200, "y": 0, "flags": 1},
            {"matrix": [0, 17], "x": 212, "y": 0, "flags": 1},
            {"matrix": [3, 12], "x": 224, "y": 0, "flags": 1},
            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 12, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 24, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 36, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 48, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 60, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 72, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 84, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 97, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 109, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 121, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 133, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 145, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 163, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 188, "y": 15, "flags": 8},
            {"matrix": [1, 16], "x": 200, "y": 15, "flags": 4},
            {"matrix": [1, 17], "x": 212, "y": 15, "flags": 4},
            {"matrix": [3, 14], "x": 224, "y": 15, "flags": 4},
            {"matrix": [2, 0], "x": 3, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 18, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 30, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 42, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 54, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 78, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 91, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 103, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 115, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 127, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 139, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 151, "y": 26, "flags": 4},
            {"matrix": [2, 13], "x": 166, "y": 26, "flags": 4},
            {"matrix": [2, 15], "x": 188, "y": 26, "flags": 4},
            {"matrix": [2, 16], "x": 200, "y": 26, "flags": 4},
            {"matrix": [2, 17], "x": 212, "y": 26, "flags": 4},
            {"matrix": [3, 0], "x": 5, "y": 38, "flags": 8},
            {"matrix": [3, 1], "x": 21, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 57, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 81, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 94, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 106, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 118, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 130, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 142, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 161, "y": 38, "flags": 1},
            {"matrix": [3, 15], "x": 188, "y": 38, "flags": 4},
            {"matrix": [3, 16], "x": 200, "y": 38, "flags": 4},
            {"matrix": [3, 17], "x": 212, "y": 38, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 32, "flags": 4},
            {"matrix": [4, 0], "x": 8, "y": 49, "flags": 1},
            {"matrix": [4, 2], "x": 27, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 39, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 51, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 63, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 75, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 88, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 100, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 112, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 124, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 152, "y": 49, "flags": 1},
            {"matrix": [4, 14], "x": 172, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 188, "y": 49, "flags": 4},
            {"matrix": [4, 16], "x": 200, "y": 49, "flags": 4},
            {"matrix": [4, 17], "x": 212, "y": 49, "flags": 4},
            {"matrix": [5, 0], "x": 1, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 17, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 32, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 77, "y": 61, "flags": 1},
            {"matrix": [5, 10], "x": 121, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 133, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 145, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 160, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 172, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 184, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 200, "y": 61, "flags": 1},
            {"matrix": [5, 17], "x": 212, "y": 61, "flags": 1},
            {"matrix": [5, 5], "x": 224, "y": 55, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0150"
    },
    "layouts": {
        "LAYOUT_ansi_100": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.5, "y": 0},
                {"matrix": [0, 16], "x": 16.5, "y": 0},
                {"matrix": [0, 17], "x": 17.5, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q5/ansi/readme.md
================
# The ANSI variant of the Keychron Q5

================
File: q5/ansi/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q5/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_98(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_98(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_98(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_98(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q5/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q5/ansi_encoder/ansi_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    // {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    // {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#endif // RGB_MATRIX_ENABLE

================
File: q5/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 52

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 31

================
File: q5/ansi_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 24, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 36, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 60, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 78, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 90, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 103, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 115, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 133, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 145, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 157, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 184, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 196, "y": 0, "flags": 1},
            {"matrix": [0, 17], "x": 208, "y": 0, "flags": 1},
            {"matrix": [3, 12], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 12, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 24, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 36, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 48, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 60, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 72, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 85, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 97, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 109, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 121, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 133, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 145, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 163, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 188, "y": 15, "flags": 8},
            {"matrix": [1, 16], "x": 200, "y": 15, "flags": 4},
            {"matrix": [1, 17], "x": 212, "y": 15, "flags": 4},
            {"matrix": [3, 14], "x": 224, "y": 15, "flags": 4},

            {"matrix": [2, 0], "x": 3, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 18, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 30, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 42, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 54, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 78, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 91, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 103, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 115, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 127, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 139, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 151, "y": 26, "flags": 4},
            {"matrix": [2, 13], "x": 166, "y": 26, "flags": 4},
            {"matrix": [2, 15], "x": 188, "y": 26, "flags": 4},
            {"matrix": [2, 16], "x": 200, "y": 26, "flags": 4},
            {"matrix": [2, 17], "x": 212, "y": 26, "flags": 4},

            {"matrix": [3, 0], "x": 5, "y": 38, "flags": 8},
            {"matrix": [3, 1], "x": 21, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 57, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 81, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 94, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 106, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 118, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 130, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 142, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 161, "y": 38, "flags": 1},
            {"matrix": [3, 15], "x": 188, "y": 38, "flags": 4},
            {"matrix": [3, 16], "x": 200, "y": 38, "flags": 4},
            {"matrix": [3, 17], "x": 212, "y": 38, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 32, "flags": 4},

            {"matrix": [4, 0], "x": 8, "y": 49, "flags": 1},
            {"matrix": [4, 2], "x": 27, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 39, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 51, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 63, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 75, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 88, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 100, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 112, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 124, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 152, "y": 49, "flags": 1},
            {"matrix": [4, 14], "x": 172, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 188, "y": 49, "flags": 4},
            {"matrix": [4, 16], "x": 200, "y": 49, "flags": 4},
            {"matrix": [4, 17], "x": 212, "y": 49, "flags": 4},
            {"matrix": [5, 0], "x": 1, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 17, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 32, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 77, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x": 121, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 133, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 145, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 160, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 172, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 184, "y": 64, "flags": 4},
            {"matrix": [5, 16], "x": 200, "y": 61, "flags": 4},
            {"matrix": [5, 17], "x": 212, "y": 61, "flags": 4},
            {"matrix": [5, 5], "x": 224, "y": 55, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0151"
    },
    "layouts": {
        "LAYOUT_ansi_98": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.5, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},
                {"matrix": [0, 16], "x": 16.25, "y": 0},
                {"matrix": [0, 17], "x": 17.25, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q5/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q5

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q5/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q5/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_101(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_101(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_iso_101(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_101(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

// clang-format on

================
File: q5/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 53

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 33

================
File: q5/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#endif // RGB_MATRIX_ENABLE

================
File: q5/iso/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 12, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 24, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 36, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 60, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 72, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 85, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 97, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 109, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 121, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 133, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 145, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 157, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 188, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 200, "y": 0, "flags": 1},
            {"matrix": [0, 17], "x": 212, "y": 0, "flags": 1},
            {"matrix": [3, 12], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 12, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 24, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 36, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 48, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 60, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 72, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 85, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 97, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 109, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 121, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 133, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 145, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 163, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 188, "y": 15, "flags": 8},
            {"matrix": [1, 16], "x": 200, "y": 15, "flags": 4},
            {"matrix": [1, 17], "x": 212, "y": 15, "flags": 4},
            {"matrix": [3, 14], "x": 224, "y": 15, "flags": 4},

            {"matrix": [2, 0], "x": 3, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 18, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 30, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 42, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 54, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 78, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 91, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 103, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 115, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 127, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 139, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 151, "y": 26, "flags": 4},
            {"matrix": [2, 15], "x": 188, "y": 26, "flags": 4},
            {"matrix": [2, 16], "x": 200, "y": 26, "flags": 4},
            {"matrix": [2, 17], "x": 212, "y": 26, "flags": 4},

            {"matrix": [3, 0], "x": 5, "y": 38, "flags": 8},
            {"matrix": [3, 1], "x": 21, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 57, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 81, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 94, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 106, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 118, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 130, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 142, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 154, "y": 38, "flags": 4},
            {"matrix": [2, 13], "x": 170, "y": 34, "flags": 1},
            {"matrix": [3, 15], "x": 188, "y": 38, "flags": 4},
            {"matrix": [3, 16], "x": 200, "y": 38, "flags": 4},
            {"matrix": [3, 17], "x": 212, "y": 38, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 32, "flags": 4},

            {"matrix": [4, 0], "x": 3, "y": 49, "flags": 1},
            {"matrix": [4, 1], "x": 15, "y": 49, "flags": 4},
            {"matrix": [4, 2], "x": 27, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 39, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 51, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 63, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 75, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 88, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 100, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 112, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 124, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 152, "y": 49, "flags": 1},
            {"matrix": [4, 14], "x": 172, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 188, "y": 49, "flags": 4},
            {"matrix": [4, 16], "x": 200, "y": 49, "flags": 4},
            {"matrix": [4, 17], "x": 212, "y": 49, "flags": 4},

            {"matrix": [5, 0], "x": 1, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 17, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 32, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 77, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x": 121, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 133, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 145, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 160, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 172, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 184, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 200, "y": 61, "flags": 4},
            {"matrix": [5, 17], "x": 212, "y": 61, "flags": 4},
            {"matrix": [5, 5], "x": 224, "y": 55, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0152"
    },
    "layouts": {
        "LAYOUT_iso_101": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.5, "y": 0},
                {"matrix": [0, 16], "x": 16.5, "y": 0},
                {"matrix": [0, 17], "x": 17.5, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q5/iso/readme.md
================
# The ISO variant of the Keychron Q5

================
File: q5/iso/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q5/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_99(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_99(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_iso_99(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_99(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q5/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q5/iso_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 51

/* Enable num-lock LED */
#define NUM_LOCK_LED_INDEX 31

================
File: q5/iso_encoder/iso_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // `~
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // 1!
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // 2@
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // 3#
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // 4$
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 5%
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 6^
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 7&
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 8*
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 9(
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 0)
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // -_
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // =+
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14}, // BackSpace
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Numlock
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},  // /
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10}, // *
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11}, // -

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#endif // RGB_MATRIX_ENABLE

================
File: q5/iso_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 24, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 36, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 48, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 60, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 78, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 90, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 103, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 115, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 133, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 145, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 157, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 169, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 184, "y": 0, "flags": 1},
            {"matrix": [0, 16], "x": 196, "y": 0, "flags": 1},
            {"matrix": [0, 17], "x": 208, "y": 0, "flags": 1},
            {"matrix": [3, 12], "x": 224, "y": 0, "flags": 1},
            {"matrix": [1, 0], "x": 0, "y": 15, "flags": 1},
            {"matrix": [1, 1], "x": 12, "y": 15, "flags": 4},
            {"matrix": [1, 2], "x": 24, "y": 15, "flags": 4},
            {"matrix": [1, 3], "x": 36, "y": 15, "flags": 4},
            {"matrix": [1, 4], "x": 48, "y": 15, "flags": 4},
            {"matrix": [1, 5], "x": 60, "y": 15, "flags": 4},
            {"matrix": [1, 6], "x": 72, "y": 15, "flags": 4},
            {"matrix": [1, 7], "x": 85, "y": 15, "flags": 4},
            {"matrix": [1, 8], "x": 97, "y": 15, "flags": 4},
            {"matrix": [1, 9], "x": 109, "y": 15, "flags": 4},
            {"matrix": [1, 10], "x": 121, "y": 15, "flags": 4},
            {"matrix": [1, 11], "x": 133, "y": 15, "flags": 4},
            {"matrix": [1, 12], "x": 145, "y": 15, "flags": 4},
            {"matrix": [1, 13], "x": 163, "y": 15, "flags": 1},
            {"matrix": [1, 15], "x": 188, "y": 15, "flags": 8},
            {"matrix": [1, 16], "x": 200, "y": 15, "flags": 4},
            {"matrix": [1, 17], "x": 212, "y": 15, "flags": 4},
            {"matrix": [3, 14], "x": 224, "y": 15, "flags": 4},
            {"matrix": [2, 0], "x": 3, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 18, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 30, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 42, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 54, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 66, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 78, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 91, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 103, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 115, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 127, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 139, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 151, "y": 26, "flags": 4},
            {"matrix": [2, 15], "x": 188, "y": 26, "flags": 4},
            {"matrix": [2, 16], "x": 200, "y": 26, "flags": 4},
            {"matrix": [2, 17], "x": 212, "y": 26, "flags": 4},
            {"matrix": [3, 0], "x": 5, "y": 38, "flags": 8},
            {"matrix": [3, 1], "x": 21, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 33, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 57, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 81, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 94, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 106, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 118, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 130, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 142, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 154, "y": 38, "flags": 4},
            {"matrix": [2, 13], "x": 170, "y": 34, "flags": 1},
            {"matrix": [3, 15], "x": 188, "y": 38, "flags": 4},
            {"matrix": [3, 16], "x": 200, "y": 38, "flags": 4},
            {"matrix": [3, 17], "x": 212, "y": 38, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 32, "flags": 4},
            {"matrix": [4, 0], "x": 3, "y": 49, "flags": 1},
            {"matrix": [4, 1], "x": 15, "y": 49, "flags": 4},
            {"matrix": [4, 2], "x": 27, "y": 49, "flags": 4},
            {"matrix": [4, 3], "x": 39, "y": 49, "flags": 4},
            {"matrix": [4, 4], "x": 51, "y": 49, "flags": 4},
            {"matrix": [4, 5], "x": 63, "y": 49, "flags": 4},
            {"matrix": [4, 6], "x": 75, "y": 49, "flags": 4},
            {"matrix": [4, 7], "x": 88, "y": 49, "flags": 4},
            {"matrix": [4, 8], "x": 100, "y": 49, "flags": 4},
            {"matrix": [4, 9], "x": 112, "y": 49, "flags": 4},
            {"matrix": [4, 10], "x": 124, "y": 49, "flags": 4},
            {"matrix": [4, 11], "x": 136, "y": 49, "flags": 4},
            {"matrix": [4, 13], "x": 152, "y": 49, "flags": 1},
            {"matrix": [4, 14], "x": 172, "y": 52, "flags": 1},
            {"matrix": [4, 15], "x": 188, "y": 49, "flags": 4},
            {"matrix": [4, 16], "x": 200, "y": 49, "flags": 4},
            {"matrix": [4, 17], "x": 212, "y": 49, "flags": 4},
            {"matrix": [5, 0], "x": 1, "y": 61, "flags": 1},
            {"matrix": [5, 1], "x": 17, "y": 61, "flags": 1},
            {"matrix": [5, 2], "x": 32, "y": 61, "flags": 1},
            {"matrix": [5, 6], "x": 77, "y": 61, "flags": 4},
            {"matrix": [5, 10], "x": 121, "y": 61, "flags": 1},
            {"matrix": [5, 11], "x": 133, "y": 61, "flags": 1},
            {"matrix": [5, 12], "x": 145, "y": 61, "flags": 1},
            {"matrix": [5, 13], "x": 160, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 172, "y": 64, "flags": 1},
            {"matrix": [5, 15], "x": 184, "y": 64, "flags": 1},
            {"matrix": [5, 16], "x": 200, "y": 61, "flags": 4},
            {"matrix": [5, 17], "x": 212, "y": 61, "flags": 4},
            {"matrix": [5, 5], "x": 224, "y": 55, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0153"
    },
    "layouts": {
        "LAYOUT_iso_99": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.5, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},
                {"matrix": [0, 16], "x": 16.25, "y": 0},
                {"matrix": [0, 17], "x": 17.25, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},
                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},
                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},
                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},
                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},
                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q5/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q5

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q5/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q5/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix size */
#define MATRIX_ROWS 6
#define MATRIX_COLS 18

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_CURRENT_TUNE \
    { 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56 }

/* Encoder Configuration*/
#define ENCODER_DEFAULT_POS 0x3

================
File: q5/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q5/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q5",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q5/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN C15
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN A1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN A0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOut(uint8_t dataOut) {
    for (uint8_t i = 0; i < 8; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftout_single(uint8_t data) {
    if (data & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }
    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);

    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 10) {
            shiftout_single(0x00);
        } else {
            shiftout_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - 1))
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
        gpio_atomic_set_pin_output_high(LATCH_PIN);
        gpio_atomic_set_pin_output_low(LATCH_PIN);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == (MATRIX_COLS - 1))
            // unselect shift Register
            shiftOut(0xFF);
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    if (current_col < 10) {
        matrix_output_select_delay();
    } else {
        for (int8_t cycle = 4; cycle > 0; cycle--) {
            matrix_output_select_delay(); // 0.25us
            matrix_output_select_delay();
            matrix_output_select_delay();
            matrix_output_select_delay();
        }
    }

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }

    }

    // // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q5/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q5/q5.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif  // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && (defined(CAPS_LOCK_LED_INDEX) || defined(NUM_LOCK_LED_INDEX))

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
#    ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#    endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
    return true;
}

#endif // RGB_MATRIX_ENABLE...

================
File: q5/readme.md
================
# Keychron Q5

![Keychron Q5](https://i.imgur.com/hgBjdtTh.jpg)

A customizable 96% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q5
* Hardware Availability: [Keychron Q5 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q5-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q5/ansi:default
    make keychron/q5/ansi_encoder:default
    make keychron/q5/iso:default
    make keychron/q5/iso_encoder:default

Flashing example for this keyboard:

    make keychron/q5/ansi:default:flash
    make keychron/q5/ansi_encoder:default:flash
    make keychron/q5/iso:default:flash
    make keychron/q5/iso_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q6/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_108(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_108(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_108(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_108(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

================
File: q6/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40, 16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38, 17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  54,  55,  56,  57,  58,  59, 18 },
        { 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,  __,  73,  60,  77,  76,  74,  75, 19 },
        { 78, __, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,  __,  89,  93,  90, 107,  91,  92, __ },
        { 94, 95, 96, __, __, __, 97, __, __, __, 98, 99, 100, 101, 102, 103, 104, 105, 106, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},           {21,0},  {31,0},  {42,0},  {52,0},  {68,0},  {78,0},  {89,0},   {99,0},   {115,0},  {125,0},  {136,0},  {146,0},  {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15},  {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27},  {99,27},  {109,27}, {120,27}, {130,27}, {143,27}, {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40},  {102,40}, {112,40}, {123,40},           {139,40},                               {193,40}, {203,40}, {214,40}, {224,34},
        {7,52},          {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52},  {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                              {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,          4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q6/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, A2, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, C14 }
#define NO_PIN_START 11
#define NO_PIN_OFFSET 1

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 61

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: q6/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron Q6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0160",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "build": {
        "lto": true
    },
    "layouts": {
        "LAYOUT_ansi_108": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q6/ansi/readme.md
================
# The ANSI variant of the Keychron Q6

================
File: q6/ansi/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q6/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_109(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_109(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_109(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_109(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q6/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q6/ansi_encoder/ansi_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40, 16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38, 17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  54,  55,  56,  57,  58,  59, 18 },
        { 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,  __,  73,  60,  77,  76,  74,  75, 19 },
        { 78, __, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,  __,  89,  93,  90, 107,  91,  92, __ },
        { 94, 95, 96, __, __, __, 97, __, __, __, 98, 99, 100, 101, 102, 103, 104, 105, 106, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},  {13,0},  {24,0},  {34,0},  {45,0},  {57,0},  {68,0},  {78,0},  {89,0},  {102,0},  {112,0},  {123,0},  {133,0},            {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27}, {143,27}, {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40},           {139,40},                               {193,40}, {203,40}, {214,40}, {224,34},
        {7,52},          {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,          4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q6/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }
#define NO_PIN_START 10
#define NO_PIN_NUM 10
#define CLR_REG_VAL 0x3FF

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 61

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: q6/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0161",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "build": {
        "lto": true
    },
    "layouts": {
        "LAYOUT_ansi_109": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [4, 19], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q6/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q6

- Enable rotary encoder support.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q6/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q6/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_109(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_109(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_iso_109(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_109(
        _______,            KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

================
File: q6/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, A2, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, C14 }
#define NO_PIN_START 11
#define NO_PIN_OFFSET 1

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 60

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: q6/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40,  16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38,  17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  73,  54,  55,  56,  57,  58,  18 },
        { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  __,  72,  59,  77,  76,  74,  75,  19 },
        { 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  __,  90,  94,  91,  108, 92,  93,  __ },
        { 95, 96, 97, __, __, __, 98, __, __, __, 99, 100, 101, 102, 103, 104, 105, 106, 107, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},           {21,0},  {31,0},  {42,0},  {52,0},  {68,0},  {78,0},  {89,0},  {99,0},   {115,0},  {125,0},  {136,0},  {146,0},  {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27},           {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40}, {133,40}, {147,36},                               {193,40}, {203,40}, {214,40}, {224,34},
        {1,52}, {13,52}, {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,          4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q6/iso/keyboard.json
================
{
    "keyboard_name": "Keychron Q6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0162",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "build": {
        "lto": true
    },
    "layouts": {
        "LAYOUT_iso_109": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q6/iso/readme.md
================
# The ISO variant of the Keychron Q6

================
File: q6/iso/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q6/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_110(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD ,                               KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_110(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_iso_110(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_110(
        _______,  KC_BRID,  KC_BRIU,  _______,  _______,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: q6/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q6/iso_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }
#define NO_PIN_START 10
#define NO_PIN_NUM 10
#define CLR_REG_VAL 0x3FF

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 60

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: q6/iso_encoder/iso_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40,  16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38,  17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  73,  54,  55,  56,  57,  58,  18 },
        { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  __,  72,  59,  77,  76,  74,  75,  19 },
        { 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  __,  90,  94,  91,  108, 92,  93,  __ },
        { 95, 96, 97, __, __, __, 98, __, __, __, 99, 100, 101, 102, 103, 104, 105, 106, 107, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},  {13,0},  {24,0},  {34,0},  {45,0},  {57,0},  {68,0},  {78,0},  {89,0},  {102,0},  {112,0},  {123,0},  {133,0},            {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27}, {159,27},           {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40}, {133,40}, {147,36},                               {193,40}, {203,40}, {214,40}, {224,34},
        {1,52}, {13,52}, {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,          4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q6/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0163",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "build": {
        "lto": true
    },
    "layouts": {
        "LAYOUT_iso_110": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [4, 19], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: q6/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q6

- Enable rotary encoder support.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q6/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q6/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix size */
#define MATRIX_ROWS 6
#define MATRIX_COLS 20

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_CURRENT_TUNE \
    { 0xA4, 0xA4, 0x52, 0xA4, 0xA4, 0x52, 0xA4, 0xA4, 0x52, 0xA4, 0xA4, 0x52 }

================
File: q6/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q6/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: q6/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN C15
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN A1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN A0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

#ifndef NO_PIN_NUM
#    define NO_PIN_NUM 8
#endif

#ifndef NO_PIN_OFFSET
#    define NO_PIN_OFFSET 0
#endif

#ifndef CLR_REG_VAL
#    define CLR_REG_VAL 0xFF
#endif

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

static void shiftOut(uint16_t dataOut) {
    for (uint8_t i = 0; i < NO_PIN_NUM; i++) {
        if (dataOut & 0x1) {
            gpio_atomic_set_pin_output_high(DATA_PIN);
        } else {
            gpio_atomic_set_pin_output_low(DATA_PIN);
        }
        dataOut = dataOut >> 1;
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
    }
    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static void shiftout_single(uint8_t data) {
    if (data & 0x1) {
        gpio_atomic_set_pin_output_high(DATA_PIN);
    } else {
        gpio_atomic_set_pin_output_low(DATA_PIN);
    }
    gpio_atomic_set_pin_output_high(CLOCK_PIN);
    gpio_atomic_set_pin_output_low(CLOCK_PIN);

    gpio_atomic_set_pin_output_high(LATCH_PIN);
    gpio_atomic_set_pin_output_low(LATCH_PIN);
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == NO_PIN_START) {
            shiftout_single(0x00);
        } else {
            shiftout_single(0x01);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        if (col == (MATRIX_COLS - NO_PIN_OFFSET - 1))
        gpio_atomic_set_pin_output_high(CLOCK_PIN);
        gpio_atomic_set_pin_output_low(CLOCK_PIN);
        gpio_atomic_set_pin_output_high(LATCH_PIN);
        gpio_atomic_set_pin_output_low(LATCH_PIN);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == (MATRIX_COLS - NO_PIN_OFFSET - 1))
            // unselect shift Register
            shiftOut(CLR_REG_VAL);
    }
}

static void matrix_init_pins(void) {
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    if (current_col < 10) {
        matrix_output_select_delay();
    } else {
        for (int8_t cycle = 4; cycle > 0; cycle--) {
            matrix_output_select_delay(); // 0.25us
            matrix_output_select_delay();
            matrix_output_select_delay();
            matrix_output_select_delay();
        }
    }

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q6/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q6/q6.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && (defined(CAPS_LOCK_LED_INDEX) || defined(NUM_LOCK_LED_INDEX))

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
    return true;
}

#endif // RGB_MATRIX_ENABLE...

================
File: q6/readme.md
================
# Keychron Q6

A customizable 100% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q6
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/q6/ansi:default

Flashing example for this keyboard:

    make keychron/q6/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q60/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    FUNC,
    L3,
    L4,
    L5
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_60(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,    KC_BSLS, KC_GRV,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,            KC_DEL,
        KC_LCTL, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,                      KC_ENT,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,             KC_RSFT, MO(FUNC),
                           KC_LOPT,  KC_LCMD,                            KC_SPC,                             KC_RCMD,  KC_ROPT),

    [WIN_BASE] = LAYOUT_ansi_60(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS,  KC_EQL,    KC_BSLS, KC_GRV,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC,  KC_RBRC,            KC_DEL,
        KC_LCTL, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT,                      KC_ENT,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH,             KC_RSFT, MO(FUNC),
                           KC_LALT,  KC_LWIN,                            KC_SPC,                             KC_RWIN,  KC_RALT),

    [FUNC] = LAYOUT_ansi_60(
        _______, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,   KC_F12,    _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______, _______,                      _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______, _______,             _______, _______,
                           _______,  _______,                            _______,                            _______,  _______),

    [L3] = LAYOUT_ansi_60(
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,   _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,                      _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,             _______, _______,
                           _______,  _______,                            _______,                            _______,  _______),

    [L4] = LAYOUT_ansi_60(
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,   _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,                      _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,             _______, _______,
                           _______,  _______,                            _______,                            _______,  _______),

    [L5] = LAYOUT_ansi_60(
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,   _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,                      _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,             _______, _______,
                           _______,  _______,                            _______,                            _______,  _______)
};

================
File: q60/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {0, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
     {
         // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 },
        { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, __, 41 },
        { 42, __, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 },
        { 55, 56, __, __, __, __, 57, __, __, __, 58, 59, 14, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},   {16,0},  {32,0},  {48,0},  {64,0},  {80,0},  {96,0},   {112,0},  {128,0},  {144,0},  {160,0},  {176,0},  {192,0},  {208,0},  {224,0},
        {4,16},  {24,16}, {40,16}, {56,16}, {72,16}, {88,16}, {104,16}, {120,16}, {136,16}, {152,16}, {168,16}, {184,16}, {200,16},           {220,16},
        {6,32},  {28,32}, {44,32}, {60,32}, {76,32}, {92,32}, {108,32}, {124,32}, {140,32}, {156,32}, {172,32}, {188,32},                     {214,32},
        {10,48},          {36,48}, {52,48}, {68,48}, {84,48}, {100,48}, {116,48}, {132,48}, {148,48}, {164,48}, {180,48},           {202,48}, {224,48},
                          {24,64}, {44,64},                             {112,64},                               {180,64}, {200,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
              1, 1,          4,          1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q60/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron Q60",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01C0",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_60": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [4, 12], "x": 14, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 13], "x": 13.5, "y": 1, "w": 1.5},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2, "w": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 12], "x": 12.25, "y": 3, "w": 1.75},
                {"matrix": [3, 13], "x": 14, "y": 3},

                {"matrix": [4, 0], "x": 1.5, "y": 4},
                {"matrix": [4, 1], "x": 2.5, "y": 4, "w": 1.5},
                {"matrix": [4, 6], "x": 4, "y": 4, "w": 7},
                {"matrix": [4, 10], "x": 11, "y": 4, "w": 1.5},
                {"matrix": [4, 11], "x": 12.5, "y": 4}
            ]
        }
    }
}

================
File: q60/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0xD8, 0xD8, 0x60, 0xD8, 0xD8, 0x60, 0xD8, 0xD8, 0x60, 0xD8, 0xD8, 0x60 }

#define DYNAMIC_KEYMAP_LAYER_COUNT 6

================
File: q60/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q60/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: q60/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q60/q60.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

================
File: q60/readme.md
================
# Keychron Q60

A customizable 60% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q60
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/q60/ansi:default

Flashing example for this keyboard:

    make keychron/q60/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q65/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_73(
        KC_MUTE, KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_DEL,
        _______, KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_HOME,
        _______, KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_PGUP,
        _______, KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,   KC_PGDN,
        _______, KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_73(
        KC_MUTE, KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_DEL,
        _______, KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_HOME,
        _______, KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_PGUP,
        _______, KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,   KC_PGDN,
        _______, KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_73(
        RM_TOGG, KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        _______, RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______, _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______, _______,
        _______, _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_73(
        RM_TOGG, KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        _______, RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______, _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______, _______,
        _______, _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_73(
        _______, KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        _______, RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______, _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______, _______,
        _______, _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1] = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2] = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3] = { ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q65/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q65/ansi_encoder/ansi_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // Esc
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // 1!
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // 2@
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // 3#
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // 4$
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // 5%
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // 6^
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // 7&
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // 8*
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // 9(
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // 0)
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // -_
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // =+
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // BackSpace
    {0, CB3_CA1,  CB1_CA1,  CB2_CA1},  // Delete

    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // Macro2
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // Tab
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // Q
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // W
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // E
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // R
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // T
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Y
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // U
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // I
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // O
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // P
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // [{
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // ]}
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // |
    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // PageUp

    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // Macro3
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // CapsLock
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // A
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // S
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // D
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // F
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // G
    {1, CB3_CA9,  CB1_CA9,  CB2_CA9},  // H
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // J
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // K
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // L
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // ;:
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // '"
    {1, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Enter
    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // PageDown

    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // Macro4
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // LeftShift
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Z
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // X
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // C
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // V
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // B
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // N
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // M
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // ,<
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // .>
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // /?
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // RightShift
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Up
    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // Home

    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // Macro5
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // LeftControl
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // LeftOption
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // LeftCommand
    {1, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Space
    {1, CB6_CA6,  CB4_CA6,  CB5_CA6},  // RightCommand
    {1, CB6_CA5,  CB4_CA5,  CB5_CA5},  // Fn1
    {1, CB6_CA4,  CB4_CA4,  CB5_CA4},  // Fn2
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { __,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, __, 44, 45 },
        { 46, 47, __, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 },
        { 61, 62, 63, 64, __, __, __, 65, __, __, 66, 67, 68, 69, 70, 71 },
    },
    {
        // LED Index to Physical Position
                {20,0},  {33,0},  {47,0},  {60,0},  {73,0},  {86,0},  {99,0},   {112,0},  {125,0},  {138,0},  {151,0},  {164,0},  {177,0},  {197,0},            {224,0},
        {0,15}, {24,15}, {40,15}, {53,15}, {66,15}, {79,15}, {92,15}, {105,15}, {119,15}, {132,15}, {145,15}, {158,15}, {171,15}, {184,15}, {200,15},           {224,15},
        {0,30}, {25,30}, {43,30}, {56,30}, {69,30}, {83,30}, {96,30}, {109,30}, {122,30}, {135,30}, {148,30}, {161,30}, {174,30},           {195,30},           {224,30},
        {0,45}, {29,45},          {50,45}, {63,45}, {76,45}, {89,45}, {102,45}, {115,45}, {128,45}, {141,45}, {155,45}, {168,45},           {186,45}, {207,49}, {224,45},
        {0,60}, {22,60}, {38,60}, {55,60},                            {104,60},                               {151,60}, {164,60}, {177,60}, {194,64}, {207,64}, {220,64},
    },
    {
        // RGB LED Index to Flag
           1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1,
        1, 1, 1, 1,          4,          1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: q65/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 32

================
File: q65/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron Q65",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x01B1",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "encoder": true,
        "dip_switch": true,
        "rgb_matrix": true
    },
    "layouts": {
        "LAYOUT_ansi_73": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.5, "y": 0.25},
                {"matrix": [0, 2], "x": 2.5, "y": 0.25},
                {"matrix": [0, 3], "x": 3.5, "y": 0.25},
                {"matrix": [0, 4], "x": 4.5, "y": 0.25},
                {"matrix": [0, 5], "x": 5.5, "y": 0.25},
                {"matrix": [0, 6], "x": 6.5, "y": 0.25},
                {"matrix": [0, 7], "x": 7.5, "y": 0.25},
                {"matrix": [0, 8], "x": 8.5, "y": 0.25},
                {"matrix": [0, 9], "x": 9.5, "y": 0.25},
                {"matrix": [0, 10], "x": 10.5, "y": 0.25},
                {"matrix": [0, 11], "x": 11.5, "y": 0.25},
                {"matrix": [0, 12], "x": 12.5, "y": 0.25},
                {"matrix": [0, 13], "x": 13.5, "y": 0.25},
                {"matrix": [0, 14], "x": 14.5, "y": 0.25, "w": 2},
                {"matrix": [0, 15], "x": 17, "y": 0.25},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 2], "x": 3, "y": 1.25},
                {"matrix": [1, 3], "x": 4, "y": 1.25},
                {"matrix": [1, 4], "x": 5, "y": 1.25},
                {"matrix": [1, 5], "x": 6, "y": 1.25},
                {"matrix": [1, 6], "x": 7, "y": 1.25},
                {"matrix": [1, 7], "x": 8, "y": 1.25},
                {"matrix": [1, 8], "x": 9, "y": 1.25},
                {"matrix": [1, 9], "x": 10, "y": 1.25},
                {"matrix": [1, 10], "x": 11, "y": 1.25},
                {"matrix": [1, 11], "x": 12, "y": 1.25},
                {"matrix": [1, 12], "x": 13, "y": 1.25},
                {"matrix": [1, 13], "x": 14, "y": 1.25},
                {"matrix": [1, 14], "x": 15, "y": 1.25, "w": 1.5},
                {"matrix": [1, 15], "x": 17, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25, "w": 1.75},
                {"matrix": [2, 2], "x": 3.25, "y": 2.25},
                {"matrix": [2, 3], "x": 4.25, "y": 2.25},
                {"matrix": [2, 4], "x": 5.25, "y": 2.25},
                {"matrix": [2, 5], "x": 6.25, "y": 2.25},
                {"matrix": [2, 6], "x": 7.25, "y": 2.25},
                {"matrix": [2, 7], "x": 8.25, "y": 2.25},
                {"matrix": [2, 8], "x": 9.25, "y": 2.25},
                {"matrix": [2, 9], "x": 10.25, "y": 2.25},
                {"matrix": [2, 10], "x": 11.25, "y": 2.25},
                {"matrix": [2, 11], "x": 12.25, "y": 2.25},
                {"matrix": [2, 12], "x": 13.25, "y": 2.25},
                {"matrix": [2, 14], "x": 14.25, "y": 2.25, "w": 2.25},
                {"matrix": [2, 15], "x": 17, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25},
                {"matrix": [3, 1], "x": 1.5, "y": 3.25, "w": 2.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 12], "x": 12.75, "y": 3.25},
                {"matrix": [3, 13], "x": 13.75, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17, "y": 3.25},
                {"matrix": [3, 15], "x": 15.75, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 4, "y": 4.25, "w": 1.25},
                {"matrix": [4, 7], "x": 5.25, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 11.5, "y": 4.25},
                {"matrix": [4, 11], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 13.5, "y": 4.25},
                {"matrix": [4, 13], "x": 14.75, "y": 4.5},
                {"matrix": [4, 14], "x": 15.75, "y": 4.5},
                {"matrix": [4, 15], "x": 16.75, "y": 4.5}
            ]
        }
    }
}

================
File: q65/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: q65/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, A2, A3, A4, A5, A6, A7, B0, B1 }

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 30U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0xB8, 0xB8, 0x58, 0xB8, 0xB8, 0x58, 0xB8, 0xB8, 0x58, 0xB8, 0xB8, 0x58 }

#define DYNAMIC_KEYMAP_LAYER_COUNT 5

================
File: q65/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q65/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: q65/matrix.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN C15
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN A1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN A0

#ifdef MATRIX_ROW_PINS
static const pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static const pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_write_pin_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_write_pin_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

// At 3.6V input, three nops (37.5ns) should be enough for all signals
#define small_delay() __asm__ __volatile__("nop;nop;nop;\n\t" ::: "memory")
#define compiler_barrier() __asm__ __volatile__("" ::: "memory")

static void shiftOut(uint8_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < 8; i++) {
            compiler_barrier();
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN);
            } else {
                gpio_write_pin_low(DATA_PIN);
            }
            dataOut = dataOut >> 1;
            compiler_barrier();
            gpio_write_pin_high(CLOCK_PIN);
            small_delay();
            gpio_write_pin_low(CLOCK_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static void shiftout_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        compiler_barrier();
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN);
        } else {
            gpio_write_pin_low(DATA_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(CLOCK_PIN);
        small_delay();
        gpio_write_pin_low(CLOCK_PIN);
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_write_pin_low(pin);
#else
        gpio_atomic_set_pin_output_low(pin);
#endif
        return true;
    } else {
        if (col == 0) {
            shiftout_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_write_pin_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftout_single(0x01);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == 0)
                // unselect shift Register
                shiftOut(0xFF);
        }
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN);
    gpio_set_pin_output(CLOCK_PIN);
    gpio_set_pin_output(LATCH_PIN);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: q65/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q65/q65.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif  // DIP_SWITCH_ENABLE

// clang-format on
#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q65/readme.md
================
# Keychron Q65

A customizable 65% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q65
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/q65/ansi_encoder:default

Flashing example for this keyboard:

    make keychron/q65/ansi_encoder:default:flash

**Reset Key**: Hold down the key located at *K01*, which programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q7/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_72(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,  KC_BSLS,           KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,           KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  KC_RCTL, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_72(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,  KC_BSLS,           KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,           KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LGUI,  KC_LALT,                             KC_SPC,                             KC_RALT,  KC_RCTL, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_72(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD, KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_72(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD, KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_72(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,  KC_F12,   _______,           _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______)
};

================
File: q7/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif // RGB_MATRIX_ENABLE

================
File: q7/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 32

================
File: q7/ansi/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 14, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 28, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 56, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 70, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 98, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 112, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 126, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 140, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 189, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 210, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 16, "flags": 1},
            {"matrix": [1, 1], "x": 21, "y": 16, "flags": 4},
            {"matrix": [1, 2], "x": 35, "y": 16, "flags": 4},
            {"matrix": [1, 3], "x": 49, "y": 16, "flags": 4},
            {"matrix": [1, 4], "x": 63, "y": 16, "flags": 4},
            {"matrix": [1, 5], "x": 77, "y": 16, "flags": 4},
            {"matrix": [1, 6], "x": 91, "y": 16, "flags": 4},
            {"matrix": [1, 7], "x": 105, "y": 16, "flags": 4},
            {"matrix": [1, 8], "x": 119, "y": 16, "flags": 4},
            {"matrix": [1, 9], "x": 133, "y": 16, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 16, "flags": 4},
            {"matrix": [1, 11], "x": 161, "y": 16, "flags": 4},
            {"matrix": [1, 12], "x": 175, "y": 16, "flags": 4},
            {"matrix": [1, 13], "x": 192, "y": 16, "flags": 4},
            {"matrix": [1, 14], "x": 210, "y": 16, "flags": 1},
            {"matrix": [1, 15], "x": 224, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 5, "y": 32, "flags": 8},
            {"matrix": [2, 1], "x": 25, "y": 32, "flags": 4},
            {"matrix": [2, 2], "x": 38, "y": 32, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 32, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 32, "flags": 4},
            {"matrix": [2, 5], "x": 80, "y": 32, "flags": 4},
            {"matrix": [2, 6], "x": 94, "y": 32, "flags": 4},
            {"matrix": [2, 7], "x": 108, "y": 32, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 32, "flags": 4},
            {"matrix": [2, 9], "x": 136, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 32, "flags": 4},
            {"matrix": [2, 11], "x": 164, "y": 32, "flags": 4},
            {"matrix": [2, 13], "x": 187, "y": 32, "flags": 1},
            {"matrix": [2, 14], "x": 210, "y": 32, "flags": 1},
            {"matrix": [2, 15], "x": 224, "y": 32, "flags": 1},

            {"matrix": [3, 0], "x": 9, "y": 48, "flags": 1},
            {"matrix": [3, 2], "x": 32, "y": 48, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 48, "flags": 4},
            {"matrix": [3, 4], "x": 59, "y": 48, "flags": 4},
            {"matrix": [3, 5], "x": 73, "y": 48, "flags": 4},
            {"matrix": [3, 6], "x": 87, "y": 48, "flags": 4},
            {"matrix": [3, 7], "x": 101, "y": 48, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 48, "flags": 4},
            {"matrix": [3, 9], "x": 129, "y": 48, "flags": 4},
            {"matrix": [3, 10], "x": 143, "y": 48, "flags": 4},
            {"matrix": [3, 11], "x": 157, "y": 48, "flags": 4},
            {"matrix": [3, 13], "x": 184, "y": 48, "flags": 1},
            {"matrix": [3, 14], "x": 210, "y": 48, "flags": 1},
            {"matrix": [3, 15], "x": 224, "y": 48, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 19, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 89, "y": 64, "flags": 4},
            {"matrix": [4, 9], "x": 140, "y": 64, "flags": 1},
            {"matrix": [4, 10], "x": 154, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 168, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 182, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 196, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 210, "y": 64, "flags": 1},
            {"matrix": [4, 15], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0170"
    },
    "layouts": {
        "LAYOUT_ansi_72": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},
                {"matrix": [0, 14], "x": 15, "y": 0},
                {"matrix": [0, 15], "x": 16, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 13], "x": 13.5, "y": 1, "w": 1.5},
                {"matrix": [1, 14], "x": 15, "y": 1},
                {"matrix": [1, 15], "x": 16, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2, "w": 2.25},
                {"matrix": [2, 14], "x": 15, "y": 2},
                {"matrix": [2, 15], "x": 16, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},
                {"matrix": [3, 14], "x": 15, "y": 3},
                {"matrix": [3, 15], "x": 16, "y": 3},
                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 9], "x": 10, "y": 4},
                {"matrix": [4, 10], "x": 11, "y": 4},
                {"matrix": [4, 11], "x": 12, "y": 4},
                {"matrix": [4, 12], "x": 13, "y": 4},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},
                {"matrix": [4, 15], "x": 16, "y": 4}
            ]
        }
    }
}

================
File: q7/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_73(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,                     KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT, KC_NUHS,  KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  KC_RCTL, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_73(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,                     KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT, KC_NUHS,  KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LGUI,  KC_LALT,                             KC_SPC,                             KC_RALT,  KC_RCTL, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_73(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD, KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_73(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD, KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_73(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,  KC_F12,   _______,           _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______)
};

================
File: q7/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 31

================
File: q7/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#endif // RGB_MATRIX_ENABLE

================
File: q7/iso/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 14, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 28, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 42, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 56, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 70, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 84, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 98, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 112, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 126, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 140, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 189, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 210, "y": 0, "flags": 1},
            {"matrix": [0, 15], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 16, "flags": 1},
            {"matrix": [1, 1], "x": 21, "y": 16, "flags": 4},
            {"matrix": [1, 2], "x": 35, "y": 16, "flags": 4},
            {"matrix": [1, 3], "x": 49, "y": 16, "flags": 4},
            {"matrix": [1, 4], "x": 63, "y": 16, "flags": 4},
            {"matrix": [1, 5], "x": 77, "y": 16, "flags": 4},
            {"matrix": [1, 6], "x": 91, "y": 16, "flags": 4},
            {"matrix": [1, 7], "x": 105, "y": 16, "flags": 4},
            {"matrix": [1, 8], "x": 119, "y": 16, "flags": 4},
            {"matrix": [1, 9], "x": 133, "y": 16, "flags": 4},
            {"matrix": [1, 10], "x": 147, "y": 16, "flags": 4},
            {"matrix": [1, 11], "x": 161, "y": 16, "flags": 4},
            {"matrix": [1, 12], "x": 175, "y": 16, "flags": 4},
            {"matrix": [1, 14], "x": 210, "y": 16, "flags": 1},
            {"matrix": [1, 15], "x": 224, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 5, "y": 32, "flags": 8},
            {"matrix": [2, 1], "x": 25, "y": 32, "flags": 4},
            {"matrix": [2, 2], "x": 38, "y": 32, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 32, "flags": 4},
            {"matrix": [2, 4], "x": 66, "y": 32, "flags": 4},
            {"matrix": [2, 5], "x": 80, "y": 32, "flags": 4},
            {"matrix": [2, 6], "x": 94, "y": 32, "flags": 4},
            {"matrix": [2, 7], "x": 108, "y": 32, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 32, "flags": 4},
            {"matrix": [2, 9], "x": 136, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 32, "flags": 4},
            {"matrix": [2, 11], "x": 164, "y": 32, "flags": 4},
            {"matrix": [2, 13], "x": 178, "y": 32, "flags": 4},
            {"matrix": [1, 13], "x": 197, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 210, "y": 32, "flags": 1},
            {"matrix": [2, 15], "x": 224, "y": 32, "flags": 1},

            {"matrix": [3, 0], "x": 2, "y": 48, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 48, "flags": 4},
            {"matrix": [3, 2], "x": 32, "y": 48, "flags": 4},
            {"matrix": [3, 3], "x": 45, "y": 48, "flags": 4},
            {"matrix": [3, 4], "x": 59, "y": 48, "flags": 4},
            {"matrix": [3, 5], "x": 73, "y": 48, "flags": 4},
            {"matrix": [3, 6], "x": 87, "y": 48, "flags": 4},
            {"matrix": [3, 7], "x": 101, "y": 48, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 48, "flags": 4},
            {"matrix": [3, 9], "x": 129, "y": 48, "flags": 4},
            {"matrix": [3, 10], "x": 143, "y": 48, "flags": 4},
            {"matrix": [3, 11], "x": 157, "y": 48, "flags": 4},
            {"matrix": [3, 13], "x": 184, "y": 48, "flags": 1},
            {"matrix": [3, 14], "x": 210, "y": 48, "flags": 1},
            {"matrix": [3, 15], "x": 224, "y": 48, "flags": 1},

            {"matrix": [4, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [4, 1], "x": 19, "y": 64, "flags": 1},
            {"matrix": [4, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [4, 6], "x": 89, "y": 64, "flags": 4},
            {"matrix": [4, 9], "x": 140, "y": 64, "flags": 1},
            {"matrix": [4, 10], "x": 154, "y": 64, "flags": 1},
            {"matrix": [4, 11], "x": 168, "y": 64, "flags": 1},
            {"matrix": [4, 12], "x": 182, "y": 64, "flags": 1},
            {"matrix": [4, 13], "x": 196, "y": 64, "flags": 1},
            {"matrix": [4, 14], "x": 210, "y": 64, "flags": 1},
            {"matrix": [4, 15], "x": 224, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0172"
    },
    "layouts": {
        "LAYOUT_iso_73": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},
                {"matrix": [0, 14], "x": 15, "y": 0},
                {"matrix": [0, 15], "x": 16, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 14], "x": 15, "y": 1},
                {"matrix": [1, 15], "x": 16, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2},
                {"matrix": [1, 13], "x": 13.75, "y": 1, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15, "y": 2},
                {"matrix": [2, 15], "x": 16, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},
                {"matrix": [3, 14], "x": 15, "y": 3},
                {"matrix": [3, 15], "x": 16, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 9], "x": 10, "y": 4},
                {"matrix": [4, 10], "x": 11, "y": 4},
                {"matrix": [4, 11], "x": 12, "y": 4},
                {"matrix": [4, 12], "x": 13, "y": 4},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},
                {"matrix": [4, 15], "x": 16, "y": 4}
            ]
        }
    }
}

================
File: q7/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0xF8, 0xF8, 0x80, 0xF8, 0xF8, 0x80, 0xF8, 0xF8, 0x80, 0xF8, 0xF8, 0x80 }

================
File: q7/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q7/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q7",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "dynamic_keymap": {
        "layer_count": 5
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "B5"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q7/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q7/q7.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q7/readme.md
================
# Keychron Q7

![Keychron Q7](https://i.imgur.com/dMnFpx0h.jpg)

A customizable 70% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q7
* Hardware Availability: [Keychron Q7 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q7-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q7/ansi:default
    make keychron/q7/iso:default

Flashing example for this keyboard:

    make keychron/q7/ansi:default:flash
    make keychron/q7/iso:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q8/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_ansi_69(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

================
File: q8/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    // {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#endif // RGB_MATRIX_ENABLE

================
File: q8/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q8/ansi/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 7, "y": 1, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 1, "flags": 4},
            {"matrix": [0, 2], "x": 33, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 3, "flags": 4},
            {"matrix": [0, 4], "x": 61, "y": 6, "flags": 4},
            {"matrix": [0, 5], "x": 74, "y": 8, "flags": 4},
            {"matrix": [0, 6], "x": 87, "y": 11, "flags": 4},
            {"matrix": [0, 7], "x": 106, "y": 11, "flags": 4},
            {"matrix": [0, 8], "x": 119, "y": 8, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 6, "flags": 4},
            {"matrix": [0, 10], "x": 145, "y": 3, "flags": 4},
            {"matrix": [0, 11], "x": 160, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 173, "y": 1, "flags": 4},
            {"matrix": [0, 13], "x": 193, "y": 1, "flags": 1},
            {"matrix": [0, 14], "x": 220, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 7, "y": 14, "flags": 1},
            {"matrix": [1, 1], "x": 24, "y": 14, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 14, "flags": 4},
            {"matrix": [1, 3], "x": 52, "y": 17, "flags": 4},
            {"matrix": [1, 4], "x": 65, "y": 20, "flags": 4},
            {"matrix": [1, 5], "x": 78, "y": 22, "flags": 4},
            {"matrix": [1, 6], "x": 103, "y": 25, "flags": 4},
            {"matrix": [1, 7], "x": 116, "y": 22, "flags": 4},
            {"matrix": [1, 8], "x": 129, "y": 20, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 17, "flags": 4},
            {"matrix": [1, 10], "x": 155, "y": 14, "flags": 4},
            {"matrix": [1, 11], "x": 170, "y": 14, "flags": 4},
            {"matrix": [1, 12], "x": 183, "y": 14, "flags": 4},
            {"matrix": [1, 13], "x": 200, "y": 14, "flags": 4},
            {"matrix": [1, 14], "x": 222, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 27, "flags": 8},
            {"matrix": [2, 1], "x": 24, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 39, "y": 28, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 65, "y": 33, "flags": 4},
            {"matrix": [2, 5], "x": 78, "y": 36, "flags": 4},
            {"matrix": [2, 7], "x": 109, "y": 37, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 148, "y": 29, "flags": 4},
            {"matrix": [2, 11], "x": 162, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 176, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 197, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 29, "flags": 1},

            {"matrix": [3, 0], "x": 7, "y": 40, "flags": 1},
            {"matrix": [3, 2], "x": 28, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 43, "y": 42, "flags": 4},
            {"matrix": [3, 4], "x": 56, "y": 44, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 47, "flags": 4},
            {"matrix": [3, 6], "x": 82, "y": 50, "flags": 4},
            {"matrix": [3, 7], "x": 102, "y": 52, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 128, "y": 46, "flags": 4},
            {"matrix": [3, 10], "x": 141, "y": 44, "flags": 4},
            {"matrix": [3, 11], "x": 154, "y": 41, "flags": 4},
            {"matrix": [3, 12], "x": 169, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 40, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 43, "flags": 1},

            {"matrix": [4, 0], "x": 0, "y": 53, "flags": 1},
            {"matrix": [4, 1], "x": 17, "y": 53, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 55, "flags": 1},
            {"matrix": [4, 3], "x": 65, "y": 60, "flags": 4},
            {"matrix": [4, 6], "x": 86, "y": 64, "flags": 1},
            {"matrix": [4, 7], "x": 107, "y": 64, "flags": 1},
            {"matrix": [4, 8], "x": 131, "y": 59, "flags": 4},
            {"matrix": [4, 9], "x": 156, "y": 54, "flags": 1},
            {"matrix": [4, 12], "x": 196, "y": 56, "flags": 1},
            {"matrix": [4, 13], "x": 209, "y": 56, "flags": 1},
            {"matrix": [4, 14], "x": 222, "y": 56, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0180"
    },
    "layouts": {
        "LAYOUT_ansi_69": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 13], "x": 16.25, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.75, "y": 2.25},
                {"matrix": [2, 12], "x": 14.75, "y": 2.25},
                {"matrix": [2, 13], "x": 15.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: q8/ansi/readme.md
================
# The ANSI variant of the Keychron Q8

================
File: q8/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_ansi_69(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q8/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q8/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    // {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#endif // RGB_MATRIX_ENABLE

================
File: q8/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: q8/ansi_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "B5", "pin_b": "A10"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 7, "y": 1, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 1, "flags": 4},
            {"matrix": [0, 2], "x": 33, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 3, "flags": 4},
            {"matrix": [0, 4], "x": 61, "y": 6, "flags": 4},
            {"matrix": [0, 5], "x": 74, "y": 8, "flags": 4},
            {"matrix": [0, 6], "x": 87, "y": 11, "flags": 4},
            {"matrix": [0, 7], "x": 106, "y": 11, "flags": 4},
            {"matrix": [0, 8], "x": 119, "y": 8, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 6, "flags": 4},
            {"matrix": [0, 10], "x": 145, "y": 3, "flags": 4},
            {"matrix": [0, 11], "x": 160, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 173, "y": 1, "flags": 4},
            {"matrix": [0, 13], "x": 193, "y": 1, "flags": 1},
            {"matrix": [0, 14], "x": 220, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 7, "y": 14, "flags": 1},
            {"matrix": [1, 1], "x": 24, "y": 14, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 14, "flags": 4},
            {"matrix": [1, 3], "x": 52, "y": 17, "flags": 4},
            {"matrix": [1, 4], "x": 65, "y": 20, "flags": 4},
            {"matrix": [1, 5], "x": 78, "y": 22, "flags": 4},
            {"matrix": [1, 6], "x": 103, "y": 25, "flags": 4},
            {"matrix": [1, 7], "x": 116, "y": 22, "flags": 4},
            {"matrix": [1, 8], "x": 129, "y": 20, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 17, "flags": 4},
            {"matrix": [1, 10], "x": 155, "y": 14, "flags": 4},
            {"matrix": [1, 11], "x": 170, "y": 14, "flags": 4},
            {"matrix": [1, 12], "x": 183, "y": 14, "flags": 4},
            {"matrix": [1, 13], "x": 200, "y": 14, "flags": 4},
            {"matrix": [1, 14], "x": 222, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 27, "flags": 8},
            {"matrix": [2, 1], "x": 24, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 39, "y": 28, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 65, "y": 33, "flags": 4},
            {"matrix": [2, 5], "x": 78, "y": 36, "flags": 4},
            {"matrix": [2, 7], "x": 109, "y": 37, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 32, "flags": 4},
            {"matrix": [2, 10], "x": 148, "y": 29, "flags": 4},
            {"matrix": [2, 11], "x": 162, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 176, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 197, "y": 27, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 29, "flags": 1},

            {"matrix": [3, 0], "x": 7, "y": 40, "flags": 1},
            {"matrix": [3, 2], "x": 28, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 43, "y": 42, "flags": 4},
            {"matrix": [3, 4], "x": 56, "y": 44, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 47, "flags": 4},
            {"matrix": [3, 6], "x": 82, "y": 50, "flags": 4},
            {"matrix": [3, 7], "x": 102, "y": 52, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 128, "y": 46, "flags": 4},
            {"matrix": [3, 10], "x": 141, "y": 44, "flags": 4},
            {"matrix": [3, 11], "x": 154, "y": 41, "flags": 4},
            {"matrix": [3, 12], "x": 169, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 40, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 43, "flags": 1},

            {"matrix": [4, 0], "x": 0, "y": 53, "flags": 1},
            {"matrix": [4, 1], "x": 17, "y": 53, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 55, "flags": 1},
            {"matrix": [4, 3], "x": 65, "y": 60, "flags": 4},
            {"matrix": [4, 6], "x": 86, "y": 64, "flags": 1},
            {"matrix": [4, 7], "x": 107, "y": 64, "flags": 1},
            {"matrix": [4, 8], "x": 131, "y": 59, "flags": 4},
            {"matrix": [4, 9], "x": 156, "y": 54, "flags": 1},
            {"matrix": [4, 12], "x": 196, "y": 56, "flags": 1},
            {"matrix": [4, 13], "x": 209, "y": 56, "flags": 1},
            {"matrix": [4, 14], "x": 222, "y": 56, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0181"
    },
    "layouts": {
        "LAYOUT_ansi_69": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 13], "x": 16.25, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.75, "y": 2.25},
                {"matrix": [2, 12], "x": 14.75, "y": 2.25},
                {"matrix": [2, 13], "x": 15.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},
                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: q8/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q8

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q8/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_iso_70(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

================
File: q8/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: q8/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#endif // RGB_MATRIX_ENABLE

================
File: q8/iso/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 7, "y": 1, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 1, "flags": 4},
            {"matrix": [0, 2], "x": 33, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 3, "flags": 4},
            {"matrix": [0, 4], "x": 61, "y": 6, "flags": 4},
            {"matrix": [0, 5], "x": 74, "y": 8, "flags": 4},
            {"matrix": [0, 6], "x": 87, "y": 11, "flags": 4},
            {"matrix": [0, 7], "x": 106, "y": 11, "flags": 4},
            {"matrix": [0, 8], "x": 119, "y": 8, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 6, "flags": 4},
            {"matrix": [0, 10], "x": 145, "y": 3, "flags": 4},
            {"matrix": [0, 11], "x": 160, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 173, "y": 1, "flags": 4},
            {"matrix": [0, 13], "x": 193, "y": 1, "flags": 1},
            {"matrix": [0, 14], "x": 220, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 7, "y": 14, "flags": 1},
            {"matrix": [1, 1], "x": 24, "y": 14, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 14, "flags": 4},
            {"matrix": [1, 3], "x": 52, "y": 17, "flags": 4},
            {"matrix": [1, 4], "x": 65, "y": 19, "flags": 4},
            {"matrix": [1, 5], "x": 78, "y": 22, "flags": 4},
            {"matrix": [1, 6], "x": 103, "y": 25, "flags": 4},
            {"matrix": [1, 7], "x": 116, "y": 22, "flags": 4},
            {"matrix": [1, 8], "x": 129, "y": 20, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 17, "flags": 4},
            {"matrix": [1, 10], "x": 155, "y": 14, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 14, "flags": 4},
            {"matrix": [1, 12], "x": 186, "y": 14, "flags": 4},
            {"matrix": [1, 14], "x": 222, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 27, "flags": 8},
            {"matrix": [2, 1], "x": 24, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 39, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 65, "y": 33, "flags": 4},
            {"matrix": [2, 5], "x": 78, "y": 35, "flags": 4},
            {"matrix": [2, 7], "x": 109, "y": 37, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 31, "flags": 4},
            {"matrix": [2, 10], "x": 148, "y": 29, "flags": 4},
            {"matrix": [2, 11], "x": 162, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 176, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 189, "y": 27, "flags": 4},
            {"matrix": [1, 13], "x": 207, "y": 22, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 29, "flags": 1},

            {"matrix": [3, 0], "x": 0, "y": 40, "flags": 1},
            {"matrix": [3, 1], "x": 15, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 28, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 43, "y": 41, "flags": 4},
            {"matrix": [3, 4], "x": 56, "y": 44, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 47, "flags": 4},
            {"matrix": [3, 6], "x": 82, "y": 49, "flags": 4},
            {"matrix": [3, 7], "x": 102, "y": 51, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 128, "y": 46, "flags": 4},
            {"matrix": [3, 10], "x": 141, "y": 43, "flags": 4},
            {"matrix": [3, 11], "x": 154, "y": 41, "flags": 4},
            {"matrix": [3, 12], "x": 169, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 40, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 43, "flags": 1},

            {"matrix": [4, 0], "x": 0, "y": 52, "flags": 1},
            {"matrix": [4, 1], "x": 17, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 54, "flags": 1},
            {"matrix": [4, 3], "x": 65, "y": 59, "flags": 1},
            {"matrix": [4, 6], "x": 86, "y": 63, "flags": 1},
            {"matrix": [4, 7], "x": 104, "y": 64, "flags": 1},
            {"matrix": [4, 8], "x": 129, "y": 59, "flags": 1},
            {"matrix": [4, 9], "x": 153, "y": 54, "flags": 1},
            {"matrix": [4, 12], "x": 196, "y": 56, "flags": 1},
            {"matrix": [4, 13], "x": 209, "y": 56, "flags": 1},
            {"matrix": [4, 14], "x": 222, "y": 59, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0182"
    },
    "layouts": {
        "LAYOUT_iso_70": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0.25},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.5, "y": 2.25},
                {"matrix": [2, 12], "x": 14.5, "y": 2.25},
                {"matrix": [2, 13], "x": 15.5, "y": 2.25},
                {"matrix": [1, 13], "x": 16.5, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},
                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: q8/iso/readme.md
================
# The ISO variant of the Keychron Q8

================
File: q8/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,     KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,     KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,     KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,     KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),          KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,     KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,     KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,     KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,     KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),          KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV,  KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV,  KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_iso_70(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,    KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q8/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q8/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: q8/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#endif // RGB_MATRIX_ENABLE

================
File: q8/iso_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "B5", "pin_b": "A10"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 7, "y": 1, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 1, "flags": 4},
            {"matrix": [0, 2], "x": 33, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 48, "y": 3, "flags": 4},
            {"matrix": [0, 4], "x": 61, "y": 6, "flags": 4},
            {"matrix": [0, 5], "x": 74, "y": 8, "flags": 4},
            {"matrix": [0, 6], "x": 87, "y": 11, "flags": 4},
            {"matrix": [0, 7], "x": 106, "y": 11, "flags": 4},
            {"matrix": [0, 8], "x": 119, "y": 8, "flags": 4},
            {"matrix": [0, 9], "x": 132, "y": 6, "flags": 4},
            {"matrix": [0, 10], "x": 145, "y": 3, "flags": 4},
            {"matrix": [0, 11], "x": 160, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 173, "y": 1, "flags": 4},
            {"matrix": [0, 13], "x": 193, "y": 1, "flags": 1},
            {"matrix": [0, 14], "x": 220, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 7, "y": 14, "flags": 1},
            {"matrix": [1, 1], "x": 24, "y": 14, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 14, "flags": 4},
            {"matrix": [1, 3], "x": 52, "y": 17, "flags": 4},
            {"matrix": [1, 4], "x": 65, "y": 19, "flags": 4},
            {"matrix": [1, 5], "x": 78, "y": 22, "flags": 4},
            {"matrix": [1, 6], "x": 103, "y": 25, "flags": 4},
            {"matrix": [1, 7], "x": 116, "y": 22, "flags": 4},
            {"matrix": [1, 8], "x": 129, "y": 20, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 17, "flags": 4},
            {"matrix": [1, 10], "x": 155, "y": 14, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 14, "flags": 4},
            {"matrix": [1, 12], "x": 186, "y": 14, "flags": 4},
            {"matrix": [1, 14], "x": 222, "y": 16, "flags": 1},

            {"matrix": [2, 0], "x": 6, "y": 27, "flags": 8},
            {"matrix": [2, 1], "x": 24, "y": 27, "flags": 4},
            {"matrix": [2, 2], "x": 39, "y": 27, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 30, "flags": 4},
            {"matrix": [2, 4], "x": 65, "y": 33, "flags": 4},
            {"matrix": [2, 5], "x": 78, "y": 35, "flags": 4},
            {"matrix": [2, 7], "x": 109, "y": 37, "flags": 4},
            {"matrix": [2, 8], "x": 122, "y": 34, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 31, "flags": 4},
            {"matrix": [2, 10], "x": 148, "y": 29, "flags": 4},
            {"matrix": [2, 11], "x": 162, "y": 27, "flags": 4},
            {"matrix": [2, 12], "x": 176, "y": 27, "flags": 4},
            {"matrix": [2, 13], "x": 189, "y": 27, "flags": 4},
            {"matrix": [1, 13], "x": 207, "y": 22, "flags": 1},
            {"matrix": [2, 14], "x": 224, "y": 29, "flags": 1},

            {"matrix": [3, 0], "x": 0, "y": 40, "flags": 1},
            {"matrix": [3, 1], "x": 15, "y": 40, "flags": 4},
            {"matrix": [3, 2], "x": 28, "y": 40, "flags": 4},
            {"matrix": [3, 3], "x": 43, "y": 41, "flags": 4},
            {"matrix": [3, 4], "x": 56, "y": 44, "flags": 4},
            {"matrix": [3, 5], "x": 69, "y": 47, "flags": 4},
            {"matrix": [3, 6], "x": 82, "y": 49, "flags": 4},
            {"matrix": [3, 7], "x": 102, "y": 51, "flags": 4},
            {"matrix": [3, 8], "x": 115, "y": 49, "flags": 4},
            {"matrix": [3, 9], "x": 128, "y": 46, "flags": 4},
            {"matrix": [3, 10], "x": 141, "y": 43, "flags": 4},
            {"matrix": [3, 11], "x": 154, "y": 41, "flags": 4},
            {"matrix": [3, 12], "x": 169, "y": 40, "flags": 4},
            {"matrix": [3, 13], "x": 187, "y": 40, "flags": 1},
            {"matrix": [3, 14], "x": 209, "y": 43, "flags": 1},

            {"matrix": [4, 0], "x": 0, "y": 52, "flags": 1},
            {"matrix": [4, 1], "x": 17, "y": 52, "flags": 1},
            {"matrix": [4, 2], "x": 42, "y": 54, "flags": 1},
            {"matrix": [4, 3], "x": 65, "y": 59, "flags": 1},
            {"matrix": [4, 6], "x": 86, "y": 63, "flags": 1},
            {"matrix": [4, 7], "x": 104, "y": 64, "flags": 1},
            {"matrix": [4, 8], "x": 129, "y": 59, "flags": 1},
            {"matrix": [4, 9], "x": 153, "y": 54, "flags": 1},
            {"matrix": [4, 12], "x": 196, "y": 56, "flags": 1},
            {"matrix": [4, 13], "x": 209, "y": 56, "flags": 1},
            {"matrix": [4, 14], "x": 222, "y": 59, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0183"
    },
    "layouts": {
        "LAYOUT_iso_70": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0.25},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.5, "y": 2.25},
                {"matrix": [2, 12], "x": 14.5, "y": 2.25},
                {"matrix": [2, 13], "x": 15.5, "y": 2.25},
                {"matrix": [1, 13], "x": 16.5, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: q8/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q8

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q8/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60 }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

================
File: q8/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q8/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q8",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "dynamic_keymap": {
        "layer_count": 5
    },
    "eeprom": {
        "wear_levling": {
            "backing_size": 4096
        }  
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q8/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q8/q8.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q8/readme.md
================
# Keychron Q8

![Keychron Q8](https://i.imgur.com/FQnOwRrh.jpg)

A customizable 65% Alice layout keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q8
* Hardware Availability: [Keychron Q8 (Alice Layout) QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q8-alice-layout-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q8/ansi:default
    make keychron/q8/ansi_encoder:default
    make keychron/q8/iso:default
    make keychron/q8/iso_encoder:default

Flashing example for this keyboard:

    make keychron/q8/ansi:default:flash
    make keychron/q8/ansi_encoder:default:flash
    make keychron/q8/iso:default:flash
    make keychron/q8/iso_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q9/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_52(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_52(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_52(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_52(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_52(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   KC_BSPC,          _______,
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

================
File: q9/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},

    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},

    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4}
};

#endif // RGB_MATRIX_ENABLE

================
File: q9/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 15

================
File: q9/ansi/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 2, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 35, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 50, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 80, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 94, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 109, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 139, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 183, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 202, "y": 0, "flags": 4},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 21, "flags": 8},
            {"matrix": [1, 1], "x": 24, "y": 21, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 21, "flags": 4},
            {"matrix": [1, 3], "x": 54, "y": 21, "flags": 4},
            {"matrix": [1, 4], "x": 68, "y": 21, "flags": 4},
            {"matrix": [1, 5], "x": 83, "y": 21, "flags": 4},
            {"matrix": [1, 6], "x": 98, "y": 21, "flags": 4},
            {"matrix": [1, 7], "x": 113, "y": 21, "flags": 4},
            {"matrix": [1, 8], "x": 128, "y": 21, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 21, "flags": 4},
            {"matrix": [1, 10], "x": 157, "y": 21, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 21, "flags": 4},
            {"matrix": [1, 13], "x": 196, "y": 21, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 27, "flags": 1},

            {"matrix": [2, 0], "x": 7, "y": 43, "flags": 1},
            {"matrix": [2, 2], "x": 31, "y": 43, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 43, "flags": 4},
            {"matrix": [2, 4], "x": 61, "y": 43, "flags": 4},
            {"matrix": [2, 5], "x": 76, "y": 43, "flags": 4},
            {"matrix": [2, 6], "x": 91, "y": 43, "flags": 4},
            {"matrix": [2, 7], "x": 105, "y": 43, "flags": 4},
            {"matrix": [2, 8], "x": 120, "y": 43, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 43, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 43, "flags": 4},
            {"matrix": [2, 11], "x": 165, "y": 43, "flags": 4},
            {"matrix": [2, 13], "x": 185, "y": 43, "flags": 1},
            {"matrix": [2, 14], "x": 205, "y": 43, "flags": 1},

            {"matrix": [3, 0], "x": 0, "y": 64, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [3, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [3, 6], "x": 92, "y": 64, "flags": 4},
            {"matrix": [3, 10], "x": 146, "y": 64, "flags": 1},
            {"matrix": [3, 11], "x": 161, "y": 64, "flags": 1},
            {"matrix": [3, 12], "x": 176, "y": 64, "flags": 1},
            {"matrix": [3, 13], "x": 190, "y": 64, "flags": 1},
            {"matrix": [3, 14], "x": 205, "y": 64, "flags": 1},
            {"matrix": [1, 12], "x": 220, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0190"
    },
    "layouts": {
        "LAYOUT_ansi_52": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25, "w": 1.5},
                {"matrix": [0, 1], "x": 1.5, "y": 0.25},
                {"matrix": [0, 2], "x": 2.5, "y": 0.25},
                {"matrix": [0, 3], "x": 3.5, "y": 0.25},
                {"matrix": [0, 4], "x": 4.5, "y": 0.25},
                {"matrix": [0, 5], "x": 5.5, "y": 0.25},
                {"matrix": [0, 6], "x": 6.5, "y": 0.25},
                {"matrix": [0, 7], "x": 7.5, "y": 0.25},
                {"matrix": [0, 8], "x": 8.5, "y": 0.25},
                {"matrix": [0, 9], "x": 9.5, "y": 0.25},
                {"matrix": [0, 10], "x": 10.5, "y": 0.25},
                {"matrix": [0, 11], "x": 11.5, "y": 0.25},
                {"matrix": [0, 12], "x": 12.5, "y": 0.25},
                {"matrix": [0, 13], "x": 13.5, "y": 0.25, "w": 1.5},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.75},
                {"matrix": [1, 1], "x": 1.75, "y": 1.25},
                {"matrix": [1, 2], "x": 2.75, "y": 1.25},
                {"matrix": [1, 3], "x": 3.75, "y": 1.25},
                {"matrix": [1, 4], "x": 4.75, "y": 1.25},
                {"matrix": [1, 5], "x": 5.75, "y": 1.25},
                {"matrix": [1, 6], "x": 6.75, "y": 1.25},
                {"matrix": [1, 7], "x": 7.75, "y": 1.25},
                {"matrix": [1, 8], "x": 8.75, "y": 1.25},
                {"matrix": [1, 9], "x": 9.75, "y": 1.25},
                {"matrix": [1, 10], "x": 10.75, "y": 1.25},
                {"matrix": [1, 11], "x": 11.75, "y": 1.25},
                {"matrix": [1, 13], "x": 12.75, "y": 1.25, "w": 2.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 2.25},
                {"matrix": [2, 2], "x": 2.25, "y": 2.25},
                {"matrix": [2, 3], "x": 3.25, "y": 2.25},
                {"matrix": [2, 4], "x": 4.25, "y": 2.25},
                {"matrix": [2, 5], "x": 5.25, "y": 2.25},
                {"matrix": [2, 6], "x": 6.25, "y": 2.25},
                {"matrix": [2, 7], "x": 7.25, "y": 2.25},
                {"matrix": [2, 8], "x": 8.25, "y": 2.25},
                {"matrix": [2, 9], "x": 9.25, "y": 2.25},
                {"matrix": [2, 10], "x": 10.25, "y": 2.25},
                {"matrix": [2, 11], "x": 11.25, "y": 2.25},
                {"matrix": [2, 13], "x": 12.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 14], "x": 14.25, "y": 2.5},
                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25, "w": 1.25},
                {"matrix": [3, 2], "x": 2.5, "y": 3.25, "w": 1.25},
                {"matrix": [3, 6], "x": 3.75, "y": 3.25, "w": 6.25},
                {"matrix": [3, 10], "x": 10, "y": 3.25},
                {"matrix": [3, 11], "x": 11, "y": 3.25},
                {"matrix": [3, 12], "x": 12, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.5},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},
                {"matrix": [1, 12], "x": 15.25, "y": 3.5}
            ]
        }
    }
}

================
File: q9/ansi/readme.md
================
# The ANSI variant of the Keychron Q9

================
File: q9/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_52(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_52(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_52(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_52(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_52(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   KC_BSPC,          _______,
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q9/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q9/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},

    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},

    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4}
};

#endif // RGB_MATRIX_ENABLE

================
File: q9/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 15

================
File: q9/ansi_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "B4", "pin_b": "B5"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 2, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 35, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 50, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 80, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 94, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 109, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 139, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 183, "y": 0, "flags": 4},
            {"matrix": [0, 13], "x": 202, "y": 0, "flags": 4},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},
            {"matrix": [1, 0], "x": 4, "y": 21, "flags": 8},
            {"matrix": [1, 1], "x": 24, "y": 21, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 21, "flags": 4},
            {"matrix": [1, 3], "x": 54, "y": 21, "flags": 4},
            {"matrix": [1, 4], "x": 68, "y": 21, "flags": 4},
            {"matrix": [1, 5], "x": 83, "y": 21, "flags": 4},
            {"matrix": [1, 6], "x": 98, "y": 21, "flags": 4},
            {"matrix": [1, 7], "x": 113, "y": 21, "flags": 4},
            {"matrix": [1, 8], "x": 128, "y": 21, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 21, "flags": 4},
            {"matrix": [1, 10], "x": 157, "y": 21, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 21, "flags": 4},
            {"matrix": [1, 13], "x": 196, "y": 21, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 27, "flags": 1},
            {"matrix": [2, 0], "x": 7, "y": 43, "flags": 1},
            {"matrix": [2, 2], "x": 31, "y": 43, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 43, "flags": 4},
            {"matrix": [2, 4], "x": 61, "y": 43, "flags": 4},
            {"matrix": [2, 5], "x": 76, "y": 43, "flags": 4},
            {"matrix": [2, 6], "x": 91, "y": 43, "flags": 4},
            {"matrix": [2, 7], "x": 105, "y": 43, "flags": 4},
            {"matrix": [2, 8], "x": 120, "y": 43, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 43, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 43, "flags": 4},
            {"matrix": [2, 11], "x": 165, "y": 43, "flags": 4},
            {"matrix": [2, 13], "x": 185, "y": 43, "flags": 1},
            {"matrix": [2, 14], "x": 205, "y": 43, "flags": 1},
            {"matrix": [3, 0], "x": 0, "y": 64, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [3, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [3, 6], "x": 92, "y": 64, "flags": 1},
            {"matrix": [3, 10], "x": 146, "y": 64, "flags": 1},
            {"matrix": [3, 11], "x": 161, "y": 64, "flags": 1},
            {"matrix": [3, 12], "x": 176, "y": 64, "flags": 1},
            {"matrix": [3, 13], "x": 190, "y": 64, "flags": 1},
            {"matrix": [3, 14], "x": 205, "y": 64, "flags": 1},
            {"matrix": [1, 12], "x": 220, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0191"
    },
    "layouts": {
        "LAYOUT_ansi_52": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25, "w": 1.5},
                {"matrix": [0, 1], "x": 1.5, "y": 0.25},
                {"matrix": [0, 2], "x": 2.5, "y": 0.25},
                {"matrix": [0, 3], "x": 3.5, "y": 0.25},
                {"matrix": [0, 4], "x": 4.5, "y": 0.25},
                {"matrix": [0, 5], "x": 5.5, "y": 0.25},
                {"matrix": [0, 6], "x": 6.5, "y": 0.25},
                {"matrix": [0, 7], "x": 7.5, "y": 0.25},
                {"matrix": [0, 8], "x": 8.5, "y": 0.25},
                {"matrix": [0, 9], "x": 9.5, "y": 0.25},
                {"matrix": [0, 10], "x": 10.5, "y": 0.25},
                {"matrix": [0, 11], "x": 11.5, "y": 0.25},
                {"matrix": [0, 12], "x": 12.5, "y": 0.25},
                {"matrix": [0, 13], "x": 13.5, "y": 0.25, "w": 1.5},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.75},
                {"matrix": [1, 1], "x": 1.75, "y": 1.25},
                {"matrix": [1, 2], "x": 2.75, "y": 1.25},
                {"matrix": [1, 3], "x": 3.75, "y": 1.25},
                {"matrix": [1, 4], "x": 4.75, "y": 1.25},
                {"matrix": [1, 5], "x": 5.75, "y": 1.25},
                {"matrix": [1, 6], "x": 6.75, "y": 1.25},
                {"matrix": [1, 7], "x": 7.75, "y": 1.25},
                {"matrix": [1, 8], "x": 8.75, "y": 1.25},
                {"matrix": [1, 9], "x": 9.75, "y": 1.25},
                {"matrix": [1, 10], "x": 10.75, "y": 1.25},
                {"matrix": [1, 11], "x": 11.75, "y": 1.25},
                {"matrix": [1, 13], "x": 12.75, "y": 1.25, "w": 2.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 2.25},
                {"matrix": [2, 2], "x": 2.25, "y": 2.25},
                {"matrix": [2, 3], "x": 3.25, "y": 2.25},
                {"matrix": [2, 4], "x": 4.25, "y": 2.25},
                {"matrix": [2, 5], "x": 5.25, "y": 2.25},
                {"matrix": [2, 6], "x": 6.25, "y": 2.25},
                {"matrix": [2, 7], "x": 7.25, "y": 2.25},
                {"matrix": [2, 8], "x": 8.25, "y": 2.25},
                {"matrix": [2, 9], "x": 9.25, "y": 2.25},
                {"matrix": [2, 10], "x": 10.25, "y": 2.25},
                {"matrix": [2, 11], "x": 11.25, "y": 2.25},
                {"matrix": [2, 13], "x": 12.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 14], "x": 14.25, "y": 2.5},
                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25, "w": 1.25},
                {"matrix": [3, 2], "x": 2.5, "y": 3.25, "w": 1.25},
                {"matrix": [3, 6], "x": 3.75, "y": 3.25, "w": 6.25},
                {"matrix": [3, 10], "x": 10, "y": 3.25},
                {"matrix": [3, 11], "x": 11, "y": 3.25},
                {"matrix": [3, 12], "x": 12, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.5},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},
                {"matrix": [1, 12], "x": 15.25, "y": 3.5}
            ]
        }
    }
}

================
File: q9/ansi_encoder/readme.md
================
# The ANSI variant of the Keychron Q9

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q9/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_53(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_53(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_53(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,                    _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                            _______,                             _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_53(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,                    _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_53(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,                     _______,
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     _______,  KC_BSPC,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

================
File: q9/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 14

================
File: q9/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB12_CA16, CB10_CA16, CB11_CA16}, // Tab
    {0, CB12_CA15, CB10_CA15, CB11_CA15}, // Q
    {0, CB12_CA14, CB10_CA14, CB11_CA14}, // W
    {0, CB12_CA13, CB10_CA13, CB11_CA13}, // E
    {0, CB12_CA12, CB10_CA12, CB11_CA12}, // R
    {0, CB12_CA11, CB10_CA11, CB11_CA11}, // T
    {0, CB12_CA10, CB10_CA10, CB11_CA10}, // Y
    {0, CB12_CA9,  CB10_CA9,  CB11_CA9},  // U
    {0, CB12_CA8,  CB10_CA8,  CB11_CA8},  // I
    {0, CB12_CA7,  CB10_CA7,  CB11_CA7},  // O
    {0, CB12_CA6,  CB10_CA6,  CB11_CA6},  // P
    {0, CB12_CA5,  CB10_CA5,  CB11_CA5},  // [
    {0, CB12_CA4,  CB10_CA4,  CB11_CA4},  // ]
    {0, CB12_CA2,  CB10_CA2,  CB11_CA2},  // Del

    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // CapsLock
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // A
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // S
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // D
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // G
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // H
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // J
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // K
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // L
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // ;
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // '
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // #
    {0, CB12_CA3,  CB10_CA3,  CB11_CA3},  // Enter
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Home

    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // LeftShift
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // |
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // Z
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // X
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // C
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // V
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // B
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // N
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // M
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // ,
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // .
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ?
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // RightShift
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Up

    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // LeftCtrl
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // LeftWin
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // LeftAlt
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // Space
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // RightAlt
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // Fn1
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // Fn2
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4}   // Right
};

#endif // RGB_MATRIX_ENABLE

================
File: q9/iso/keyboard.json
================
{
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 2, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 35, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 50, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 80, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 94, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 109, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 139, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 183, "y": 0, "flags": 4},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},

            {"matrix": [1, 0], "x": 4, "y": 21, "flags": 8},
            {"matrix": [1, 1], "x": 24, "y": 21, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 21, "flags": 4},
            {"matrix": [1, 3], "x": 54, "y": 21, "flags": 4},
            {"matrix": [1, 4], "x": 68, "y": 21, "flags": 4},
            {"matrix": [1, 5], "x": 83, "y": 21, "flags": 4},
            {"matrix": [1, 6], "x": 98, "y": 21, "flags": 4},
            {"matrix": [1, 7], "x": 113, "y": 21, "flags": 4},
            {"matrix": [1, 8], "x": 128, "y": 21, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 21, "flags": 4},
            {"matrix": [1, 10], "x": 157, "y": 21, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 21, "flags": 4},
            {"matrix": [1, 13], "x": 187, "y": 21, "flags": 4},
            {"matrix": [0, 13], "x": 207, "y": 14, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 27, "flags": 1},

            {"matrix": [2, 0], "x": 0, "y": 43, "flags": 1},
            {"matrix": [2, 1], "x": 17, "y": 43, "flags": 4},
            {"matrix": [2, 2], "x": 31, "y": 43, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 43, "flags": 4},
            {"matrix": [2, 4], "x": 61, "y": 43, "flags": 4},
            {"matrix": [2, 5], "x": 76, "y": 43, "flags": 4},
            {"matrix": [2, 6], "x": 91, "y": 43, "flags": 4},
            {"matrix": [2, 7], "x": 105, "y": 43, "flags": 4},
            {"matrix": [2, 8], "x": 120, "y": 43, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 43, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 43, "flags": 4},
            {"matrix": [2, 11], "x": 165, "y": 43, "flags": 4},
            {"matrix": [2, 13], "x": 185, "y": 43, "flags": 1},
            {"matrix": [2, 14], "x": 205, "y": 43, "flags": 1},

            {"matrix": [3, 0], "x": 0, "y": 64, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [3, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [3, 6], "x": 92, "y": 64, "flags": 4},
            {"matrix": [3, 10], "x": 146, "y": 64, "flags": 1},
            {"matrix": [3, 11], "x": 161, "y": 64, "flags": 1},
            {"matrix": [3, 12], "x": 176, "y": 64, "flags": 1},
            {"matrix": [3, 13], "x": 190, "y": 64, "flags": 1},
            {"matrix": [3, 14], "x": 205, "y": 64, "flags": 1},
            {"matrix": [1, 12], "x": 220, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0192"
    },
    "layouts": {
        "LAYOUT_iso_53": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0, "w": 1.5},
                {"matrix": [0, 1], "x": 1.5, "y": 0},
                {"matrix": [0, 2], "x": 2.5, "y": 0},
                {"matrix": [0, 3], "x": 3.5, "y": 0},
                {"matrix": [0, 4], "x": 4.5, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.5, "y": 0},
                {"matrix": [0, 10], "x": 10.5, "y": 0},
                {"matrix": [0, 11], "x": 11.5, "y": 0},
                {"matrix": [0, 12], "x": 12.5, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.75},
                {"matrix": [1, 1], "x": 1.75, "y": 1},
                {"matrix": [1, 2], "x": 2.75, "y": 1},
                {"matrix": [1, 3], "x": 3.75, "y": 1},
                {"matrix": [1, 4], "x": 4.75, "y": 1},
                {"matrix": [1, 5], "x": 5.75, "y": 1},
                {"matrix": [1, 6], "x": 6.75, "y": 1},
                {"matrix": [1, 7], "x": 7.75, "y": 1},
                {"matrix": [1, 8], "x": 8.75, "y": 1},
                {"matrix": [1, 9], "x": 9.75, "y": 1},
                {"matrix": [1, 10], "x": 10.75, "y": 1},
                {"matrix": [1, 11], "x": 11.75, "y": 1},
                {"matrix": [1, 13], "x": 12.75, "y": 1},
                {"matrix": [0, 13], "x": 13.75, "y": 0, "w": 1.25, "h": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.25},
                {"matrix": [2, 1], "x": 1.25, "y": 2},
                {"matrix": [2, 2], "x": 2.25, "y": 2},
                {"matrix": [2, 3], "x": 3.25, "y": 2},
                {"matrix": [2, 4], "x": 4.25, "y": 2},
                {"matrix": [2, 5], "x": 5.25, "y": 2},
                {"matrix": [2, 6], "x": 6.25, "y": 2},
                {"matrix": [2, 7], "x": 7.25, "y": 2},
                {"matrix": [2, 8], "x": 8.25, "y": 2},
                {"matrix": [2, 9], "x": 9.25, "y": 2},
                {"matrix": [2, 10], "x": 10.25, "y": 2},
                {"matrix": [2, 11], "x": 11.25, "y": 2},
                {"matrix": [2, 13], "x": 12.25, "y": 2, "w": 1.75},
                {"matrix": [2, 14], "x": 14, "y": 2},
                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3, "w": 1.25},
                {"matrix": [3, 2], "x": 2.5, "y": 3, "w": 1.25},
                {"matrix": [3, 6], "x": 3.75, "y": 3, "w": 6.25},
                {"matrix": [3, 10], "x": 10, "y": 3},
                {"matrix": [3, 11], "x": 11, "y": 3},
                {"matrix": [3, 12], "x": 12, "y": 3},
                {"matrix": [3, 13], "x": 13, "y": 3},
                {"matrix": [3, 14], "x": 14, "y": 3},
                {"matrix": [1, 12], "x": 15, "y": 3}
            ]
        }
    }
}

================
File: q9/iso/readme.md
================
# The ISO variant of the Keychron Q9

================
File: q9/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_53(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_53(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_53(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,                    _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                            _______,                             _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_53(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,                    _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_53(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,                     _______,
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     _______,  KC_BSPC,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: q9/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q9/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 13

================
File: q9/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB12_CA16, CB10_CA16, CB11_CA16}, // Tab
    {0, CB12_CA15, CB10_CA15, CB11_CA15}, // Q
    {0, CB12_CA14, CB10_CA14, CB11_CA14}, // W
    {0, CB12_CA13, CB10_CA13, CB11_CA13}, // E
    {0, CB12_CA12, CB10_CA12, CB11_CA12}, // R
    {0, CB12_CA11, CB10_CA11, CB11_CA11}, // T
    {0, CB12_CA10, CB10_CA10, CB11_CA10}, // Y
    {0, CB12_CA9,  CB10_CA9,  CB11_CA9},  // U
    {0, CB12_CA8,  CB10_CA8,  CB11_CA8},  // I
    {0, CB12_CA7,  CB10_CA7,  CB11_CA7},  // O
    {0, CB12_CA6,  CB10_CA6,  CB11_CA6},  // P
    {0, CB12_CA5,  CB10_CA5,  CB11_CA5},  // [
    {0, CB12_CA4,  CB10_CA4,  CB11_CA4},  // ]
    // {0, CB12_CA2,  CB10_CA2,  CB11_CA2},  // Mute

    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // CapsLock
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // A
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // S
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // D
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // G
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // H
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // J
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // K
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // L
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // ;
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // '
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // #
    {0, CB12_CA3,  CB10_CA3,  CB11_CA3},  // Enter
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Home

    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // LeftShift
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // |
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // Z
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // X
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // C
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // V
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // B
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // N
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // M
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // ,
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // .
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ?
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // RightShift
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Up

    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // LeftCtrl
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // LeftWin
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // LeftAlt
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // Space
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // RightAlt
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // Fn1
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // Fn2
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4}   // Right
};

#endif // RGB_MATRIX_ENABLE

================
File: q9/iso_encoder/keyboard.json
================
{
    "encoder": {
        "enabled": true,
        "rotary": [
            {"pin_a": "B4", "pin_b": "B5"}
        ]
    },
    "rgb_matrix": {
        "layout": [
            {"matrix": [0, 0], "x": 2, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 20, "y": 0, "flags": 4},
            {"matrix": [0, 2], "x": 35, "y": 0, "flags": 4},
            {"matrix": [0, 3], "x": 50, "y": 0, "flags": 4},
            {"matrix": [0, 4], "x": 65, "y": 0, "flags": 4},
            {"matrix": [0, 5], "x": 80, "y": 0, "flags": 4},
            {"matrix": [0, 6], "x": 94, "y": 0, "flags": 4},
            {"matrix": [0, 7], "x": 109, "y": 0, "flags": 4},
            {"matrix": [0, 8], "x": 124, "y": 0, "flags": 4},
            {"matrix": [0, 9], "x": 139, "y": 0, "flags": 4},
            {"matrix": [0, 10], "x": 154, "y": 0, "flags": 4},
            {"matrix": [0, 11], "x": 168, "y": 0, "flags": 4},
            {"matrix": [0, 12], "x": 183, "y": 0, "flags": 4},

            {"matrix": [1, 0], "x": 4, "y": 21, "flags": 8},
            {"matrix": [1, 1], "x": 24, "y": 21, "flags": 4},
            {"matrix": [1, 2], "x": 39, "y": 21, "flags": 4},
            {"matrix": [1, 3], "x": 54, "y": 21, "flags": 4},
            {"matrix": [1, 4], "x": 68, "y": 21, "flags": 4},
            {"matrix": [1, 5], "x": 83, "y": 21, "flags": 4},
            {"matrix": [1, 6], "x": 98, "y": 21, "flags": 4},
            {"matrix": [1, 7], "x": 113, "y": 21, "flags": 4},
            {"matrix": [1, 8], "x": 128, "y": 21, "flags": 4},
            {"matrix": [1, 9], "x": 142, "y": 21, "flags": 4},
            {"matrix": [1, 10], "x": 157, "y": 21, "flags": 4},
            {"matrix": [1, 11], "x": 172, "y": 21, "flags": 4},
            {"matrix": [1, 13], "x": 187, "y": 21, "flags": 4},
            {"matrix": [0, 13], "x": 207, "y": 14, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 27, "flags": 1},

            {"matrix": [2, 0], "x": 0, "y": 43, "flags": 1},
            {"matrix": [2, 1], "x": 17, "y": 43, "flags": 4},
            {"matrix": [2, 2], "x": 31, "y": 43, "flags": 4},
            {"matrix": [2, 3], "x": 46, "y": 43, "flags": 4},
            {"matrix": [2, 4], "x": 61, "y": 43, "flags": 4},
            {"matrix": [2, 5], "x": 76, "y": 43, "flags": 4},
            {"matrix": [2, 6], "x": 91, "y": 43, "flags": 4},
            {"matrix": [2, 7], "x": 105, "y": 43, "flags": 4},
            {"matrix": [2, 8], "x": 120, "y": 43, "flags": 4},
            {"matrix": [2, 9], "x": 135, "y": 43, "flags": 4},
            {"matrix": [2, 10], "x": 150, "y": 43, "flags": 4},
            {"matrix": [2, 11], "x": 165, "y": 43, "flags": 4},
            {"matrix": [2, 13], "x": 185, "y": 43, "flags": 1},
            {"matrix": [2, 14], "x": 205, "y": 43, "flags": 1},
            
            {"matrix": [3, 0], "x": 0, "y": 64, "flags": 1},
            {"matrix": [3, 1], "x": 18, "y": 64, "flags": 1},
            {"matrix": [3, 2], "x": 37, "y": 64, "flags": 1},
            {"matrix": [3, 6], "x": 92, "y": 64, "flags": 4},
            {"matrix": [3, 10], "x": 146, "y": 64, "flags": 1},
            {"matrix": [3, 11], "x": 161, "y": 64, "flags": 1},
            {"matrix": [3, 12], "x": 176, "y": 64, "flags": 1},
            {"matrix": [3, 13], "x": 190, "y": 64, "flags": 1},
            {"matrix": [3, 14], "x": 205, "y": 64, "flags": 1},
            {"matrix": [1, 12], "x": 220, "y": 64, "flags": 1}
        ]
    },
    "usb": {
        "device_version": "1.0.0",
        "pid": "0x0193"
    },
    "layouts": {
        "LAYOUT_iso_53": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0, "w": 1.5},
                {"matrix": [0, 1], "x": 1.5, "y": 0},
                {"matrix": [0, 2], "x": 2.5, "y": 0},
                {"matrix": [0, 3], "x": 3.5, "y": 0},
                {"matrix": [0, 4], "x": 4.5, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.5, "y": 0},
                {"matrix": [0, 10], "x": 10.5, "y": 0},
                {"matrix": [0, 11], "x": 11.5, "y": 0},
                {"matrix": [0, 12], "x": 12.5, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.75},
                {"matrix": [1, 1], "x": 1.75, "y": 1},
                {"matrix": [1, 2], "x": 2.75, "y": 1},
                {"matrix": [1, 3], "x": 3.75, "y": 1},
                {"matrix": [1, 4], "x": 4.75, "y": 1},
                {"matrix": [1, 5], "x": 5.75, "y": 1},
                {"matrix": [1, 6], "x": 6.75, "y": 1},
                {"matrix": [1, 7], "x": 7.75, "y": 1},
                {"matrix": [1, 8], "x": 8.75, "y": 1},
                {"matrix": [1, 9], "x": 9.75, "y": 1},
                {"matrix": [1, 10], "x": 10.75, "y": 1},
                {"matrix": [1, 11], "x": 11.75, "y": 1},
                {"matrix": [1, 13], "x": 12.75, "y": 1},
                {"matrix": [0, 13], "x": 13.75, "y": 0, "w": 1.25, "h": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.25},
                {"matrix": [2, 1], "x": 1.25, "y": 2},
                {"matrix": [2, 2], "x": 2.25, "y": 2},
                {"matrix": [2, 3], "x": 3.25, "y": 2},
                {"matrix": [2, 4], "x": 4.25, "y": 2},
                {"matrix": [2, 5], "x": 5.25, "y": 2},
                {"matrix": [2, 6], "x": 6.25, "y": 2},
                {"matrix": [2, 7], "x": 7.25, "y": 2},
                {"matrix": [2, 8], "x": 8.25, "y": 2},
                {"matrix": [2, 9], "x": 9.25, "y": 2},
                {"matrix": [2, 10], "x": 10.25, "y": 2},
                {"matrix": [2, 11], "x": 11.25, "y": 2},
                {"matrix": [2, 13], "x": 12.25, "y": 2, "w": 1.75},
                {"matrix": [2, 14], "x": 14, "y": 2},
                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3, "w": 1.25},
                {"matrix": [3, 2], "x": 2.5, "y": 3, "w": 1.25},
                {"matrix": [3, 6], "x": 3.75, "y": 3, "w": 6.25},
                {"matrix": [3, 10], "x": 10, "y": 3},
                {"matrix": [3, 11], "x": 11, "y": 3},
                {"matrix": [3, 12], "x": 12, "y": 3},
                {"matrix": [3, 13], "x": 13, "y": 3},
                {"matrix": [3, 14], "x": 14, "y": 3},
                {"matrix": [1, 12], "x": 15, "y": 3}
            ]
        }
    }
}

================
File: q9/iso_encoder/readme.md
================
# The ISO variant of the Keychron Q9

- Enable EC11 rotary encoder.
- Turn clockwise to increase volume and turn anti-clockwise to decrease volume.
- Press top right key pushbutton to mute.

================
File: q9/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70 }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

================
File: q9/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q9/info.json
================
{
    "manufacturer": "Keychron",
    "keyboard_name": "Keychron Q9",
    "maintainer": "lalalademaxiya1",
    "bootloader": "stm32-dfu",
    "diode_direction": "ROW2COL",
    "dynamic_keymap": {
        "layer_count": 5
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        } 
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "dip_switch": {
        "matrix_grid": [ [3, 4] ]
    },
    "matrix_pins": {
        "cols": ["A10", "A9", "A8", "B1", "B0", "A7", "A6", "A5", "A4", "A3", "A2", "A1", "A0", "C15", "C14"],
        "rows": ["B3", "A15", "A14", "A13"]
    },
    "processor": "STM32L432",
    "rgb_matrix": {
        "animations": {
            "band_spiral_val": true,
            "breathing": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "cycle_up_down": true,
            "digital_rain": true,
            "dual_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "rainbow_beacon": true,
            "rainbow_moving_chevron": true,
            "solid_reactive_multinexus": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_simple": true,
            "solid_splash": true,
            "splash": true,
            "typing_heatmap": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "url": "https://github.com/Keychron",
    "usb": {
        "vid": "0x3434"
    }
}

================
File: q9/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q9/q9.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: q9/readme.md
================
# Keychron Q9

![Keychron Q9](https://i.imgur.com/G8xJ4TRh.jpg)

A customizable 40% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q9
* Hardware Availability: [Keychron Q9 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q9-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q9/ansi:default
    make keychron/q9/ansi_encoder:default
    make keychron/q9/iso:default
    make keychron/q9/iso_enocder:default

Flashing example for this keyboard:

    make keychron/q9/ansi:default:flash
    make keychron/q9/ansi_encoder:default:flash
    make keychron/q9/iso:default:flash
    make keychron/q9/iso_encoder:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: q9_plus/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    WIN_BASE,
    MAC_FN1,
    WIN_FN1,
    FN2,
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

// clang-format off
const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_54_ansi(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,     KC_RBRC,  KC_BSLS,          KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,               KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,               KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,  MO(MAC_FN1),      KC_SPC,                    KC_SPC,           KC_RCMD,  MO(MAC_FN1), MO(FN2),  KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_54_ansi(
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,     KC_RBRC,  KC_BSLS,          KC_MUTE,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,               KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,               KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,  MO(WIN_FN1),      KC_SPC,                    KC_SPC,           KC_RALT,  MO(WIN_FN1), MO(FN2),  KC_LEFT, KC_DOWN, KC_RGHT),

    [MAC_FN1] = LAYOUT_54_ansi(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_MCTL, KC_LPAD, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,     KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,               _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,               _______, _______,
        _______, _______,  _______,  _______,          _______,                   _______,          _______,  _______,     _______,  _______, _______, _______),

    [WIN_FN1] = LAYOUT_54_ansi(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,     KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,               _______,          _______,
        _______,           RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, NK_TOGG, _______, _______, _______,  _______,               _______, _______,
        _______, _______,  _______,  _______,          _______,                   _______,          _______,  _______,     _______,  _______, _______, _______),

    [FN2] = LAYOUT_54_ansi(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,      KC_F12,   KC_BSPC,          _______,
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     _______,               _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,               _______, _______,
        _______, _______,  _______,  _______,          _______,                   _______,          _______,  _______,     _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN1]  = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_FN1]  = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [FN2]      = {ENCODER_CCW_CW(_______, _______)}
};
#endif

================
File: q9_plus/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: q9_plus/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE
const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    // {0, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},

    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},

    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
};
#endif

================
File: q9_plus/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 14

================
File: q9_plus/ansi_encoder/keyboard.json
================
{
    "usb": {
        "pid": "0x0194",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "layout": [
            {"matrix":[0, 0],  "flags":1, "x":2,   "y":0},
            {"matrix":[0, 1],  "flags":4, "x":20,  "y":0},
            {"matrix":[0, 2],  "flags":4, "x":35,  "y":0},
            {"matrix":[0, 3],  "flags":4, "x":50,  "y":0},
            {"matrix":[0, 4],  "flags":4, "x":65,  "y":0},
            {"matrix":[0, 5],  "flags":4, "x":80,  "y":0},
            {"matrix":[0, 6],  "flags":4, "x":94,  "y":0},
            {"matrix":[0, 7],  "flags":4, "x":109, "y":0},
            {"matrix":[0, 8],  "flags":4, "x":124, "y":0},
            {"matrix":[0, 9],  "flags":4, "x":139, "y":0},
            {"matrix":[0, 10], "flags":4, "x":154, "y":0},
            {"matrix":[0, 11], "flags":4, "x":168, "y":0},
            {"matrix":[0, 12], "flags":1, "x":183, "y":0},
            {"matrix":[0, 13], "flags":1, "x":202, "y":0},

            {"matrix":[1, 0],  "flags":8, "x":4,   "y":21},
            {"matrix":[1, 1],  "flags":4, "x":24,  "y":21},
            {"matrix":[1, 2],  "flags":4, "x":39,  "y":21},
            {"matrix":[1, 3],  "flags":4, "x":54,  "y":21},
            {"matrix":[1, 4],  "flags":4, "x":68,  "y":21},
            {"matrix":[1, 5],  "flags":4, "x":83,  "y":21},
            {"matrix":[1, 6],  "flags":4, "x":98,  "y":21},
            {"matrix":[1, 7],  "flags":4, "x":113, "y":21},
            {"matrix":[1, 8],  "flags":4, "x":128, "y":21},
            {"matrix":[1, 9],  "flags":4, "x":142, "y":21},
            {"matrix":[1, 10], "flags":4, "x":157, "y":21},
            {"matrix":[1, 11], "flags":4, "x":172, "y":21},
            {"matrix":[1, 13], "flags":1, "x":196, "y":21},
            {"matrix":[1, 14], "flags":1, "x":224, "y":21},

            {"matrix":[2, 0],  "flags":1, "x":7,   "y":43},
            {"matrix":[2, 2],  "flags":4, "x":31,  "y":43},
            {"matrix":[2, 3],  "flags":4, "x":46,  "y":43},
            {"matrix":[2, 4],  "flags":4, "x":61,  "y":43},
            {"matrix":[2, 5],  "flags":4, "x":76,  "y":43},
            {"matrix":[2, 6],  "flags":4, "x":91,  "y":43},
            {"matrix":[2, 7],  "flags":4, "x":105, "y":43},
            {"matrix":[2, 8],  "flags":4, "x":120, "y":43},
            {"matrix":[2, 9],  "flags":4, "x":135, "y":43},
            {"matrix":[2, 10], "flags":4, "x":150, "y":43},
            {"matrix":[2, 11], "flags":4, "x":165, "y":43},
            {"matrix":[2, 13], "flags":1, "x":185, "y":43},
            {"matrix":[2, 14], "flags":1, "x":205, "y":43},

            {"matrix":[3, 0],  "flags":1, "x":0,   "y":64},
            {"matrix":[3, 1],  "flags":1, "x":18,  "y":64},
            {"matrix":[3, 2],  "flags":1, "x":37,  "y":64},
            {"matrix":[3, 3],  "flags":1, "x":55,  "y":64},
            {"matrix":[3, 6],  "flags":4, "x":81,  "y":64},
            {"matrix":[3, 9],  "flags":4, "x":118, "y":64},
            {"matrix":[3, 10], "flags":1, "x":146, "y":64},
            {"matrix":[3, 11], "flags":1, "x":161, "y":64},
            {"matrix":[3, 12], "flags":1, "x":176, "y":64},
            {"matrix":[3, 13], "flags":1, "x":190, "y":64},
            {"matrix":[3, 14], "flags":1, "x":205, "y":64},
            {"matrix":[1, 12], "flags":1, "x":224, "y":64}
        ]
    }
}

================
File: q9_plus/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

/* Set LED driver current */
#define SNLED27351_CURRENT_TUNE \
    { 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70, 0xF8, 0xF8, 0x70 }

/* Old default behavior of mod-taps */
#define HOLD_ON_OTHER_KEY_PRESS

================
File: q9_plus/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: q9_plus/info.json
================
{
    "keyboard_name": "Keychron Q9 Plus",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "usb": {
        "vid": "0x3434"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "extrakey": true,
        "mousekey": true,
        "dip_switch": true,
        "encoder": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [3, 4] ]
    },
    "matrix_pins": {
        "cols": ["A10", "A9", "A8", "B1", "B0", "A7", "A6", "A5", "A4", "A3", "A2", "A1", "A0", "C15", "C14"],
        "rows": ["B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "B4", "pin_b": "B5"}
        ]
    },
    "dynamic_keymap": {
        "layer_count": 5
    },
    "layouts": {
        "LAYOUT_54_ansi": {
            "layout": [
                {"matrix":[0,0], "x":0, "y":0, "w":1.5},
                {"matrix":[0,1], "x":1.5, "y":0},
                {"matrix":[0,2], "x":2.5, "y":0},
                {"matrix":[0,3], "x":3.5, "y":0},
                {"matrix":[0,4], "x":4.5, "y":0},
                {"matrix":[0,5], "x":5.5, "y":0},
                {"matrix":[0,6], "x":6.5, "y":0},
                {"matrix":[0,7], "x":7.5, "y":0},
                {"matrix":[0,8], "x":8.5, "y":0},
                {"matrix":[0,9], "x":9.5, "y":0},
                {"matrix":[0,10], "x":10.5, "y":0},
                {"matrix":[0,11], "x":11.5, "y":0},
                {"matrix":[0,12], "x":12.5, "y":0},
                {"matrix":[0,13], "x":13.5, "y":0, "w":1.5},
                {"matrix":[0,14], "x":15.25, "y":0},

                {"matrix":[1,0], "x":0, "y":1, "w":1.75},
                {"matrix":[1,1], "x":1.75, "y":1},
                {"matrix":[1,2], "x":2.75, "y":1},
                {"matrix":[1,3], "x":3.75, "y":1},
                {"matrix":[1,4], "x":4.75, "y":1},
                {"matrix":[1,5], "x":5.75, "y":1},
                {"matrix":[1,6], "x":6.75, "y":1},
                {"matrix":[1,7], "x":7.75, "y":1},
                {"matrix":[1,8], "x":8.75, "y":1},
                {"matrix":[1,9], "x":9.75, "y":1},
                {"matrix":[1,10], "x":10.75, "y":1},
                {"matrix":[1,11], "x":11.75, "y":1},
                {"matrix":[1,13], "x":12.75, "y":1, "w":2.25},
                {"matrix":[1,14], "x":15.25, "y":1.25},

                {"matrix":[2,0], "x":0, "y":2, "w":2.25},
                {"matrix":[2,2], "x":2.25, "y":2},
                {"matrix":[2,3], "x":3.25, "y":2},
                {"matrix":[2,4], "x":4.25, "y":2},
                {"matrix":[2,5], "x":5.25, "y":2},
                {"matrix":[2,6], "x":6.25, "y":2},
                {"matrix":[2,7], "x":7.25, "y":2},
                {"matrix":[2,8], "x":8.25, "y":2},
                {"matrix":[2,9], "x":9.25, "y":2},
                {"matrix":[2,10], "x":10.25, "y":2},
                {"matrix":[2,11], "x":11.25, "y":2},
                {"matrix":[2,13], "x":12.25, "y":2, "w":1.75},
                {"matrix":[2,14], "x":14, "y":2},

                {"matrix":[3,0], "x":0, "y":3, "w":1.25},
                {"matrix":[3,1], "x":1.25, "y":3, "w":1.25},
                {"matrix":[3,2], "x":2.5, "y":3, "w":1.25},
                {"matrix":[3,3], "x":3.75, "y":3, "w":1.25},
                {"matrix":[3,6], "x":5, "y":3, "w":2.25},
                {"matrix":[3,9], "x":7.25, "y":3, "w":2.75},
                {"matrix":[3,10], "x":10, "y":3},
                {"matrix":[3,11], "x":11, "y":3},
                {"matrix":[3,12], "x":12, "y":3},
                {"matrix":[3,13], "x":13, "y":3},
                {"matrix":[3,14], "x":14, "y":3},
                {"matrix":[1,12], "x":15, "y":3}
            ]
        }
    },
    "rgb_matrix": {
        "driver": "snled27351",
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "sleep": true
    }
}

================
File: q9_plus/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: q9_plus/q9_plus.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE
bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}
#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif

================
File: q9_plus/readme.md
================
# Keychron Q9 Plus

![Keychron Q9 Plus](https://i.imgur.com/Yp9K7Gsh.jpg)

A customizable 40% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron Q9 Plus
* Hardware Availability:[Keychron Q9 QMK Custom Mechanical Keyboard](https://www.keychron.com/products/keychron-q9-qmk-custom-mechanical-keyboard)

Make example for this keyboard (after setting up your build environment):

    make keychron/q9_plus/ansi_encoder:default

Flashing example for this keyboard:

    make keychron/q9_plus/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, programmed as *TAB* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: s1/ansi/rgb/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_75_ansi(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  KC_NO,    KC_DEL,   RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,             KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,             KC_RSFT,  KC_UP,    KC_END,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_75_ansi(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,    KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,             _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,   _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_75_ansi(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,    KC_F12,   KC_PSCR,  KC_DEL,   RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,             KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,             KC_RSFT,  KC_UP,    KC_END,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT, MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_75_ansi(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,             _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,   _______,  _______,  _______,  _______),
};

================
File: s1/ansi/rgb/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0xA0, 0xA0, 0x48, 0xA0, 0xA0, 0x48, 0xA0, 0xA0, 0x48, 0xA0, 0xA0, 0x48 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 46

================
File: s1/ansi/rgb/keyboard.json
================
{
    "keyboard_name": "Keychron S1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0410",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["A10", "A9", "A8", "B1", "B0", "A7", "A6", "A5", "A4", "A3", "A2", "A1", "A0", "C15", "C14"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layout_aliases": {
        "LAYOUT_ansi_84": "LAYOUT_75_ansi"
    },
    "community_layouts": ["75_ansi"],
    "layouts": {
        "LAYOUT_75_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [3, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1},
                {"matrix": [1, 1], "x": 1, "y": 1},
                {"matrix": [1, 2], "x": 2, "y": 1},
                {"matrix": [1, 3], "x": 3, "y": 1},
                {"matrix": [1, 4], "x": 4, "y": 1},
                {"matrix": [1, 5], "x": 5, "y": 1},
                {"matrix": [1, 6], "x": 6, "y": 1},
                {"matrix": [1, 7], "x": 7, "y": 1},
                {"matrix": [1, 8], "x": 8, "y": 1},
                {"matrix": [1, 9], "x": 9, "y": 1},
                {"matrix": [1, 10], "x": 10, "y": 1},
                {"matrix": [1, 11], "x": 11, "y": 1},
                {"matrix": [1, 12], "x": 12, "y": 1},
                {"matrix": [1, 13], "x": 13, "y": 1, "w": 2},
                {"matrix": [1, 14], "x": 15, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2},
                {"matrix": [2, 2], "x": 2.5, "y": 2},
                {"matrix": [2, 3], "x": 3.5, "y": 2},
                {"matrix": [2, 4], "x": 4.5, "y": 2},
                {"matrix": [2, 5], "x": 5.5, "y": 2},
                {"matrix": [2, 6], "x": 6.5, "y": 2},
                {"matrix": [2, 7], "x": 7.5, "y": 2},
                {"matrix": [2, 8], "x": 8.5, "y": 2},
                {"matrix": [2, 9], "x": 9.5, "y": 2},
                {"matrix": [2, 10], "x": 10.5, "y": 2},
                {"matrix": [2, 11], "x": 11.5, "y": 2},
                {"matrix": [2, 12], "x": 12.5, "y": 2},
                {"matrix": [2, 13], "x": 13.5, "y": 2, "w": 1.5},
                {"matrix": [2, 14], "x": 15, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3},
                {"matrix": [3, 2], "x": 2.75, "y": 3},
                {"matrix": [3, 3], "x": 3.75, "y": 3},
                {"matrix": [3, 4], "x": 4.75, "y": 3},
                {"matrix": [3, 5], "x": 5.75, "y": 3},
                {"matrix": [3, 6], "x": 6.75, "y": 3},
                {"matrix": [3, 7], "x": 7.75, "y": 3},
                {"matrix": [3, 8], "x": 8.75, "y": 3},
                {"matrix": [3, 9], "x": 9.75, "y": 3},
                {"matrix": [3, 10], "x": 10.75, "y": 3},
                {"matrix": [3, 11], "x": 11.75, "y": 3},
                {"matrix": [3, 13], "x": 12.75, "y": 3, "w": 2.25},
                {"matrix": [3, 14], "x": 15, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4},
                {"matrix": [4, 3], "x": 3.25, "y": 4},
                {"matrix": [4, 4], "x": 4.25, "y": 4},
                {"matrix": [4, 5], "x": 5.25, "y": 4},
                {"matrix": [4, 6], "x": 6.25, "y": 4},
                {"matrix": [4, 7], "x": 7.25, "y": 4},
                {"matrix": [4, 8], "x": 8.25, "y": 4},
                {"matrix": [4, 9], "x": 9.25, "y": 4},
                {"matrix": [4, 10], "x": 10.25, "y": 4},
                {"matrix": [4, 11], "x": 11.25, "y": 4},
                {"matrix": [4, 12], "x": 12.25, "y": 4, "w": 1.75},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},

                {"matrix": [5, 0], "x": 0, "y": 5, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5, "w": 6.25},
                {"matrix": [5, 9], "x": 10, "y": 5},
                {"matrix": [5, 10], "x": 11, "y": 5},
                {"matrix": [5, 11], "x": 12, "y": 5},
                {"matrix": [5, 12], "x": 13, "y": 5},
                {"matrix": [5, 13], "x": 14, "y": 5},
                {"matrix": [5, 14], "x": 15, "y": 5}
            ]
        }
    }
}

================
File: s1/ansi/rgb/rgb.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,  CB7_CA1,  CB8_CA1},  // esc
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // f1
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // f2
    {0, CB9_CA4,  CB7_CA4,  CB8_CA4},  // f3
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // f4
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // f4
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // f6
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // f7
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // f8
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // f9
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // f10
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // f11
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // f12
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // print
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // del
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // light

    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // ~
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // 1!
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // 2@
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // 3#
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // 4$
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // 5%
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // 6^
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // 7&
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // 8*
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // 9(
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // 0)
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // -_
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // =+
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // back space
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // page up

    {0, CB3_CA1,  CB1_CA1,  CB2_CA1},  // tab
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // q
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // w
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // e
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // r
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // t
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // y
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // u
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // i
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // o
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // p
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // [{
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // ]}
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // |
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // page down

    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // caps lock
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // a
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // s
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // d
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // f
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // g
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // h
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // j
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // k
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // l
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // ;:
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // '"
    {1, CB9_CA14, CB7_CA14, CB8_CA14}, // enter
    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // home

    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // left shift
    {1, CB3_CA3,  CB1_CA3,  CB2_CA3},  // z
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // x
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // c
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // v
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // b
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // b
    {1, CB3_CA9,  CB1_CA9,  CB2_CA9},  // n
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // m
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // ,<
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // .>
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // right shift
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // up
    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // end

    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // left command
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // left optin
    {1, CB6_CA7,  CB4_CA7,  CB5_CA7},  // space
    {1, CB6_CA10, CB4_CA10, CB5_CA10}, // right command
    {1, CB6_CA11, CB4_CA11, CB5_CA11}, // fn
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // right ctrl
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // left
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // down
    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 15 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 },
        { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 14, 58, 59 },
        { 60, __, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73 },
        { 74, 75, 76, __, __, __, 77, __, __, 78, 79, 80, 81, 82, 83 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {15,0},  {30,0},  {45,0},  {60,0},  {75,0},  {90,0},   {105,0},  {119,0},  {134,0},  {149,0},  {164,0},  {179,0},  {194,0},  {209,0},  {224,0},
        {0,13}, {15,13}, {30,13}, {45,13}, {60,13}, {75,13}, {90,13},  {105,13}, {119,13}, {134,13}, {149,13}, {164,13}, {179,13}, {202,13},           {224,13},
        {4,26}, {22,26}, {37,26}, {52,26}, {67,26}, {82,26}, {97,26},  {112,26}, {127,26}, {142,26}, {157,26}, {172,26}, {187,26}, {205,26},           {224,26},
        {6,38}, {26,38}, {41,38}, {56,38}, {71,38}, {86,38}, {101,38}, {116,38}, {131,38}, {146,38}, {160,38}, {175,38},           {200,38},           {224,38},
        {9,51},          {34,51}, {48,51}, {63,51}, {78,51}, {93,51},  {108,51}, {123,51}, {138,51}, {153,51}, {168,51},           {189,51}, {209,51}, {224,51},
        {2,64}, {21,64}, {39,64},                            {95,64},                                {149,64}, {164,64}, {179,64}, {194,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: s1/ansi/white/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_75_ansi(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  KC_NO,    KC_DEL,   LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,             KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,             KC_RSFT,  KC_UP,    KC_END,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD, MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN, KC_RGHT),

    [MAC_FN] = LAYOUT_75_ansi(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,    KC_F12,   _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,             _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,   _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_75_ansi(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,    KC_F12,   KC_PSCR,  KC_DEL,   LM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,   KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,   KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,             KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,             KC_RSFT,  KC_UP,    KC_END,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT, MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_75_ansi(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  LM_BRID,  LM_BRIU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,  _______,  LM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        LM_TOGG,  LM_NEXT,  LM_BRIU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  LM_BRID,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,             _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,   _______,  _______,  _______,  _______),
};

================
File: s1/ansi/white/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* LED Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_GND
#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_6_CHANNEL
#define SNLED27351_CURRENT_TUNE \
    { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 } // 250mA
    // { 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 } // 127mA

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 46

================
File: s1/ansi/white/keyboard.json
================
{
    "keyboard_name": "Keychron S1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0411",
        "device_version": "1.0.0"
    },
    "led_matrix": {
        "animations":{
            "alphas_mods": true,
            "breathing": true,
            "band": true,
            "band_pinwheel": true,
            "band_spiral": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "cycle_out_in": true,
            "dual_beacon": true,
            "solid_reactive_simple": true,
            "solid_reactive_wide": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_cross": true,
            "solid_reactive_multicross": true,
            "solid_reactive_nexus": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "multisplash": true,
            "wave_left_right": true,
            "wave_up_down": true
        },
        "layout": [
            {"matrix": [0, 0], "x": 0, "y": 0, "flags": 1},
            {"matrix": [0, 1], "x": 15, "y": 0, "flags": 1},
            {"matrix": [0, 2], "x": 30, "y": 0, "flags": 1},
            {"matrix": [0, 3], "x": 45, "y": 0, "flags": 1},
            {"matrix": [0, 4], "x": 60, "y": 0, "flags": 1},
            {"matrix": [0, 5], "x": 75, "y": 0, "flags": 1},
            {"matrix": [0, 6], "x": 90, "y": 0, "flags": 1},
            {"matrix": [0, 7], "x": 105, "y": 0, "flags": 1},
            {"matrix": [0, 8], "x": 119, "y": 0, "flags": 1},
            {"matrix": [0, 9], "x": 134, "y": 0, "flags": 1},
            {"matrix": [0, 10], "x": 149, "y": 0, "flags": 1},
            {"matrix": [0, 11], "x": 164, "y": 0, "flags": 1},
            {"matrix": [0, 12], "x": 179, "y": 0, "flags": 1},
            {"matrix": [0, 13], "x": 194, "y": 0, "flags": 1},
            {"matrix": [3, 12], "x": 209, "y": 0, "flags": 1},
            {"matrix": [0, 14], "x": 224, "y": 0, "flags": 1},
            {"matrix": [1, 0], "x": 0, "y": 13, "flags": 1},
            {"matrix": [1, 1], "x": 15, "y": 13, "flags": 4},
            {"matrix": [1, 2], "x": 30, "y": 13, "flags": 4},
            {"matrix": [1, 3], "x": 45, "y": 13, "flags": 4},
            {"matrix": [1, 4], "x": 60, "y": 13, "flags": 4},
            {"matrix": [1, 5], "x": 75, "y": 13, "flags": 4},
            {"matrix": [1, 6], "x": 90, "y": 13, "flags": 4},
            {"matrix": [1, 7], "x": 105, "y": 13, "flags": 4},
            {"matrix": [1, 8], "x": 119, "y": 13, "flags": 4},
            {"matrix": [1, 9], "x": 134, "y": 13, "flags": 4},
            {"matrix": [1, 10], "x": 149, "y": 13, "flags": 4},
            {"matrix": [1, 11], "x": 164, "y": 13, "flags": 4},
            {"matrix": [1, 12], "x": 179, "y": 13, "flags": 4},
            {"matrix": [1, 13], "x": 202, "y": 13, "flags": 1},
            {"matrix": [1, 14], "x": 224, "y": 13, "flags": 1},
            {"matrix": [2, 0], "x": 4, "y": 26, "flags": 1},
            {"matrix": [2, 1], "x": 22, "y": 26, "flags": 4},
            {"matrix": [2, 2], "x": 37, "y": 26, "flags": 4},
            {"matrix": [2, 3], "x": 52, "y": 26, "flags": 4},
            {"matrix": [2, 4], "x": 67, "y": 26, "flags": 4},
            {"matrix": [2, 5], "x": 82, "y": 26, "flags": 4},
            {"matrix": [2, 6], "x": 97, "y": 26, "flags": 4},
            {"matrix": [2, 7], "x": 112, "y": 26, "flags": 4},
            {"matrix": [2, 8], "x": 127, "y": 26, "flags": 4},
            {"matrix": [2, 9], "x": 142, "y": 26, "flags": 4},
            {"matrix": [2, 10], "x": 157, "y": 26, "flags": 4},
            {"matrix": [2, 11], "x": 172, "y": 26, "flags": 4},
            {"matrix": [2, 12], "x": 187, "y": 26, "flags": 4},
            {"matrix": [2, 13], "x": 205, "y": 26, "flags": 4},
            {"matrix": [2, 14], "x": 224, "y": 26, "flags": 1},
            {"matrix": [3, 0], "x": 6, "y": 38, "flags": 1},
            {"matrix": [3, 1], "x": 26, "y": 38, "flags": 4},
            {"matrix": [3, 2], "x": 41, "y": 38, "flags": 4},
            {"matrix": [3, 3], "x": 56, "y": 38, "flags": 4},
            {"matrix": [3, 4], "x": 71, "y": 38, "flags": 4},
            {"matrix": [3, 5], "x": 86, "y": 38, "flags": 4},
            {"matrix": [3, 6], "x": 101, "y": 38, "flags": 4},
            {"matrix": [3, 7], "x": 116, "y": 38, "flags": 4},
            {"matrix": [3, 8], "x": 131, "y": 38, "flags": 4},
            {"matrix": [3, 9], "x": 146, "y": 38, "flags": 4},
            {"matrix": [3, 10], "x": 160, "y": 38, "flags": 4},
            {"matrix": [3, 11], "x": 175, "y": 38, "flags": 4},
            {"matrix": [3, 13], "x": 200, "y": 38, "flags": 1},
            {"matrix": [3, 14], "x": 224, "y": 38, "flags": 1},
            {"matrix": [4, 0], "x": 9, "y": 51, "flags": 1},
            {"matrix": [4, 2], "x": 34, "y": 51, "flags": 4},
            {"matrix": [4, 3], "x": 48, "y": 51, "flags": 4},
            {"matrix": [4, 4], "x": 63, "y": 51, "flags": 4},
            {"matrix": [4, 5], "x": 78, "y": 51, "flags": 4},
            {"matrix": [4, 6], "x": 93, "y": 51, "flags": 4},
            {"matrix": [4, 7], "x": 108, "y": 51, "flags": 4},
            {"matrix": [4, 8], "x": 123, "y": 51, "flags": 4},
            {"matrix": [4, 9], "x": 138, "y": 51, "flags": 4},
            {"matrix": [4, 10], "x": 153, "y": 51, "flags": 4},
            {"matrix": [4, 11], "x": 168, "y": 51, "flags": 4},
            {"matrix": [4, 12], "x": 189, "y": 51, "flags": 1},
            {"matrix": [4, 13], "x": 209, "y": 51, "flags": 1},
            {"matrix": [4, 14], "x": 224, "y": 51, "flags": 1},
            {"matrix": [5, 0], "x": 2, "y": 64, "flags": 1},
            {"matrix": [5, 1], "x": 21, "y": 64, "flags": 1},
            {"matrix": [5, 2], "x": 39, "y": 64, "flags": 1},
            {"matrix": [5, 6], "x": 95, "y": 64, "flags": 4},
            {"matrix": [5, 9], "x": 149, "y": 64, "flags": 1},
            {"matrix": [5, 10], "x": 164, "y": 64, "flags": 1},
            {"matrix": [5, 11], "x": 179, "y": 64, "flags": 1},
            {"matrix": [5, 12], "x": 194, "y": 64, "flags": 1},
            {"matrix": [5, 13], "x": 209, "y": 64, "flags": 1},
            {"matrix": [5, 14], "x": 224, "y": 64, "flags": 1}
        ],
        "driver": "snled27351",
        "sleep": true,
        "react_on_keyup": true
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "led_matrix": true,
        "mousekey": true,
        "nkro": true
    },
    "matrix_pins": {
        "cols": ["A10", "A9", "A8", "B1", "B0", "A7", "A6", "A5", "A4", "A3", "A2", "A1", "A0", "C15", "C14"],
        "rows": ["B5", "B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layout_aliases": {
        "LAYOUT_ansi_84": "LAYOUT_75_ansi"
    },
    "community_layouts": ["75_ansi"],
    "layouts": {
        "LAYOUT_75_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [3, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1},
                {"matrix": [1, 1], "x": 1, "y": 1},
                {"matrix": [1, 2], "x": 2, "y": 1},
                {"matrix": [1, 3], "x": 3, "y": 1},
                {"matrix": [1, 4], "x": 4, "y": 1},
                {"matrix": [1, 5], "x": 5, "y": 1},
                {"matrix": [1, 6], "x": 6, "y": 1},
                {"matrix": [1, 7], "x": 7, "y": 1},
                {"matrix": [1, 8], "x": 8, "y": 1},
                {"matrix": [1, 9], "x": 9, "y": 1},
                {"matrix": [1, 10], "x": 10, "y": 1},
                {"matrix": [1, 11], "x": 11, "y": 1},
                {"matrix": [1, 12], "x": 12, "y": 1},
                {"matrix": [1, 13], "x": 13, "y": 1, "w": 2},
                {"matrix": [1, 14], "x": 15, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2},
                {"matrix": [2, 2], "x": 2.5, "y": 2},
                {"matrix": [2, 3], "x": 3.5, "y": 2},
                {"matrix": [2, 4], "x": 4.5, "y": 2},
                {"matrix": [2, 5], "x": 5.5, "y": 2},
                {"matrix": [2, 6], "x": 6.5, "y": 2},
                {"matrix": [2, 7], "x": 7.5, "y": 2},
                {"matrix": [2, 8], "x": 8.5, "y": 2},
                {"matrix": [2, 9], "x": 9.5, "y": 2},
                {"matrix": [2, 10], "x": 10.5, "y": 2},
                {"matrix": [2, 11], "x": 11.5, "y": 2},
                {"matrix": [2, 12], "x": 12.5, "y": 2},
                {"matrix": [2, 13], "x": 13.5, "y": 2, "w": 1.5},
                {"matrix": [2, 14], "x": 15, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3},
                {"matrix": [3, 2], "x": 2.75, "y": 3},
                {"matrix": [3, 3], "x": 3.75, "y": 3},
                {"matrix": [3, 4], "x": 4.75, "y": 3},
                {"matrix": [3, 5], "x": 5.75, "y": 3},
                {"matrix": [3, 6], "x": 6.75, "y": 3},
                {"matrix": [3, 7], "x": 7.75, "y": 3},
                {"matrix": [3, 8], "x": 8.75, "y": 3},
                {"matrix": [3, 9], "x": 9.75, "y": 3},
                {"matrix": [3, 10], "x": 10.75, "y": 3},
                {"matrix": [3, 11], "x": 11.75, "y": 3},
                {"matrix": [3, 13], "x": 12.75, "y": 3, "w": 2.25},
                {"matrix": [3, 14], "x": 15, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4},
                {"matrix": [4, 3], "x": 3.25, "y": 4},
                {"matrix": [4, 4], "x": 4.25, "y": 4},
                {"matrix": [4, 5], "x": 5.25, "y": 4},
                {"matrix": [4, 6], "x": 6.25, "y": 4},
                {"matrix": [4, 7], "x": 7.25, "y": 4},
                {"matrix": [4, 8], "x": 8.25, "y": 4},
                {"matrix": [4, 9], "x": 9.25, "y": 4},
                {"matrix": [4, 10], "x": 10.25, "y": 4},
                {"matrix": [4, 11], "x": 11.25, "y": 4},
                {"matrix": [4, 12], "x": 12.25, "y": 4, "w": 1.75},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},

                {"matrix": [5, 0], "x": 0, "y": 5, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5, "w": 6.25},
                {"matrix": [5, 9], "x": 10, "y": 5},
                {"matrix": [5, 10], "x": 11, "y": 5},
                {"matrix": [5, 11], "x": 12, "y": 5},
                {"matrix": [5, 12], "x": 13, "y": 5},
                {"matrix": [5, 13], "x": 14, "y": 5},
                {"matrix": [5, 14], "x": 15, "y": 5}
            ]
        }
    }
}

================
File: s1/ansi/white/white.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef LED_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  LED address
 *   |  |   */
    {0, CB6_CA1},  // esc
    {0, CB6_CA2},  // f1
    {0, CB6_CA3},  // f2
    {0, CB6_CA4},  // f3
    {0, CB6_CA5},  // f4
    {0, CB6_CA6},  // f4
    {0, CB6_CA7},  // f6
    {0, CB6_CA8},  // f7
    {0, CB6_CA9},  // f8
    {0, CB6_CA10}, // f9
    {0, CB6_CA11}, // f10
    {0, CB6_CA12}, // f11
    {0, CB6_CA13}, // f12
    {0, CB6_CA14}, // print
    {0, CB6_CA15}, // del
    {0, CB6_CA16}, // light

    {0, CB5_CA1},  // ~
    {0, CB5_CA2},  // 1!
    {0, CB5_CA3},  // 2@
    {0, CB5_CA4},  // 3#
    {0, CB5_CA5},  // 4$
    {0, CB5_CA6},  // 5%
    {0, CB5_CA7},  // 6^
    {0, CB5_CA8},  // 7&
    {0, CB5_CA9},  // 8*
    {0, CB5_CA10}, // 9(
    {0, CB5_CA11}, // 0)
    {0, CB5_CA12}, // -_
    {0, CB5_CA13}, // =+
    {0, CB5_CA14}, // back space
    {0, CB5_CA16}, // page up

    {0, CB4_CA1},  // tab
    {0, CB4_CA2},  // q
    {0, CB4_CA3},  // w
    {0, CB4_CA4},  // e
    {0, CB4_CA5},  // r
    {0, CB4_CA6},  // t
    {0, CB4_CA7},  // y
    {0, CB4_CA8},  // u
    {0, CB4_CA9},  // i
    {0, CB4_CA10}, // o
    {0, CB4_CA11}, // p
    {0, CB4_CA12}, // [{
    {0, CB4_CA13}, // ]}
    {0, CB4_CA14}, // |
    {0, CB4_CA16}, // page down

    {0, CB3_CA1},  // caps lock
    {0, CB3_CA2},  // a
    {0, CB3_CA3},  // s
    {0, CB3_CA4},  // d
    {0, CB3_CA5},  // f
    {0, CB3_CA6},  // g
    {0, CB3_CA7},  // h
    {0, CB3_CA8},  // j
    {0, CB3_CA9},  // k
    {0, CB3_CA10}, // l
    {0, CB3_CA11}, // ;:
    {0, CB3_CA12}, // '"
    {0, CB3_CA14}, // enter
    {0, CB3_CA16}, // home

    {0, CB2_CA1},  // left shift
    {0, CB2_CA3},  // z
    {0, CB2_CA4},  // x
    {0, CB2_CA5},  // c
    {0, CB2_CA6},  // v
    {0, CB2_CA7},  // b
    {0, CB2_CA8},  // b
    {0, CB2_CA9},  // n
    {0, CB2_CA10}, // m
    {0, CB2_CA11}, // ,<
    {0, CB2_CA12}, // .>
    {0, CB2_CA13}, // right shift
    {0, CB2_CA14}, // up
    {0, CB2_CA16}, // end

    {0, CB1_CA1},  // left
    {0, CB1_CA2},  // left command
    {0, CB1_CA3},  // left optin
    {0, CB1_CA7},  // space
    {0, CB1_CA10}, // right command
    {0, CB1_CA11}, // fn
    {0, CB1_CA12}, // right ctrl
    {0, CB1_CA13}, // left
    {0, CB1_CA14}, // down
    {0, CB1_CA16}, // right
};
#endif

================
File: s1/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

================
File: s1/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: s1/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    }
}

================
File: s1/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: s1/readme.md
================
# Keychron S1

A customizable 75% keyboard with RGB backlight and White backlight.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron S1
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

* For RGB backlight version:

```bash
make keychron/s1/ansi/rgb:default
```

* For White backlight version:

```bash
make keychron/s1/ansi/white:default
```

Flashing example for this keyboard:

* For RGB backlight version:

```bash
make keychron/s1/ansi/rgb:default:flash
```

* For White backlight version:

```bash
make keychron/s1/ansi/white:default:flash
```

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: s1/s1.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false; }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // RGB_MATRIX_ENABLE && CAPS_LOCK_LED_INDEX

#if defined(LED_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef LED_MATRIX_ENABLE
        case LM_TOGG:
            if (record->event.pressed) {
                switch (led_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        led_matrix_set_flags(LED_FLAG_NONE);
                        led_matrix_set_value_all(0);
                    } break;
                    default: {
                        led_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!led_matrix_is_enabled()) {
                led_matrix_set_flags(LED_FLAG_ALL);
                led_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool led_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!led_matrix_indicators_advanced_user(led_min, led_max)) { return false; }

    if (host_keyboard_led_state().caps_lock) {
        led_matrix_set_value(CAPS_LOCK_LED_INDEX, 255);

    } else {
        if (!led_matrix_get_flags()) {
            led_matrix_set_value(CAPS_LOCK_LED_INDEX, 0);
        }
    }
    return true;
}

#endif // LED_MATRIX_ENABLE && CAPS_LOCK_LED_INDEX

================
File: v1/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: v1/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, __, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, __, 44 },
        { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, __, 57, __, 58 },
        { 59, __, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, __, 70, 71, __ },
        { 72, 73, 74, __, __, __, 75, __, __, __, 76, 77, 78, 79, 80, 81 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {18,0},  {33,0},  {48,0},  {62,0},  {81,0},  {95,0},  {110,0},  {125,0},  {143,0},  {158,0},  {173,0},  {187,0},  {206,0},            {224,0},
        {0,15}, {15,15}, {29,15}, {44,15}, {59,15}, {73,15}, {88,15}, {103,15}, {118,15}, {132,15}, {147,15}, {162,15}, {176,15}, {198,15},           {224,15},
        {4,26}, {22,26}, {37,26}, {51,26}, {66,26}, {81,26}, {95,26}, {110,26}, {125,26}, {140,26}, {154,26}, {169,26}, {184,26}, {202,26},           {224,26},
        {6,38}, {26,38}, {40,38}, {55,38}, {70,38}, {84,38}, {99,38}, {114,38}, {129,38}, {143,38}, {158,38}, {173,38},           {196,38},           {224,38},
        {9,49},          {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {151,49}, {165,49},           {185,49}, {209,52},
        {2,61}, {20,61}, {39,61},                            {94,61},                               {147,61}, {162,61}, {176,61}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: v1/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0310",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "dip_switch": true,
        "rgb_matrix": true
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: v1/ansi/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_82(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_82(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_HOME,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LCMD,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_82(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v1/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v1/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, __, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, __, 44 },
        { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, __, 57, __, 58 },
        { 59, __, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, __, 70, 71, __ },
        { 72, 73, 74, __, __, __, 75, __, __, __, 76, 77, 78, 79, 80, 81 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {18,0},  {33,0},  {48,0},  {62,0},  {81,0},  {95,0},  {110,0},  {125,0},  {143,0},  {158,0},  {173,0},  {187,0},  {206,0},            {224,0},
        {0,15}, {15,15}, {29,15}, {44,15}, {59,15}, {73,15}, {88,15}, {103,15}, {118,15}, {132,15}, {147,15}, {162,15}, {176,15}, {198,15},           {224,15},
        {4,26}, {22,26}, {37,26}, {51,26}, {66,26}, {81,26}, {95,26}, {110,26}, {125,26}, {140,26}, {154,26}, {169,26}, {184,26}, {202,26},           {224,26},
        {6,38}, {26,38}, {40,38}, {55,38}, {70,38}, {84,38}, {99,38}, {114,38}, {129,38}, {143,38}, {158,38}, {173,38},           {196,38},           {224,38},
        {9,49},          {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {151,49}, {165,49},           {185,49}, {209,52},
        {2,61}, {20,61}, {39,61},                            {94,61},                               {147,61}, {162,61}, {176,61}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50 }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: v1/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0311",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "encoder": true,
        "dip_switch": true,
        "rgb_matrix": true
    },
    "layouts": {
        "LAYOUT_ansi_82": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: v1/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_INS,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______)
};

================
File: v1/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: v1/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, __, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 57, __, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, __, 56, __, 58 },
        { 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, __, 71, 72, __ },
        { 73, 74, 75, __, __, __, 76, __, __, __, 77, 78, 79, 80, 81, 82 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {18,0},  {33,0},  {48,0},  {62,0},  {81,0},  {95,0},  {110,0},  {125,0},  {143,0},  {158,0},  {173,0},  {187,0},  {206,0},            {224,0},
        {0,15}, {15,15}, {29,15}, {44,15}, {59,15}, {73,15}, {88,15}, {103,15}, {118,15}, {132,15}, {147,15}, {162,15}, {176,15}, {198,15},           {224,15},
        {4,26}, {22,26}, {37,26}, {51,26}, {66,26}, {81,26}, {95,26}, {110,26}, {125,26}, {140,26}, {154,26}, {169,26}, {184,26},                     {224,26},
        {6,38}, {26,38}, {40,38}, {55,38}, {70,38}, {84,38}, {99,38}, {114,38}, {129,38}, {143,38}, {158,38}, {173,38}, {187,38}, {203,32},           {224,38},
        {2,49}, {18,49}, {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {151,49}, {165,49},           {185,49}, {209,52},
        {2,61}, {20,61}, {39,61},                            {94,61},                               {147,61}, {162,61}, {176,61}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0312",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: v1/iso/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_83(
         KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,             KC_MUTE,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_83(
         _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,            _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
         _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_83(
         KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,             KC_MUTE,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_83(
         _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,            _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,
         _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v1/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v1/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50, 0xA6, 0xA6, 0x50 }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 44

================
File: v1/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, __, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 57, __, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, __, 56, __, 58 },
        { 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, __, 71, 72, __ },
        { 73, 74, 75, __, __, __, 76, __, __, __, 77, 78, 79, 80, 81, 82 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {18,0},  {33,0},  {48,0},  {62,0},  {81,0},  {95,0},  {110,0},  {125,0},  {143,0},  {158,0},  {173,0},  {187,0},  {206,0},            {224,0},
        {0,15}, {15,15}, {29,15}, {44,15}, {59,15}, {73,15}, {88,15}, {103,15}, {118,15}, {132,15}, {147,15}, {162,15}, {176,15}, {198,15},           {224,15},
        {4,26}, {22,26}, {37,26}, {51,26}, {66,26}, {81,26}, {95,26}, {110,26}, {125,26}, {140,26}, {154,26}, {169,26}, {184,26},                     {224,26},
        {6,38}, {26,38}, {40,38}, {55,38}, {70,38}, {84,38}, {99,38}, {114,38}, {129,38}, {143,38}, {158,38}, {173,38}, {187,38}, {203,32},           {224,38},
        {2,49}, {18,49}, {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {151,49}, {165,49},           {185,49}, {209,52},
        {2,61}, {20,61}, {39,61},                            {94,61},                               {147,61}, {162,61}, {176,61}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0313",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_83": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5}
            ]
        }
    }
}

================
File: v1/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/jis/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_86(
         KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  KC_DEL,   KC_INS,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_86(
         _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   _______,  _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
         _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_86(
         KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   KC_DEL,   KC_INS,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_86(
         _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  _______,  _______,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
         _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: v1/jis/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: v1/jis/jis.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, __, 44 },
        { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, __, 57, __, 59 },
        { 60, __, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, __ },
        { 74, 75, 76, 77, __, __, 78, __, __, 79, 80, 81, 82, 83, 84, 85 },
    },
    {
        // LED Index to Physical Position
        {0,  0},           {18,  0}, {33,  0}, {48,  0}, {62,  0}, {81,  0}, {95,   0}, {110,  0}, {125,  0}, {143,  0}, {158,  0}, {173,  0}, {187,  0}, {205,  0}, {224,  0},
        {0, 15}, {15, 15}, {29, 15}, {44, 15}, {59, 15}, {73, 15}, {88, 15}, {103, 15}, {117, 15}, {132, 15}, {147, 15}, {161, 15}, {176, 15}, {191, 15}, {205, 15}, {224, 15},
        {4, 28}, {22, 28}, {37, 28}, {51, 28}, {66, 28}, {81, 28}, {95, 28}, {110, 28}, {125, 28}, {139, 28}, {154, 28}, {169, 28}, {183, 28},                       {224, 28},
        {6, 40}, {26, 40}, {40, 40}, {55, 40}, {70, 40}, {84, 40}, {99, 40}, {114, 40}, {128, 40}, {143, 40}, {158, 40}, {172, 40}, {187, 40}, {207, 36},            {224, 40},
        {9, 52},           {33, 52}, {48, 52}, {62, 52}, {77, 52}, {92, 52}, {106, 52}, {121, 52}, {136, 52}, {150, 52}, {165, 52}, {180, 52}, {194, 52}, {209, 52},
        {2, 64}, {18, 64}, {35, 64},                     {51, 64},                      { 92, 64}, {134, 64}, {150, 64}, {165, 64}, {180, 64}, {194, 64}, {209, 64}, {224, 64},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/jis/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0314",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_jis_86": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.251},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25},
                {"matrix": [1, 14], "x": 14, "y": 1.25},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25},
                {"matrix": [5, 12], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.25},
                {"matrix": [5, 14], "x": 14.25, "y": 5.25},
                {"matrix": [5, 15], "x": 15.25, "y": 5.25}
            ]
        }
    }
}

================
File: v1/jis/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_86(
         KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  KC_DEL,   KC_MUTE,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_86(
         _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   _______,  RM_TOGG,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
         _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_86(
         KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,   KC_DEL,   KC_MUTE,
         KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_INT3,  KC_BSPC,  KC_PGUP,
         KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_PGDN,
         KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_HOME,
         KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,    KC_INT1,  KC_RSFT,  KC_UP,
         KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_86(
         _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,  _______,  RM_TOGG,
         _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
         RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
         _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,
         _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,    _______,  _______,  _______,
         _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v1/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v1/jis_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D, 0xA0, 0xA0, 0x4D }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 45

================
File: v1/jis_encoder/jis_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, __, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, __, 44 },
        { 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, __, 57, __, 59 },
        { 60, __, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, __ },
        { 74, 75, 76, 77, __, __, 78, __, __, 79, 80, 81, 82, 83, 84, 85 },
    },
    {
        // LED Index to Physical Position
        {0,  0},           {18,  0}, {33,  0}, {48,  0}, {62,  0}, {81,  0}, {95,   0}, {110,  0}, {125,  0}, {143,  0}, {158,  0}, {173,  0}, {187,  0}, {205,  0}, {224,  0},
        {0, 15}, {15, 15}, {29, 15}, {44, 15}, {59, 15}, {73, 15}, {88, 15}, {103, 15}, {117, 15}, {132, 15}, {147, 15}, {161, 15}, {176, 15}, {191, 15}, {205, 15}, {224, 15},
        {4, 28}, {22, 28}, {37, 28}, {51, 28}, {66, 28}, {81, 28}, {95, 28}, {110, 28}, {125, 28}, {139, 28}, {154, 28}, {169, 28}, {183, 28},                       {224, 28},
        {6, 40}, {26, 40}, {40, 40}, {55, 40}, {70, 40}, {84, 40}, {99, 40}, {114, 40}, {128, 40}, {143, 40}, {158, 40}, {172, 40}, {187, 40}, {207, 36},            {224, 40},
        {9, 52},           {33, 52}, {48, 52}, {62, 52}, {77, 52}, {92, 52}, {106, 52}, {121, 52}, {136, 52}, {150, 52}, {165, 52}, {180, 52}, {194, 52}, {209, 52},
        {2, 64}, {18, 64}, {35, 64},                     {51, 64},                      { 92, 64}, {134, 64}, {150, 64}, {165, 64}, {180, 64}, {194, 64}, {209, 64}, {224, 64},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v1/jis_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V1",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0315",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_jis_86": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.251},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25},
                {"matrix": [1, 14], "x": 14, "y": 1.25},
                {"matrix": [1, 15], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25},
                {"matrix": [5, 12], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.25},
                {"matrix": [5, 14], "x": 14.25, "y": 5.25},
                {"matrix": [5, 15], "x": 15.25, "y": 5.25}
            ]
        }
    }
}

================
File: v1/jis_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v1/config.h
================
/* Copyright 2021 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

================
File: v1/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v1/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v1/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN A7
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN B1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN B0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND MATRIX_ROWS

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

// At 3.6V input, three nops (37.5ns) should be enough for all signals
#define small_delay() __asm__ __volatile__("nop;nop;nop;\n\t" ::: "memory")
#define compiler_barrier() __asm__ __volatile__("" ::: "memory")

static void shiftOut(uint8_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < 8; i++) {
            compiler_barrier();
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN);
            } else {
                gpio_write_pin_low(DATA_PIN);
            }
            dataOut = dataOut >> 1;
            compiler_barrier();
            gpio_write_pin_high(CLOCK_PIN);
            small_delay();
            gpio_write_pin_low(CLOCK_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static void shiftOut_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        compiler_barrier();
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN);
        } else {
            gpio_write_pin_low(DATA_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(CLOCK_PIN);
        small_delay();
        gpio_write_pin_low(CLOCK_PIN);
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 8) {
            shiftOut_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftOut_single(0x01);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == 8)
                // unselect shift Register
                shiftOut(0xFF);
        }
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN);
    gpio_set_pin_output(CLOCK_PIN);
    gpio_set_pin_output(LATCH_PIN);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: v1/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v1/readme.md
================
# Keychron V1

A customizable 75% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V1
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v1/ansi:default

Flashing example for this keyboard:

    make keychron/v1/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v1/v1.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v10/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_89(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,            KC_LCMD,  KC_SPC,  MO(MAC_FN),                     KC_SPC,             KC_RCMD,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_ansi_89(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,            _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                      _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_ansi_89(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,            KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,            KC_ENT,             KC_HOME,
        _______,  KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,            KC_LALT,  KC_SPC,  MO(WIN_FN),                     KC_SPC,             KC_RALT,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_ansi_89(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,             _______,            _______,
        _______,  _______,            _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,   _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                       _______,  _______,  _______),
};

#if defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: v10/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v10/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // ESC
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // F1
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // F2
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // F3
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // F4
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // F5
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // F6
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // F7
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // F8
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // F9
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F10
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // F11
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // F12
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // INS
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // DEL

    {0, CB9_CA1,  CB7_CA1,  CB8_CA1},  // M1
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // `~
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // 1!
    {0, CB9_CA4,  CB7_CA4,  CB8_CA4},  // 2@
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // 3#
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // 4$
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // 5%
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // 6^
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // 7&
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // 8*
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // 9(
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // 0)
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // -_
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // =+
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // BackSpace
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // PgUp

    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // M2
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // TAB
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Q
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // W
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // E
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // R
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // T
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Y
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // U
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // I
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // O
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // P
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // [
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // ]
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // |
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // PgDn

    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // M3
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // CapsLock
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // A
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // S
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // D
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // F
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // G
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // H
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // J
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // K
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // L
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // ;
    {1, CB3_CA3,  CB1_CA3,  CB2_CA3},  // '
    {1, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Enter
    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // Home

    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // M4
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Shift_L
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Z
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // X
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // C
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // V
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // B
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // B
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // N
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // M
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ,
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // .
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // ?
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Shift_R
    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // Up

    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // M5
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Ctrl_L
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // Win_L
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Alt_L
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // Space
    {1, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Fn
    {1, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Space
    {1, CB6_CA7,  CB4_CA7,  CB5_CA7},  // Alt_R
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { __,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 },
        { 47, 48, 49, 50, 51, 52, 53, __, 54, 55, 56, 57, 58, 59, 60, 61 },
        { 62, 63, __, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76 },
        { 77, 78, 79, 80, 81, __, __, 82, 83, 84, __, __, __, 85, 86, 87 },
    },
    {
        // LED Index to Physical Position
                {19,0},  {34,0},  {46,0},  {60,1},  {72,3},  {87,6},  {99,8},   {120,8},  {132,6},  {147,3},  {159,1},  {173,0},  {185,0},  {201,1},            {219,1},
        {5,14}, {24,14}, {36,14}, {48,13}, {62,15}, {74,17}, {86,20}, {98,22},  {115,22}, {127,20}, {139,17}, {151,15}, {165,13}, {177,14}, {195,14},           {220,13},
        {4,24}, {24,24}, {40,24}, {53,24}, {65,27}, {77,29}, {89,31}, {112,33}, {124,31}, {136,29}, {148,27}, {160,24}, {174,24}, {186,24}, {201,24},           {222,25},
        {2,34}, {23,34}, {40,34}, {54,35}, {66,37}, {78,39}, {90,42}, {118,43}, {130,40}, {142,38}, {154,36}, {167,35}, {179,35},           {199,35},           {224,36},
        {0,45}, {24,45},          {44,45}, {57,46}, {69,48}, {81,51}, {93,53},  {111,54}, {123,52}, {135,50}, {147,48}, {159,46}, {173,45}, {190,45}, {210,47},
        {0,55}, {18,55}, {33,55},          {56,57}, {77,61}, {97,64},                     {124,63},           {147,59},                     {198,58}, {210,58}, {222,58},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1, 4, 1,       4,    1,       1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v10/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 48

================
File: v10/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V10",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x03A1",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_89": {
            "layout": [
                {"matrix": [0, 0], "x": 0.25, "y": 0},
                {"matrix": [0, 1], "x": 1.75, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6, "y": 0},
                {"matrix": [0, 6], "x": 7.25, "y": 0},
                {"matrix": [0, 7], "x": 8.25, "y": 0},
                {"matrix": [0, 8], "x": 11, "y": 0},
                {"matrix": [0, 9], "x": 12, "y": 0},
                {"matrix": [0, 10], "x": 13.25, "y": 0},
                {"matrix": [0, 11], "x": 14.25, "y": 0},
                {"matrix": [0, 12], "x": 15.25, "y": 0},
                {"matrix": [0, 13], "x": 16.25, "y": 0},
                {"matrix": [0, 14], "x": 17.5, "y": 0},
                {"matrix": [0, 15], "x": 18.75, "y": 0},

                {"matrix": [1, 0], "x": 0.75, "y": 1.25},
                {"matrix": [1, 1], "x": 2.25, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 7.25, "y": 1.25},
                {"matrix": [1, 7], "x": 8.25, "y": 1.25},
                {"matrix": [1, 8], "x": 10.5, "y": 1.25},
                {"matrix": [1, 9], "x": 11.5, "y": 1.25},
                {"matrix": [1, 10], "x": 12.5, "y": 1.25},
                {"matrix": [1, 11], "x": 13.5, "y": 1.25},
                {"matrix": [1, 12], "x": 14.5, "y": 1.25},
                {"matrix": [1, 13], "x": 15.5, "y": 1.25},
                {"matrix": [1, 14], "x": 16.5, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 19, "y": 1.25},

                {"matrix": [2, 0], "x": 0.5, "y": 2.25},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25, "w": 1.5},
                {"matrix": [2, 2], "x": 3.25, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 7.5, "y": 2.25},
                {"matrix": [2, 7], "x": 10, "y": 2.25},
                {"matrix": [2, 8], "x": 11, "y": 2.25},
                {"matrix": [2, 9], "x": 12, "y": 2.25},
                {"matrix": [2, 10], "x": 13, "y": 2.25},
                {"matrix": [2, 11], "x": 14, "y": 2.25},
                {"matrix": [2, 12], "x": 15.25, "y": 2.25},
                {"matrix": [2, 13], "x": 16.25, "y": 2.25},
                {"matrix": [2, 14], "x": 17.25, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 19.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0.25, "y": 3.25},
                {"matrix": [3, 1], "x": 1.5, "y": 3.25, "w": 1.75},
                {"matrix": [3, 2], "x": 3.25, "y": 3.25},
                {"matrix": [3, 3], "x": 4.5, "y": 3.25},
                {"matrix": [3, 4], "x": 5.5, "y": 3.25},
                {"matrix": [3, 5], "x": 6.5, "y": 3.25},
                {"matrix": [3, 6], "x": 7.5, "y": 3.25},
                {"matrix": [3, 8], "x": 10.25, "y": 3.25},
                {"matrix": [3, 9], "x": 11.25, "y": 3.25},
                {"matrix": [3, 10], "x": 12.25, "y": 3.25},
                {"matrix": [3, 11], "x": 13.25, "y": 3.25},
                {"matrix": [3, 12], "x": 14.75, "y": 3.25},
                {"matrix": [3, 13], "x": 15.75, "y": 3.25},
                {"matrix": [3, 14], "x": 16.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 19.5, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 4], "x": 4.75, "y": 4.25},
                {"matrix": [4, 5], "x": 5.75, "y": 4.25},
                {"matrix": [4, 6], "x": 6.75, "y": 4.25},
                {"matrix": [4, 7], "x": 7.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.5, "y": 4.25},
                {"matrix": [4, 9], "x": 10.5, "y": 4.25},
                {"matrix": [4, 10], "x": 11.5, "y": 4.25},
                {"matrix": [4, 11], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 13.5, "y": 4.25},
                {"matrix": [4, 13], "x": 15.25, "y": 4.25},
                {"matrix": [4, 14], "x": 16.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 18.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 4.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 4], "x": 6, "y": 5.25, "w": 2.25},
                {"matrix": [5, 7], "x": 8.25, "y": 5.25},
                {"matrix": [5, 8], "x": 9.5, "y": 5.25, "w": 2.75},
                {"matrix": [5, 9], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 17.25, "y": 5.5},
                {"matrix": [5, 14], "x": 18.25, "y": 5.5},
                {"matrix": [5, 15], "x": 19.25, "y": 5.5}
            ]
        }
    }
}

================
File: v10/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v10/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_90(
        KC_MUTE,  KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,  KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LOPT,            KC_LCMD,  KC_SPC,  MO(MAC_FN),                     KC_SPC,             KC_RCMD,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_iso_90(
        RM_TOGG,  _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,  _______,                      _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                      _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_iso_90(
        KC_MUTE,  KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,     KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,   KC_INS,             KC_DEL,
        _______,  KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,      KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,            KC_PGUP,
        _______,  KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,      KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                      KC_PGDN,
        _______,  KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,      KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,             KC_HOME,
        _______,  KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,      KC_B,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT,  KC_UP,
        _______,  KC_LCTL,  KC_LWIN,            KC_LALT,  KC_SPC,  MO(WIN_FN),                     KC_SPC,             KC_RALT,                      KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_iso_90(
        RM_TOGG,  _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,   RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,   KC_VOLU,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,   _______,  _______,  _______,  _______,  _______,  _______,   _______,                      _______,
        _______,  _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,   _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,            _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,   _______,  _______,  NK_TOGG,  _______,  _______,  _______,   _______,  _______,  _______,
        _______,  _______,  _______,            _______,  _______,  _______,                       _______,            _______,                       _______,  _______,  _______),
};

#if defined(ENCODER_ENABLE) && defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: v10/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v10/iso_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 47

================
File: v10/iso_encoder/iso_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA2,  CB1_CA2,  CB2_CA2},  // ESC
    {0, CB3_CA3,  CB1_CA3,  CB2_CA3},  // F1
    {0, CB3_CA4,  CB1_CA4,  CB2_CA4},  // F2
    {0, CB3_CA5,  CB1_CA5,  CB2_CA5},  // F3
    {0, CB3_CA6,  CB1_CA6,  CB2_CA6},  // F4
    {0, CB3_CA7,  CB1_CA7,  CB2_CA7},  // F5
    {0, CB3_CA8,  CB1_CA8,  CB2_CA8},  // F6
    {0, CB3_CA9,  CB1_CA9,  CB2_CA9},  // F7
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // F8
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // F9
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // F10
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // F11
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // F12
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // INS
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // DEL

    {0, CB9_CA1,  CB7_CA1,  CB8_CA1},  // M1
    {0, CB9_CA2,  CB7_CA2,  CB8_CA2},  // `~
    {0, CB9_CA3,  CB7_CA3,  CB8_CA3},  // 1!
    {0, CB9_CA4,  CB7_CA4,  CB8_CA4},  // 2@
    {0, CB9_CA5,  CB7_CA5,  CB8_CA5},  // 3#
    {0, CB9_CA6,  CB7_CA6,  CB8_CA6},  // 4$
    {0, CB9_CA7,  CB7_CA7,  CB8_CA7},  // 5%
    {0, CB9_CA8,  CB7_CA8,  CB8_CA8},  // 6^
    {0, CB9_CA9,  CB7_CA9,  CB8_CA9},  // 7&
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // 8*
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // 9(
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // 0)
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // -_
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // =+
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // BackSpace
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // PgUp

    {0, CB6_CA1,  CB4_CA1,  CB5_CA1},  // M2
    {0, CB6_CA2,  CB4_CA2,  CB5_CA2},  // TAB
    {0, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Q
    {0, CB6_CA4,  CB4_CA4,  CB5_CA4},  // W
    {0, CB6_CA5,  CB4_CA5,  CB5_CA5},  // E
    {0, CB6_CA6,  CB4_CA6,  CB5_CA6},  // R
    {0, CB6_CA7,  CB4_CA7,  CB5_CA7},  // T
    {0, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Y
    {0, CB6_CA9,  CB4_CA9,  CB5_CA9},  // U
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // I
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // O
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // P
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // [
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // ]
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // PgDn

    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // M3
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // CapsLock
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // A
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // S
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // D
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // F
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // G
    {1, CB3_CA8,  CB1_CA8,  CB2_CA8},  // H
    {1, CB3_CA7,  CB1_CA7,  CB2_CA7},  // J
    {1, CB3_CA6,  CB1_CA6,  CB2_CA6},  // K
    {1, CB3_CA5,  CB1_CA5,  CB2_CA5},  // L
    {1, CB3_CA4,  CB1_CA4,  CB2_CA4},  // ;
    {1, CB3_CA3,  CB1_CA3,  CB2_CA3},  // '
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // |
    {1, CB3_CA2,  CB1_CA2,  CB2_CA2},  // Enter
    {1, CB3_CA1,  CB1_CA1,  CB2_CA1},  // Home

    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // M4
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Shift_L
    {1, CB9_CA14, CB7_CA14, CB8_CA14},
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Z
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // X
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // C
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // V
    {1, CB9_CA9,  CB7_CA9,  CB8_CA9},  // B
    {1, CB9_CA8,  CB7_CA8,  CB8_CA8},  // B
    {1, CB9_CA7,  CB7_CA7,  CB8_CA7},  // N
    {1, CB9_CA6,  CB7_CA6,  CB8_CA6},  // M
    {1, CB9_CA5,  CB7_CA5,  CB8_CA5},  // ,
    {1, CB9_CA4,  CB7_CA4,  CB8_CA4},  // .
    {1, CB9_CA3,  CB7_CA3,  CB8_CA3},  // ?
    {1, CB9_CA2,  CB7_CA2,  CB8_CA2},  // Shift_R
    {1, CB9_CA1,  CB7_CA1,  CB8_CA1},  // Up

    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // M5
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Ctrl_L
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // Win_L
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Alt_L
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // Space
    {1, CB6_CA9,  CB4_CA9,  CB5_CA9},  // Fn
    {1, CB6_CA8,  CB4_CA8,  CB5_CA8},  // Space
    {1, CB6_CA7,  CB4_CA7,  CB5_CA7},  // Alt_R
    {1, CB6_CA3,  CB4_CA3,  CB5_CA3},  // Left
    {1, CB6_CA2,  CB4_CA2,  CB5_CA2},  // Down
    {1, CB6_CA1,  CB4_CA1,  CB5_CA1},  // Right
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { __,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 59, 45 },
        { 46, 47, 48, 49, 50, 51, 52, __, 53, 54, 55, 56, 57, 58, 60, 61 },
        { 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77 },
        { 78, 79, 80, 81, 82, __, __, 83, 84, 85, __, __, __, 86, 87, 88 },
    },
    {
        // LED Index to Physical Position
                {0,0},    {19,0},  {34,0},  {60,1},  {72,3},   {87,6},   {99,8},  {120,8},  {132,6},  {147,3},  {159,1},  {173,0},  {185,0},  {201,1},            {219,1},
        {5,14}, {24,14}, {36,14}, {48,13}, {62,15}, {74,17},  {86,20},  {98,22}, {115,22}, {127,20}, {139,17}, {151,15}, {165,13}, {177,14}, {195,14},           {220,15},
        {4,24}, {24,24}, {40,24}, {53,24}, {65,27}, {77,29},  {89,31}, {112,33}, {124,31}, {136,29}, {148,27}, {160,24}, {176,24}, {189,24},                     {222,25},
        {2,34}, {23,34}, {40,34}, {54,35}, {66,37}, {78,39},  {90,42}, {118,43}, {130,40}, {142,38}, {154,36}, {167,35}, {179,35}, {192,35}, {208,31},           {224,36},
        {0,45}, {18,45}, {31,45}, {44,45}, {57,46}, {69,48},  {81,51},  {93,53}, {111,54}, {123,52}, {135,50}, {147,48}, {159,46}, {173,45}, {190,45}, {210,47},
        {0,55}, {18,55}, {33,55},          {56,57}, {77,61},  {97,64},                     {124,63},           {147,59},                     {198,58}, {210,58}, {222,58},
    },
    {
        // RGB LED Index to Flag
           1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        1, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1, 4, 1,       4,    1,       1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v10/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V10",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x03A3",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "bootmagic": {
        "matrix": [0, 1]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_90": {
            "layout": [
                {"matrix": [0, 0], "x": 0.25, "y": 0},
                {"matrix": [0, 1], "x": 1.75, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6, "y": 0},
                {"matrix": [0, 6], "x": 7.25, "y": 0},
                {"matrix": [0, 7], "x": 8.25, "y": 0},
                {"matrix": [0, 8], "x": 11, "y": 0},
                {"matrix": [0, 9], "x": 12, "y": 0},
                {"matrix": [0, 10], "x": 13.25, "y": 0},
                {"matrix": [0, 11], "x": 14.25, "y": 0},
                {"matrix": [0, 12], "x": 15.25, "y": 0},
                {"matrix": [0, 13], "x": 16.25, "y": 0},
                {"matrix": [0, 14], "x": 17.5, "y": 0},
                {"matrix": [0, 15], "x": 18.75, "y": 0},

                {"matrix": [1, 0], "x": 0.75, "y": 1.25},
                {"matrix": [1, 1], "x": 2.25, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 7.25, "y": 1.25},
                {"matrix": [1, 7], "x": 8.25, "y": 1.25},
                {"matrix": [1, 8], "x": 10.5, "y": 1.25},
                {"matrix": [1, 9], "x": 11.5, "y": 1.25},
                {"matrix": [1, 10], "x": 12.5, "y": 1.25},
                {"matrix": [1, 11], "x": 13.5, "y": 1.25},
                {"matrix": [1, 12], "x": 14.5, "y": 1.25},
                {"matrix": [1, 13], "x": 15.5, "y": 1.25},
                {"matrix": [1, 14], "x": 16.5, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 19, "y": 1.25},

                {"matrix": [2, 0], "x": 0.5, "y": 2.25},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25, "w": 1.5},
                {"matrix": [2, 2], "x": 3.25, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 7.5, "y": 2.25},
                {"matrix": [2, 7], "x": 10, "y": 2.25},
                {"matrix": [2, 8], "x": 11, "y": 2.25},
                {"matrix": [2, 9], "x": 12, "y": 2.25},
                {"matrix": [2, 10], "x": 13, "y": 2.25},
                {"matrix": [2, 11], "x": 14, "y": 2.25},
                {"matrix": [2, 12], "x": 15.25, "y": 2.25},
                {"matrix": [2, 13], "x": 16.25, "y": 2.25},
                {"matrix": [2, 15], "x": 19.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0.25, "y": 3.25},
                {"matrix": [3, 1], "x": 1.5, "y": 3.25, "w": 1.75},
                {"matrix": [3, 2], "x": 3.25, "y": 3.25},
                {"matrix": [3, 3], "x": 4.5, "y": 3.25},
                {"matrix": [3, 4], "x": 5.5, "y": 3.25},
                {"matrix": [3, 5], "x": 6.5, "y": 3.25},
                {"matrix": [3, 6], "x": 7.5, "y": 3.25},
                {"matrix": [3, 8], "x": 10.25, "y": 3.25},
                {"matrix": [3, 9], "x": 11.25, "y": 3.25},
                {"matrix": [3, 10], "x": 12.25, "y": 3.25},
                {"matrix": [3, 11], "x": 13.25, "y": 3.25},
                {"matrix": [3, 12], "x": 14.75, "y": 3.25},
                {"matrix": [3, 13], "x": 15.75, "y": 3.25},
                {"matrix": [3, 14], "x": 16.75, "y": 3.25},
                {"matrix": [2, 14], "x": 17.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 19.5, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25},
                {"matrix": [4, 1], "x": 1.5, "y": 4.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 4], "x": 4.75, "y": 4.25},
                {"matrix": [4, 5], "x": 5.75, "y": 4.25},
                {"matrix": [4, 6], "x": 6.75, "y": 4.25},
                {"matrix": [4, 7], "x": 7.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.5, "y": 4.25},
                {"matrix": [4, 9], "x": 10.5, "y": 4.25},
                {"matrix": [4, 10], "x": 11.5, "y": 4.25},
                {"matrix": [4, 11], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 13.5, "y": 4.25},
                {"matrix": [4, 13], "x": 15.25, "y": 4.25},
                {"matrix": [4, 14], "x": 16.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 18.25, "y": 4.5},

                {"matrix": [5, 0], "x": 0, "y": 5.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 4.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 4], "x": 6, "y": 5.25, "w": 2.25},
                {"matrix": [5, 7], "x": 8.25, "y": 5.25},
                {"matrix": [5, 8], "x": 9.5, "y": 5.25, "w": 2.75},
                {"matrix": [5, 9], "x": 12.25, "y": 5.25},
                {"matrix": [5, 13], "x": 17.25, "y": 5.5},
                {"matrix": [5, 14], "x": 18.25, "y": 5.5},
                {"matrix": [5, 15], "x": 19.25, "y": 5.5}
            ]
        }
    }
}

================
File: v10/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v10/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* Pin connected to DS of 74HC595 */
#define DATA_PIN_74HC595 A7
/* Pin connected to SH_CP of 74HC595 */
#define CLOCK_PIN_74HC595 B1
/* Pin connected to ST_CP of 74HC595 */
#define LATCH_PIN_74HC595 B0

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE { 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A, 0x98, 0x98, 0x4A }

================
File: v10/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE
#define PAL_USE_CALLBACKS TRUE

#include_next <halconf.h>

================
File: v10/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 5] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v10/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

#ifndef PIN_USED_74HC595
#    define PIN_USED_74HC595 8
#endif
#ifndef PIN_START_74HC595
#    define PIN_START_74HC595 8
#endif

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

void small_delay(volatile uint8_t timeout) {
    while (timeout--);
}

static void shiftOut(uint16_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < PIN_USED_74HC595; i++) {
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN_74HC595);
            } else {
                gpio_write_pin_low(DATA_PIN_74HC595);
            }
            dataOut = dataOut >> 1;
            gpio_write_pin_high(CLOCK_PIN_74HC595);
            small_delay(2);
            gpio_write_pin_low(CLOCK_PIN_74HC595);
        }
        gpio_write_pin_high(LATCH_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(LATCH_PIN_74HC595);
    }
}

static void shiftOut_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN_74HC595);
        } else {
            gpio_write_pin_low(DATA_PIN_74HC595);
        }
        gpio_write_pin_high(CLOCK_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(CLOCK_PIN_74HC595);
        gpio_write_pin_high(LATCH_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(LATCH_PIN_74HC595);
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == PIN_START_74HC595) {
            shiftOut_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftOut_single(0x01);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];

        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == PIN_START_74HC595)
            // unselect Shift Register
            shiftOut(0xFFFF);
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN_74HC595);
    gpio_set_pin_output(CLOCK_PIN_74HC595);
    gpio_set_pin_output(LATCH_PIN_74HC595);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: v10/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v10/readme.md
================
# Keychron V10

A customizable 75% ergonomic keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V10
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v10/ansi_encoder:default
    make keychron/v10/iso_encoder:default

Flashing example for this keyboard:

    make keychron/v10/ansi_encoder:default:flash
    make keychron/v10/iso_encoder:default:flash

**Reset Key**: Hold down the key located at *K01*, which programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v10/v10.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v2/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_67(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

================
File: v2/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 65, 42, 43 },
        { 44, __, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, __, 55, 56 },
        { 57, 58, 59, __, __, __, 60, __, __, __, 61, 62, 63, 64, 66 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {15,0},  {29,0},  {44,0},  {59,0},  {73,0},  {88,0},  {103,0},  {118,0},  {132,0},  {147,0},  {162,0},  {176,0},  {198,0},            {224,0},  // {244,-4}
        {4,15}, {22,15}, {37,15}, {51,15}, {66,15}, {81,15}, {95,15}, {110,15}, {125,15}, {140,15}, {154,15}, {169,15}, {184,15}, {202,15},           {224,15},
        {6,30}, {26,30}, {40,30}, {55,30}, {70,30}, {84,30}, {99,30}, {114,30}, {129,30}, {143,30}, {158,30}, {173,30},           {196,30},           {224,30},
        {9,45},          {33,45}, {48,45}, {62,45}, {77,45}, {92,45}, {106,45}, {121,45}, {136,45}, {151,45}, {165,45},           {185,45}, {209,49},
        {2,60}, {20,60}, {39,60},                            {94,60},                               {147,60}, {162,60}, {176,60}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60, 0xCA, 0xCA, 0x60 }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v2/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0320",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_67": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 13], "x": 13.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: v2/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_67(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_67(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_67(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = { ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v2/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v2/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 65, 42, 43 },
        { 44, __, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, __, 55, 56 },
        { 57, 58, 59, __, __, __, 60, __, __, __, 61, 62, 63, 64, 66 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {15,0},  {29,0},  {44,0},  {59,0},  {73,0},  {88,0},  {103,0},  {118,0},  {132,0},  {147,0},  {162,0},  {176,0},  {198,0},            {224,0},  // {244,-4}
        {4,15}, {22,15}, {37,15}, {51,15}, {66,15}, {81,15}, {95,15}, {110,15}, {125,15}, {140,15}, {154,15}, {169,15}, {184,15}, {202,15},           {224,15},
        {6,30}, {26,30}, {40,30}, {55,30}, {70,30}, {84,30}, {99,30}, {114,30}, {129,30}, {143,30}, {158,30}, {173,30},           {196,30},           {224,30},
        {9,45},          {33,45}, {48,45}, {62,45}, {77,45}, {92,45}, {106,45}, {121,45}, {136,45}, {151,45}, {165,45},           {185,45}, {209,49},
        {2,60}, {20,60}, {39,60},                            {94,60},                               {147,60}, {162,60}, {176,60}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v2/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0321",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "encoder": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_67": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 13], "x": 13.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: v2/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_68(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

================
File: v2/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: v2/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
	{1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,   9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 28 },
        { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 66, 41, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, __, 56, 57 },
        { 58, 59, 60, __, __, __, 61, __, __, __, 62, 63, 64, 65, 67 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {15,0},  {29,0},  {44,0},  {59,0},  {73,0},  {88,0},  {103,0},  {118,0},  {132,0},  {147,0},  {162,0},  {176,0},  {198,0},            {224,0},
        {4,15}, {22,15}, {37,15}, {51,15}, {66,15}, {81,15}, {95,15}, {110,15}, {125,15}, {140,15}, {154,15}, {169,15}, {184,15},                     {224,15},
        {6,30}, {26,30}, {40,30}, {55,30}, {70,30}, {84,30}, {99,30}, {114,30}, {129,30}, {143,30}, {158,30}, {173,30}, {187,30}, {204,23},           {224,30},
        {2,45}, {18,45}, {33,45}, {48,45}, {62,45}, {77,45}, {92,45}, {106,45}, {121,45}, {136,45}, {151,45}, {165,45},           {185,45}, {209,49},
        {2,60}, {20,60}, {39,60},                            {94,60},                               {147,60}, {162,60}, {176,60}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0322",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_iso_68": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: v2/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_68(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_68(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_68(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = { ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v2/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v2/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: v2/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
	{1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,   9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 28 },
        { 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 66, 41, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, __, 56, 57 },
        { 58, 59, 60, __, __, __, 61, __, __, __, 62, 63, 64, 65, 67 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {15,0},  {29,0},  {44,0},  {59,0},  {73,0},  {88,0},  {103,0},  {118,0},  {132,0},  {147,0},  {162,0},  {176,0},  {198,0},            {224,0},
        {4,15}, {22,15}, {37,15}, {51,15}, {66,15}, {81,15}, {95,15}, {110,15}, {125,15}, {140,15}, {154,15}, {169,15}, {184,15},                     {224,15},
        {6,30}, {26,30}, {40,30}, {55,30}, {70,30}, {84,30}, {99,30}, {114,30}, {129,30}, {143,30}, {158,30}, {173,30}, {187,30}, {204,23},           {224,30},
        {2,45}, {18,45}, {33,45}, {48,45}, {62,45}, {77,45}, {92,45}, {106,45}, {121,45}, {136,45}, {151,45}, {165,45},           {185,45}, {209,49},
        {2,60}, {20,60}, {39,60},                            {94,60},                               {147,60}, {162,60}, {176,60}, {195,64}, {209,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0323",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "encoder": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_iso_68": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 13], "x": 12.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 14.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4.25, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4.25, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4.25},
                {"matrix": [4, 11], "x": 11, "y": 4.25},
                {"matrix": [4, 12], "x": 12, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.5},
                {"matrix": [2, 12], "x": 14.25, "y": 4.5},
                {"matrix": [4, 14], "x": 15.25, "y": 4.5}
            ]
        }
    }
}

================
File: v2/jis/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,  KC_LNG2,                   KC_SPC,                    KC_LNG1, KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,  KC_INT5,                   KC_SPC,                    KC_INT4, KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_jis_71(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______)
};

================
File: v2/jis/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D }

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v2/jis/jis.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 15 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 43, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 69, 42, 44 },
        { 45, 14, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
        { 59, 60, 61, 62, __, __, 63, __, __, 64, 65, 66, 67, 68, 70 }
    },
    {
        // LED Index to Physical Position
        {0,4},  {15,4},  {29,4},  {44,4},  {59,4},  {73,4},  {88,4},  {103,4},  {117,4},  {132,4},  {146,4},  {161,4},  {176,4},  {190,4},  {205,4},  {224,0},
        {4,19}, {22,19}, {37,19}, {51,19}, {66,19}, {81,19}, {95,19}, {110,19}, {125,19}, {139,19}, {154,19}, {168,19}, {183,19},                     {224,19},
        {6,34}, {26,34}, {40,34}, {55,34}, {70,34}, {84,34}, {99,34}, {114,34}, {128,34}, {143,34}, {158,34}, {172,34}, {187,34}, {207,29},           {224,34},
        {9,49},          {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {150,49}, {165,49}, {179,49}, {194,49}, {209,49},
        {2,64}, {18,64}, {35,64}, {51,64},                   {92,64},                     {134,64}, {150,64}, {165,64}, {179,64}, {194,64}, {209,64}, {223,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/jis/keyboard.json
================
{
    "keyboard_name": "Keychron V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0324",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_jis_71": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25},
                {"matrix": [3, 1], "x": 14, "y": 0.25},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 12], "x": 12.25, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.25},
                {"matrix": [3, 14], "x": 14.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 6], "x": 4.5, "y": 4.25, "w": 4.5},
                {"matrix": [4, 9], "x": 9, "y": 4.25, "w": 1.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [2, 12], "x": 14.25, "y": 4.25},
                {"matrix": [4, 14], "x": 15.25, "y": 4.25}
            ]
        }
    }
}

================
File: v2/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,  KC_LNG2,                   KC_SPC,                    KC_LNG1, KC_RCMD,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_jis_71(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_INT3, KC_BSPC, KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,  KC_INT1,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,  KC_INT5,                   KC_SPC,                    KC_INT4, KC_RALT,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_jis_71(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______, _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_jis_71(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______, _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,  _______,                   _______,                   _______, _______,  _______,  _______,  _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = { ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v2/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v2/jis_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define SNLED27351_CURRENT_TUNE \
    { 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D, 0xBD, 0xBD, 0x5D }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v2/jis_encoder/jis_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        { 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 15 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 43, 29 },
        { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 69, 42, 44 },
        { 45, 14, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
        { 59, 60, 61, 62, __, __, 63, __, __, 64, 65, 66, 67, 68, 70 },
    },
    {
        // LED Index to Physical Position
        {0,4},  {15,4},  {29,4},  {44,4},  {59,4},  {73,4},  {88,4},  {103,4},  {117,4},  {132,4},  {146,4},  {161,4},  {176,4},  {190,4},  {205,4},  {224,0},
        {4,19}, {22,19}, {37,19}, {51,19}, {66,19}, {81,19}, {95,19}, {110,19}, {125,19}, {139,19}, {154,19}, {168,19}, {183,19},                     {224,19},
        {6,34}, {26,34}, {40,34}, {55,34}, {70,34}, {84,34}, {99,34}, {114,34}, {128,34}, {143,34}, {158,34}, {172,34}, {187,34}, {207,29},           {224,34},
        {9,49},          {33,49}, {48,49}, {62,49}, {77,49}, {92,49}, {106,49}, {121,49}, {136,49}, {150,49}, {165,49}, {179,49}, {194,49}, {209,49},
        {2,64}, {18,64}, {35,64}, {51,64},                   {92,64},                     {134,64}, {150,64}, {165,64}, {179,64}, {194,64}, {209,64}, {223,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v2/jis_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V2",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0325",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "encoder": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_jis_71": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0.25},
                {"matrix": [0, 1], "x": 1, "y": 0.25},
                {"matrix": [0, 2], "x": 2, "y": 0.25},
                {"matrix": [0, 3], "x": 3, "y": 0.25},
                {"matrix": [0, 4], "x": 4, "y": 0.25},
                {"matrix": [0, 5], "x": 5, "y": 0.25},
                {"matrix": [0, 6], "x": 6, "y": 0.25},
                {"matrix": [0, 7], "x": 7, "y": 0.25},
                {"matrix": [0, 8], "x": 8, "y": 0.25},
                {"matrix": [0, 9], "x": 9, "y": 0.25},
                {"matrix": [0, 10], "x": 10, "y": 0.25},
                {"matrix": [0, 11], "x": 11, "y": 0.25},
                {"matrix": [0, 12], "x": 12, "y": 0.25},
                {"matrix": [0, 13], "x": 13, "y": 0.25},
                {"matrix": [3, 1], "x": 14, "y": 0.25},
                {"matrix": [0, 14], "x": 15.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1.25},
                {"matrix": [1, 2], "x": 2.5, "y": 1.25},
                {"matrix": [1, 3], "x": 3.5, "y": 1.25},
                {"matrix": [1, 4], "x": 4.5, "y": 1.25},
                {"matrix": [1, 5], "x": 5.5, "y": 1.25},
                {"matrix": [1, 6], "x": 6.5, "y": 1.25},
                {"matrix": [1, 7], "x": 7.5, "y": 1.25},
                {"matrix": [1, 8], "x": 8.5, "y": 1.25},
                {"matrix": [1, 9], "x": 9.5, "y": 1.25},
                {"matrix": [1, 10], "x": 10.5, "y": 1.25},
                {"matrix": [1, 11], "x": 11.5, "y": 1.25},
                {"matrix": [1, 12], "x": 12.5, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2.25},
                {"matrix": [2, 2], "x": 2.75, "y": 2.25},
                {"matrix": [2, 3], "x": 3.75, "y": 2.25},
                {"matrix": [2, 4], "x": 4.75, "y": 2.25},
                {"matrix": [2, 5], "x": 5.75, "y": 2.25},
                {"matrix": [2, 6], "x": 6.75, "y": 2.25},
                {"matrix": [2, 7], "x": 7.75, "y": 2.25},
                {"matrix": [2, 8], "x": 8.75, "y": 2.25},
                {"matrix": [2, 9], "x": 9.75, "y": 2.25},
                {"matrix": [2, 10], "x": 10.75, "y": 2.25},
                {"matrix": [2, 11], "x": 11.75, "y": 2.25},
                {"matrix": [2, 13], "x": 12.75, "y": 2.25},
                {"matrix": [1, 13], "x": 13.75, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.25, "y": 3.25},
                {"matrix": [3, 4], "x": 4.25, "y": 3.25},
                {"matrix": [3, 5], "x": 5.25, "y": 3.25},
                {"matrix": [3, 6], "x": 6.25, "y": 3.25},
                {"matrix": [3, 7], "x": 7.25, "y": 3.25},
                {"matrix": [3, 8], "x": 8.25, "y": 3.25},
                {"matrix": [3, 9], "x": 9.25, "y": 3.25},
                {"matrix": [3, 10], "x": 10.25, "y": 3.25},
                {"matrix": [3, 11], "x": 11.25, "y": 3.25},
                {"matrix": [3, 12], "x": 12.25, "y": 3.25},
                {"matrix": [3, 13], "x": 13.25, "y": 3.25},
                {"matrix": [3, 14], "x": 14.25, "y": 3.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 3.5, "y": 4.25},
                {"matrix": [4, 6], "x": 4.5, "y": 4.25, "w": 4.5},
                {"matrix": [4, 9], "x": 9, "y": 4.25, "w": 1.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25},
                {"matrix": [2, 12], "x": 14.25, "y": 4.25},
                {"matrix": [4, 14], "x": 15.25, "y": 4.25}
            ]
        }
    }
}

================
File: v2/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If uses PH3 with a stronger pull resistor then the following definition should be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

#define DYNAMIC_KEYMAP_LAYER_COUNT 5

================
File: v2/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v2/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v2/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v2/readme.md
================
# Keychron V2

A customizable 65% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V2
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v2/ansi:default

Flashing example for this keyboard:

    make keychron/v2/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v2/v2.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)
bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v3/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_ansi(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_ansi(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_ansi(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: v3/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, __, 13, 14 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
        { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 },
        { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 49, 62, 15, 32 },
        { 63, __, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, __, 74, 86, 75 },
        { 76, 77, 78, __, __, __, 79, __, __, __, 80, 81, 82, 83, 84, 85 },
    },
    {
        // LED Index to Physical Position
        {0,0},           {26,0},  {39,0},  {52,0},  {65,0},  {85,0},  {98,0},   {111,0},  {124,0},  {143,0},  {156,0},  {169,0},  {182,0},  {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {176,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {20,28}, {33,28}, {46,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28}, {179,28}, {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40},           {174,40},
        {8,52},          {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52},           {171,52},           {211,52},
        {2,64}, {18,64}, {34,64},                            {83,64},                               {131,64}, {148,64}, {164,64}, {180,64}, {198,64}, {211,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v3/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, A6, A7, B0, B1, A8, A9, A10, H3 }

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

#define SNLED27351_CURRENT_TUNE \
    { 0x95, 0x95, 0x55, 0x95, 0x95, 0x55, 0x95, 0x95, 0x55, 0x95, 0x95, 0x55 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: v3/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "usb": {
        "vid": "0x3434",
        "pid": "0x0330",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_tkl_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_f13_ansi(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_f13_ansi(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_f13_ansi(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_f13_ansi(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
};
#endif // ENCODER_MAP_ENABLE

================
File: v3/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v3/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    // {0, CB9_CA14,   CB7_CA14,   CB8_CA14}, // Encoder
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, __, 13, 14 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
        { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 },
        { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 49, 62, 15, 32 },
        { 63, __, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, __, 74, 86, 75 },
        { 76, 77, 78, __, __, __, 79, __, __, __, 80, 81, 82, 83, 84, 85 },
    },
    {
        // LED Index to Physical Position
        {0,0},  {16,0},  {29,0},  {42,0},  {55,0},  {71,0},  {84,0},  {97,0},   {110,0},  {126,0},  {139,0},  {152,0},  {165,0},            {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {176,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {19,28}, {32,28}, {45,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28}, {179,28}, {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40},           {174,40},
        {8,52},          {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52},           {171,52},           {211,52},
        {2,64}, {18,64}, {34,64},                            {83,64},                               {131,64}, {148,64}, {164,64}, {180,64}, {198,64}, {211,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v3/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: v3/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0331",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_tkl_f13_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v3/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_iso(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_iso(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_iso(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_iso(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

================
File: v3/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, A6, A7, B0, B1, A8, A9, A10, H3 }

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 49

================
File: v3/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, __, 13, 14 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
        { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 62, 46, 47 },
        { 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 48, 61, 15, 32 },
        { 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, __, 75, 87, 76 },
        { 77, 78, 79, __, __, __, 80, __, __, __, 81, 82, 83, 84, 85, 86 },
    },
    {
        // LED Index to Physical Position
        {0,0},           {26,0},  {39,0},  {52,0},  {65,0},  {84,0},  {97,0},   {111,0},  {124,0},  {143,0},  {156,0},  {169,0},  {182,0},  {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {176,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {19,28}, {32,28}, {45,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28},           {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40}, {166,40}, {183,36},
        {2,52}, {16,52}, {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52},           {171,52},           {211,52},
        {2,64}, {18,64}, {34,64},                            {83,64},                               {131,64}, {148,64}, {164,64}, {180,64}, {198,64}, {211,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v3/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "features": {
        "bootmagic": true,
        "command": false,
        "console": true,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "usb": {
        "vid": "0x3434",
        "pid": "0x0332",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_tkl_iso": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_tkl_f13_iso(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_tkl_f13_iso(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_tkl_f13_iso(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,
        KC_LCTL,  KC_LCMD,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_tkl_f13_iso(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
};
#endif // ENCODER_MAP_ENABLE

================
File: v3/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v3/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 49

================
File: v3/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},

    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, __, 13, 14 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
        { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 62, 46, 47 },
        { 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 48, 61, 15, 32 },
        { 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, __, 75, 87, 76 },
        { 77, 78, 79, __, __, __, 80, __, __, __, 81, 82, 83, 84, 85, 86 },
    },
    {
        // LED Index to Physical Position
        {0,0},  {16,0},  {29,0},  {42,0},  {55,0},  {71,0},  {84,0},  {97,0},   {110,0},  {126,0},  {139,0},  {152,0},  {165,0},            {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {176,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {19,28}, {32,28}, {45,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28},           {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40}, {166,40}, {183,36},
        {2,52}, {16,52}, {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52},           {171,52},           {211,52},
        {2,64}, {18,64}, {34,64},                            {83,64},                               {131,64}, {148,64}, {164,64}, {180,64}, {198,64}, {211,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v3/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0333",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_tkl_f13_iso": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v3/jis/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_91(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,            KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,    KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_91(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,             _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_91(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,             KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,    KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_91(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,            _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),
};

================
File: v3/jis/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, A6, A7, B0, B1, A8, A9, A10, H3 }

/* If PH3 used with a stronger pull resistor then the following definition needs be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

#define SNLED27351_CURRENT_TUNE \
    { 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44 }

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 50

================
File: v3/jis/jis.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |    G location
 *   |  |    |    B location
 *   |  |    |    | */
    {0, CB9_CA1, CB7_CA1, CB8_CA1},    // ESC
    {0, CB9_CA2, CB7_CA2, CB8_CA2},    // F1
    {0, CB9_CA3, CB7_CA3, CB8_CA3},    // F2
    {0, CB9_CA4, CB7_CA4, CB8_CA4},    // F3
    {0, CB9_CA5, CB7_CA5, CB8_CA5},    // F4
    {0, CB9_CA6, CB7_CA6, CB8_CA6},    // F5
    {0, CB9_CA7, CB7_CA7, CB8_CA7},    // F6
    {0, CB9_CA8, CB7_CA8, CB8_CA8},    // F7
    {0, CB9_CA9, CB7_CA9, CB8_CA9},    // F8
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // F9
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // F10
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // F11
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // F12
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // Print
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // Cortana
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Light

    {0, CB3_CA1, CB1_CA1, CB2_CA1},    // `~
    {0, CB3_CA2, CB1_CA2, CB2_CA2},    // 1!
    {0, CB3_CA3, CB1_CA3, CB2_CA3},    // 2@
    {0, CB3_CA4, CB1_CA4, CB2_CA4},    // 3#
    {0, CB3_CA5, CB1_CA5, CB2_CA5},    // 4$
    {0, CB3_CA6, CB1_CA6, CB2_CA6},    // 5%
    {0, CB3_CA7, CB1_CA7, CB2_CA7},    // 6^
    {0, CB3_CA8, CB1_CA8, CB2_CA8},    // 7&
    {0, CB3_CA9, CB1_CA9, CB2_CA9},    // 8*
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // 9()
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // 0)
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // -_
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // =+
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // /
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // Backspace
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // Ins
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // Home
    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // Page Up

    {0, CB6_CA1, CB4_CA1, CB5_CA1},    // tab
    {0, CB6_CA2, CB4_CA2, CB5_CA2},    // Q
    {0, CB6_CA3, CB4_CA3, CB5_CA3},    // W
    {0, CB6_CA4, CB4_CA4, CB5_CA4},    // E
    {0, CB6_CA5, CB4_CA5, CB5_CA5},    // R
    {0, CB6_CA6, CB4_CA6, CB5_CA6},    // T
    {0, CB6_CA7, CB4_CA7, CB5_CA7},    // Y
    {0, CB6_CA8, CB4_CA8, CB5_CA8},    // U
    {0, CB6_CA9, CB4_CA9, CB5_CA9},    // I
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // O
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // P
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // [{
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // }}
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // Del
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // End
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Page Down

    {1, CB9_CA1, CB7_CA1, CB8_CA1},    // Cpas
    {1, CB9_CA2, CB7_CA2, CB8_CA2},    // A
    {1, CB9_CA3, CB7_CA3, CB8_CA3},    // S
    {1, CB9_CA4, CB7_CA4, CB8_CA4},    // D
    {1, CB9_CA5, CB7_CA5, CB8_CA5},    // F
    {1, CB9_CA6, CB7_CA6, CB8_CA6},    // G
    {1, CB9_CA7, CB7_CA7, CB8_CA7},    // H
    {1, CB9_CA8, CB7_CA8, CB8_CA8},    // J
    {1, CB9_CA9, CB7_CA9, CB8_CA9},    // K
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // L
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // ;
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // :
    {1, CB9_CA14, CB7_CA14, CB8_CA14}, // #~
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // Enter

    {1, CB3_CA1, CB1_CA1, CB2_CA1},    // LShift
    {1, CB3_CA3, CB1_CA3, CB2_CA3},    // Z
    {1, CB3_CA4, CB1_CA4, CB2_CA4},    // X
    {1, CB3_CA5, CB1_CA5, CB2_CA5},    // C
    {1, CB3_CA6, CB1_CA6, CB2_CA6},    // V
    {1, CB3_CA7, CB1_CA7, CB2_CA7},    // B
    {1, CB3_CA8, CB1_CA8, CB2_CA8},    // N
    {1, CB3_CA9, CB1_CA9, CB2_CA9},    // M
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // ,<
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // .>
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // /?
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // |
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // RShift
    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // Up

    {1, CB6_CA1, CB4_CA1, CB5_CA1},    // LCtrl
    {1, CB6_CA2, CB4_CA2, CB5_CA2},    // LWin
    {1, CB6_CA3, CB4_CA3, CB5_CA3},    // LAlt
    {1, CB6_CA4, CB4_CA4, CB5_CA4},    // NUm
    {1, CB6_CA7, CB4_CA7, CB5_CA7},    // Space
    {1, CB6_CA10, CB4_CA10, CB5_CA10}, // Jap
    {1, CB6_CA11, CB4_CA11, CB5_CA11}, // RAlt
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // RWin
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Fn
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // RCtrl
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Left
    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // Down
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // Right
};

#    define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 30, 13, 14 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32 },
        { 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 63, 47, 48 },
        { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 49, 62, 15, 33 },
        { 64, __, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90, 77 },
        { 78, 79, 80, 81, __, __, 82, __, __, 83, 84, 85, 86, 87, 88, 89 },
    },
    {
        // LED Index to Physical Position
        {0,0},           {26,0},  {39,0},  {52,0},  {65,0},  {84,0},  {97,0},   {111,0},  {124,0},  {143,0},  {156,0},  {169,0},  {182,0},            {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {182,15}, {169,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {19,28}, {32,28}, {45,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28},                     {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40}, {166,40}, {183,36},
        {8,52},          {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52}, {159,52}, {177,52},                     {211,52},
        {2,64}, {16,64}, {31,64}, {45,64},                   {81,64},                     {119,64}, {135,64}, {151,64}, {166,64}, {180,64},           {198,64}, {211,64}, {224,64}
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,       1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1,    1, 1, 1,
    }
};

#endif // GB_MATRIX_ENABLE

================
File: v3/jis/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "usb": {
        "vid": "0x3434",
        "pid": "0x0334",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_jis_91": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [0, 13], "x": 13, "y": 1.25},
                {"matrix": [1, 13], "x": 14, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.75, "y": 5.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/jis_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    MAC_FN,
    WIN_BASE,
    WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_jis_92(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,    KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LOPT,  KC_LCMD,  KC_LNG2,                      KC_SPC,                       KC_LNG1,  KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [MAC_FN] = LAYOUT_jis_92(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),

    [WIN_BASE] = LAYOUT_jis_92(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_INT3,  KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,                        KC_DEL,   KC_END,   KC_PGDN,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,  KC_INT1,    KC_RSFT,                      KC_UP,
        KC_LCTL,  KC_LWIN,  KC_LALT,  KC_INT5,                      KC_SPC,                       KC_INT4,  KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,            KC_LEFT,  KC_DOWN,  KC_RGHT),

    [WIN_FN] = LAYOUT_jis_92(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,                        _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,
        _______,  _______,  _______,  _______,                      _______,                      _______,  _______,  _______,  _______,    _______,            _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
};
#endif // ENCODER_MAP_ENABLE

================
File: v3/jis_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v3/jis_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { C14, C15, A0, A1, A2, A3, A4, A5, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

#define SNLED27351_CURRENT_TUNE \
    { 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44, 0x94, 0x94, 0x44 }

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable CapsLock LED */
#define CAPS_LOCK_LED_INDEX 51

================
File: v3/jis_encoder/jis_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |    G location
 *   |  |    |    B location
 *   |  |    |    | */
    {0, CB9_CA1, CB7_CA1, CB8_CA1},    // ESC
    {0, CB9_CA2, CB7_CA2, CB8_CA2},    // F1
    {0, CB9_CA3, CB7_CA3, CB8_CA3},    // F2
    {0, CB9_CA4, CB7_CA4, CB8_CA4},    // F3
    {0, CB9_CA5, CB7_CA5, CB8_CA5},    // F4
    {0, CB9_CA6, CB7_CA6, CB8_CA6},    // F5
    {0, CB9_CA7, CB7_CA7, CB8_CA7},    // F6
    {0, CB9_CA8, CB7_CA8, CB8_CA8},    // F7
    {0, CB9_CA9, CB7_CA9, CB8_CA9},    // F8
    {0, CB9_CA10, CB7_CA10, CB8_CA10}, // F9
    {0, CB9_CA11, CB7_CA11, CB8_CA11}, // F10
    {0, CB9_CA12, CB7_CA12, CB8_CA12}, // F11
    {0, CB9_CA13, CB7_CA13, CB8_CA13}, // F12
    {0, CB9_CA14, CB7_CA14, CB8_CA14}, // Mute
    {0, CB9_CA15, CB7_CA15, CB8_CA15}, // Print
    {0, CB9_CA16, CB7_CA16, CB8_CA16}, // Cortana
    {1, CB9_CA15, CB7_CA15, CB8_CA15}, // Light

    {0, CB3_CA1, CB1_CA1, CB2_CA1},    // `~
    {0, CB3_CA2, CB1_CA2, CB2_CA2},    // 1!
    {0, CB3_CA3, CB1_CA3, CB2_CA3},    // 2@
    {0, CB3_CA4, CB1_CA4, CB2_CA4},    // 3#
    {0, CB3_CA5, CB1_CA5, CB2_CA5},    // 4$
    {0, CB3_CA6, CB1_CA6, CB2_CA6},    // 5%
    {0, CB3_CA7, CB1_CA7, CB2_CA7},    // 6^
    {0, CB3_CA8, CB1_CA8, CB2_CA8},    // 7&
    {0, CB3_CA9, CB1_CA9, CB2_CA9},    // 8*
    {0, CB3_CA10, CB1_CA10, CB2_CA10}, // 9()
    {0, CB3_CA11, CB1_CA11, CB2_CA11}, // 0)
    {0, CB3_CA12, CB1_CA12, CB2_CA12}, // -_
    {0, CB3_CA13, CB1_CA13, CB2_CA13}, // =+
    {0, CB3_CA14, CB1_CA14, CB2_CA14}, // |
    {1, CB6_CA6, CB4_CA6, CB5_CA6},    // Backspace
    {0, CB3_CA15, CB1_CA15, CB2_CA15}, // Ins
    {0, CB3_CA16, CB1_CA16, CB2_CA16}, // Home
    {1, CB9_CA16, CB7_CA16, CB8_CA16}, // Page Up

    {0, CB6_CA1, CB4_CA1, CB5_CA1},    // tab
    {0, CB6_CA2, CB4_CA2, CB5_CA2},    // Q
    {0, CB6_CA3, CB4_CA3, CB5_CA3},    // W
    {0, CB6_CA4, CB4_CA4, CB5_CA4},    // E
    {0, CB6_CA5, CB4_CA5, CB5_CA5},    // R
    {0, CB6_CA6, CB4_CA6, CB5_CA6},    // T
    {0, CB6_CA7, CB4_CA7, CB5_CA7},    // Y
    {0, CB6_CA8, CB4_CA8, CB5_CA8},    // U
    {0, CB6_CA9, CB4_CA9, CB5_CA9},    // I
    {0, CB6_CA10, CB4_CA10, CB5_CA10}, // O
    {0, CB6_CA11, CB4_CA11, CB5_CA11}, // P
    {0, CB6_CA12, CB4_CA12, CB5_CA12}, // [{
    {0, CB6_CA13, CB4_CA13, CB5_CA13}, // }}
    {0, CB6_CA15, CB4_CA15, CB5_CA15}, // Del
    {0, CB6_CA16, CB4_CA16, CB5_CA16}, // End
    {1, CB9_CA13, CB7_CA13, CB8_CA13}, // Page Down

    {1, CB9_CA1, CB7_CA1, CB8_CA1},    // Cpas
    {1, CB9_CA2, CB7_CA2, CB8_CA2},    // A
    {1, CB9_CA3, CB7_CA3, CB8_CA3},    // S
    {1, CB9_CA4, CB7_CA4, CB8_CA4},    // D
    {1, CB9_CA5, CB7_CA5, CB8_CA5},    // F
    {1, CB9_CA6, CB7_CA6, CB8_CA6},    // G
    {1, CB9_CA7, CB7_CA7, CB8_CA7},    // H
    {1, CB9_CA8, CB7_CA8, CB8_CA8},    // J
    {1, CB9_CA9, CB7_CA9, CB8_CA9},    // K
    {1, CB9_CA10, CB7_CA10, CB8_CA10}, // L
    {1, CB9_CA11, CB7_CA11, CB8_CA11}, // ;
    {1, CB9_CA12, CB7_CA12, CB8_CA12}, // :
    {1, CB9_CA14, CB7_CA14, CB8_CA14}, // #~
    {0, CB6_CA14, CB4_CA14, CB5_CA14}, // Enter

    {1, CB3_CA1, CB1_CA1, CB2_CA1},    // LShift
    {1, CB3_CA3, CB1_CA3, CB2_CA3},    // Z
    {1, CB3_CA4, CB1_CA4, CB2_CA4},    // X
    {1, CB3_CA5, CB1_CA5, CB2_CA5},    // C
    {1, CB3_CA6, CB1_CA6, CB2_CA6},    // V
    {1, CB3_CA7, CB1_CA7, CB2_CA7},    // B
    {1, CB3_CA8, CB1_CA8, CB2_CA8},    // N
    {1, CB3_CA9, CB1_CA9, CB2_CA9},    // M
    {1, CB3_CA10, CB1_CA10, CB2_CA10}, // ,<
    {1, CB3_CA11, CB1_CA11, CB2_CA11}, // .>
    {1, CB3_CA12, CB1_CA12, CB2_CA12}, // /?
    {1, CB3_CA13, CB1_CA13, CB2_CA13}, // |
    {1, CB3_CA14, CB1_CA14, CB2_CA14}, // RShift
    {1, CB3_CA16, CB1_CA16, CB2_CA16}, // Up

    {1, CB6_CA1, CB4_CA1, CB5_CA1},    // LCtrl
    {1, CB6_CA2, CB4_CA2, CB5_CA2},    // LWin
    {1, CB6_CA3, CB4_CA3, CB5_CA3},    // LAlt
    {1, CB6_CA4, CB4_CA4, CB5_CA4},    // NUm
    {1, CB6_CA7, CB4_CA7, CB5_CA7},    // Space
    {1, CB6_CA10, CB4_CA10, CB5_CA10}, // Jap
    {1, CB6_CA11, CB4_CA11, CB5_CA11}, // RAlt
    {1, CB6_CA12, CB4_CA12, CB5_CA12}, // RWin
    {1, CB6_CA13, CB4_CA13, CB5_CA13}, // Fn
    {1, CB6_CA14, CB4_CA14, CB5_CA14}, // RCtrl
    {1, CB6_CA15, CB4_CA15, CB5_CA15}, // Left
    {1, CB6_CA16, CB4_CA16, CB5_CA16}, // Down
    {1, CB3_CA15, CB1_CA15, CB2_CA15}, // Right
};

#    define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
        { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33 },
        { 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 48, 49 },
        { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 50, 63, 16, 34 },
        { 65, __, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 91, 78 },
        { 79, 80, 81, 82, __, 31, 83, __, __, 84, 85, 86, 87, 88, 89, 90 },
    },
    {
        // LED Index to Physical Position
        {0,0},           {16,0},  {29,0},  {42,0},  {55,0},  {71,0},  {84,0},   {97,0},   {110,0},  {126,0},  {139,0},  {152,0},  {165,0},  {182,0},  {198,0},  {211,0},  {224,0},
        {0,15}, {13,15}, {26,15}, {39,15}, {52,15}, {65,15}, {78,15}, {91,15},  {104,15}, {117,15}, {130,15}, {143,15}, {156,15}, {169,15}, {182,15}, {198,15}, {211,15}, {224,15},
        {3,28}, {19,28}, {32,28}, {45,28}, {59,28}, {72,28}, {85,28}, {98,28},  {111,28}, {124,28}, {137,28}, {150,28}, {163,28},                     {198,28}, {211,28}, {224,28},
        {5,40}, {23,40}, {36,40}, {49,40}, {62,40}, {75,40}, {88,40}, {101,40}, {114,40}, {127,40}, {140,40}, {153,40}, {166,40}, {183,36},
        {8,52},          {29,52}, {42,52}, {55,52}, {68,52}, {81,52}, {94,52},  {107,52}, {120,52}, {133,52}, {146,52}, {159,52}, {177,52},                     {211,52},
        {2,64}, {16,64}, {31,64}, {45,64},                   {81,64},                     {119,64}, {135,64}, {151,64}, {166,64}, {180,64},           {198,64}, {211,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1, 1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,       1,
        1, 1, 1, 1,       4,       1, 1, 1, 1, 1,    1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v3/jis_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V3",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0335",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "A8"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_jis_92": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [0, 13], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [3, 14], "x": 17.25, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25},
                {"matrix": [5, 5], "x": 14, "y": 1.25},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [3, 15], "x": 17.25, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [3, 12], "x": 17.25, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 12], "x": 12.25, "y": 4.25},
                {"matrix": [4, 13], "x": 13.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25},
                {"matrix": [5, 2], "x": 2.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 3], "x": 3.5, "y": 5.25},
                {"matrix": [5, 6], "x": 4.5, "y": 5.25, "w": 4.5},
                {"matrix": [5, 9], "x": 9, "y": 5.25, "w": 1.25},
                {"matrix": [5, 10], "x": 10.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.75, "y": 5.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [4, 14], "x": 17.25, "y": 5.25}
            ]
        }
    }
}

================
File: v3/jis_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v3/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL

================
File: v3/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v3/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v3/matrix.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN A7
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN B1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN B0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

// At 3.6V input, three nops (37.5ns) should be enough for all signals
#define small_delay() __asm__ __volatile__("nop;nop;nop;\n\t" ::: "memory")
#define compiler_barrier() __asm__ __volatile__("" ::: "memory")

static void shiftOut(uint8_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < 8; i++) {
            compiler_barrier();
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN);
            } else {
                gpio_write_pin_low(DATA_PIN);
            }
            dataOut = dataOut >> 1;
            compiler_barrier();
            gpio_write_pin_high(CLOCK_PIN);
            small_delay();
            gpio_write_pin_low(CLOCK_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static void shiftOut_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        compiler_barrier();
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN);
        } else {
            gpio_write_pin_low(DATA_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(CLOCK_PIN);
        small_delay();
        gpio_write_pin_low(CLOCK_PIN);
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 8) {
            shiftOut_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftOut_single(0x01);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == 8)
                // unselect shift Register
                shiftOut(0xFF);
        }
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN);
    gpio_set_pin_output(CLOCK_PIN);
    gpio_set_pin_output(LATCH_PIN);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: v3/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v3/readme.md
================
# Keychron V3

A customizable 80% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V3
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v3/ansi:default

Flashing example for this keyboard:

    make keychron/v3/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v3/v3.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 0 : 2));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v4/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_60_ansi(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,
        KC_LSFT,           KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LOPT,  KC_LCMD,                            KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_RCTL),

    [WIN_BASE] = LAYOUT_60_ansi(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,            KC_ENT,
        KC_LSFT,           KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LWIN,  KC_LALT,                            KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_RCTL),

    [_FN1] = LAYOUT_60_ansi(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, KC_INS,   KC_PGUP,  KC_HOME,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   _______, KC_PGDN,  KC_END,             _______,
        _______,           _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN2] = LAYOUT_60_ansi(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, KC_APP,  KC_SCRL, KC_INS,   KC_PGUP,  KC_HOME,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_PSCR, KC_PGDN,  KC_END,             _______,
        _______,           _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN3] = LAYOUT_60_ansi(
        KC_TILD, KC_F1,    KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,            _______,
        _______,           _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______)
};

================
File: v4/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},

    {0, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
     {
         // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13 },
        { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 },
        { 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, __, 40 },
        { 41, __, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, __, 52 },
        { 53, 54, 55, __, __, __, 56, __, __, __, 57, 58, 59, 60 },
    },
    {
        // LED Index to Physical Position
        {0,0},   {16,0},  {32,0},  {48,0},  {64,0},  {81,0},  {97,0},   {113,0},  {129,0},  {145,0},  {161,0},  {177,0},  {193,0},  {218,0},
        {4,16},  {24,16}, {40,16}, {56,16}, {73,16}, {89,16}, {105,16}, {121,16}, {137,16}, {153,16}, {169,16}, {185,16}, {202,16}, {222,16},
        {6,32},  {28,32}, {44,32}, {60,32}, {77,32}, {93,32}, {109,32}, {125,32}, {141,32}, {157,32}, {173,32}, {189,32},           {216,32},
        {10,48},          {36,48}, {52,48}, {69,48}, {85,48}, {101,48}, {117,48}, {133,48}, {149,48}, {165,48}, {181,48},           {212,48},
        {2,64},  {22,64}, {42,64},                            {103,64},                               {164,64}, {184,64}, {204,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1, 1, 1,          4,          1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v4/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable CapsLock LED*/
#define CAPS_LOCK_LED_INDEX 28

================
File: v4/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V4",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0340",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layout_aliases": {
        "LAYOUT_ansi_61": "LAYOUT_60_ansi"
    },
    "community_layouts": ["60_ansi"],
    "layouts": {
        "LAYOUT_60_ansi": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 13], "x": 13.5, "y": 1, "w": 1.5},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2, "w": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4, "w": 1.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4, "w": 1.25},
                {"matrix": [4, 12], "x": 12.5, "y": 4, "w": 1.25},
                {"matrix": [4, 13], "x": 13.75, "y": 4, "w": 1.25}
            ]
        }
    }
}

================
File: v4/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_60_iso(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,
        KC_LSFT, KC_NUBS,  KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LOPT,  KC_LCMD,                            KC_SPC,                             KC_RCMD,  MO(_FN1), MO(_FN3), KC_RCTL),

    [WIN_BASE] = LAYOUT_60_iso(
        KC_ESC,  KC_1,     KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,
        KC_TAB,  KC_Q,     KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,
        KC_CAPS, KC_A,     KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,
        KC_LSFT, KC_NUBS,  KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,
        KC_LCTL, KC_LWIN,  KC_LALT,                            KC_SPC,                             KC_RALT,  MO(_FN2), MO(_FN3), KC_RCTL),

    [_FN1] = LAYOUT_60_iso(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, KC_INS,   KC_PGUP,  KC_HOME,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   _______, KC_PGDN,  KC_END,   _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,   _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN2] = LAYOUT_60_iso(
        KC_GRV,  KC_BRID,  KC_BRIU, KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  RM_NEXT,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, KC_APP,  KC_SCRL, KC_INS,   KC_PGUP,  KC_HOME,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, KC_UP,   KC_PSCR, KC_PGDN,  KC_END,   _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, NK_TOGG, KC_LEFT, KC_DOWN, KC_RIGHT, KC_DEL,             _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______),

    [_FN3] = LAYOUT_60_iso(
        KC_TILD, KC_F1,    KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,
        RM_TOGG, RM_NEXT,  RM_VALU, RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,
        _______, RM_PREV,  RM_VALD, RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,
        _______, _______,  _______, _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,
        _______, _______,  _______,                            _______,                            _______,  _______,  _______,  _______)
};

================
File: v4/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable CapsLock LED*/
#define CAPS_LOCK_LED_INDEX 27

================
File: v4/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},

    {0, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {0, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {0, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
     {
         // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13 },
        { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 40 },
        { 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, __, 39 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, __, 53 },
        { 54, 55, 56, __, __, __, 57, __, __, __, 58, 59, 60, 61 },
    },
    {
        // LED Index to Physical Position
        {0, 0}, {16, 0}, {32, 0}, {48, 0}, {64, 0}, {81, 0}, { 97, 0}, {113, 0}, {129, 0}, {145, 0}, {161, 0}, {177, 0}, {193, 0}, {218, 0},
        {4,16}, {24,16}, {40,16}, {56,16}, {73,16}, {89,16}, {105,16}, {121,16}, {137,16}, {153,16}, {169,16}, {185,16}, {202,16},
        {6,32}, {28,32}, {44,32}, {60,32}, {77,32}, {93,32}, {109,32}, {125,32}, {141,32}, {157,32}, {173,32}, {189,32}, {206,32}, {224,24},
        {2,48}, {20,48}, {36,48}, {52,48}, {69,48}, {85,48}, {101,48}, {117,48}, {133,48}, {149,48}, {165,48}, {181,48},           {212,48},
        {2,64}, {22,64}, {42,64},                            {103,64},                               {164,64}, {184,64}, {204,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        1, 1, 1,          4,          1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v4/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V4",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0342",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layout_aliases": {
        "LAYOUT_iso_62": "LAYOUT_60_iso"
    },
    "community_layouts": ["60_iso"],
    "layouts": {
        "LAYOUT_60_iso": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2},
                {"matrix": [1, 13], "x": 13.75, "y": 1, "w": 1.25, "h": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 10], "x": 10, "y": 4, "w": 1.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4, "w": 1.25},
                {"matrix": [4, 12], "x": 12.5, "y": 4, "w": 1.25},
                {"matrix": [4, 13], "x": 13.75, "y": 4, "w": 1.25}
            ]
        }
    }
}

================
File: v4/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0xD0, 0xD0, 0x60, 0xD0, 0xD0, 0x60, 0xD0, 0xD0, 0x60, 0xD0, 0xD0, 0x60 }

#define DYNAMIC_KEYMAP_LAYER_COUNT 5

================
File: v4/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v4/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v4/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v4/readme.md
================
# Keychron V4

A customizable 60% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V4
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v4/ansi:default

Flashing example for this keyboard:

    make keychron/v4/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v4/v4.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v5/ansi/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_100(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_100(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_100(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_100(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

================
File: v5/ansi/ansi.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17 },
        { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, __, 33, 34, 35 },
        { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 70, 51, 52, 53 },
        { 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 18, 66, 36, 67, 68, 69 },
        { 71, __, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, __, 82, 83, 84, 85, 86 },
        { 87, 88, 89, __, __, 99, 90, __, __, __, 91, 92, 93, 94, 95, 96, 97, 98 }
    },
    {
        // LED Index to Physical Position
        {0,0},  {12,0},  {24,0},  {36,0},  {48,0},  {60,0},  {72,0},  {84,0},  {97,0},   {109,0},  {121,0},  {133,0},  {145,0},  {157,0},  {169,0},  {188,0},  {200,0},  {212,0},  {224,0},
        {0,15}, {12,15}, {24,15}, {36,15}, {48,15}, {60,15}, {72,15}, {84,15}, {97,15},  {109,15}, {121,15}, {133,15}, {145,15}, {163,15},           {188,15}, {200,15}, {212,15}, {224,15},
        {3,26}, {18,26}, {30,26}, {42,26}, {54,26}, {66,26}, {78,26}, {91,26}, {103,26}, {115,26}, {127,26}, {139,26}, {151,26}, {166,26},           {188,26}, {200,26}, {212,26},
        {5,38}, {21,38}, {33,38}, {45,38}, {57,38}, {69,38}, {81,38}, {94,38}, {106,38}, {118,38}, {130,38}, {142,38},           {161,38},           {188,38}, {200,38}, {212,38}, {224,32},
        {8,49},          {27,49}, {39,49}, {51,49}, {63,49}, {75,49}, {88,49}, {100,49}, {112,49}, {124,49}, {136,49},           {152,49}, {172,52}, {188,49}, {200,49}, {212,49},
        {1,61}, {17,61}, {32,61},                            {77,61},                              {121,61}, {133,61}, {145,61}, {160,64}, {172,64}, {184,64}, {200,61}, {212,61}, {224,55},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 4, 4, 4,
        1, 1, 1,          1,          1, 1, 1, 1, 1, 1, 1, 1, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v5/ansi/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 54

================
File: v5/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V5",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0350",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_100": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.5, "y": 0},
                {"matrix": [0, 16], "x": 16.5, "y": 0},
                {"matrix": [0, 17], "x": 17.5, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v5/ansi/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v5/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_98(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_98(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_98(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,  KC_BSLS,            KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_98(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,            _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
};
#endif // ENCODER_MAP_ENABLE

================
File: v5/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v5/ansi_encoder/ansi_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    // {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    // {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0, __,  1,  2,  3,  4, __,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
        { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, __, 31, 32, 33 },
        { 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 68, 49, 50, 51 },
        { 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 16, 64, 34, 65, 66, 67 },
        { 69, __, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, __, 80, 81, 82, 83, 84 },
        { 85, 86, 87, __, __, 97, 88, __, __, __, 89, 90, 91, 92, 93, 94, 95, 96 }
    },
    {
        // LED Index to Physical Position
        {0,0},           {24,0},  {36,0},  {48,0},  {60,0},  {78,0},  {90,0},  {103,0},  {115,0},  {133,0},  {145,0},  {157,0},  {169,0},            {184,0},  {196,0},  {208,0},  {224,0},
        {0,15}, {12,15}, {24,15}, {36,15}, {48,15}, {60,15}, {72,15}, {85,15}, {97,15},  {109,15}, {121,15}, {133,15}, {145,15}, {163,15},           {188,15}, {200,15}, {212,15}, {224,15},
        {3,26}, {18,26}, {30,26}, {42,26}, {54,26}, {66,26}, {78,26}, {91,26}, {103,26}, {115,26}, {127,26}, {139,26}, {151,26}, {166,26},           {188,26}, {200,26}, {212,26},
        {5,38}, {21,38}, {33,38}, {45,38}, {57,38}, {69,38}, {81,38}, {94,38}, {106,38}, {118,38}, {130,38}, {142,38},           {161,38},           {188,38}, {200,38}, {212,38}, {224,32},
        {8,49},          {27,49}, {39,49}, {51,49}, {63,49}, {75,49}, {88,49}, {100,49}, {112,49}, {124,49}, {136,49},           {152,49}, {172,52}, {188,49}, {200,49}, {212,49},
        {1,61}, {17,61}, {32,61},                            {77,61},                              {121,61}, {133,61}, {145,61}, {160,64}, {172,64}, {184,64}, {200,61}, {212,61}, {224,55},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 4, 4, 4, 1
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v5/ansi_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 52

================
File: v5/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V5",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0351",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_98": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.5, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},
                {"matrix": [0, 16], "x": 16.25, "y": 0},
                {"matrix": [0, 17], "x": 17.25, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v5/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v5/iso/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_101(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_101(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_iso_101(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_DEL,   KC_HOME,  KC_END,   KC_PGUP,  KC_PGDN,  RM_NEXT,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_101(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  _______,  _______,  _______,  RM_TOGG,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

================
File: v5/iso/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 53

================
File: v5/iso/iso.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,   6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17 },
        { 19, 20, 21, 22, 23, 24,  25, 26, 27, 28, 29, 30, 31, 32, __, 33, 34, 35 },
        { 37, 38, 39, 40, 41, 42,  43, 44, 45, 46, 47, 48, 49, 66, 70, 50, 51, 52 },
        { 53, 54, 55, 56, 57, 58,  59, 60, 61, 62, 63, 64, 18, 65, 36, 67, 68, 69 },
        { 71, 72, 73, 74, 75, 76,  77, 78, 79, 80, 81, 82, __, 83, 84, 85, 86, 87 },
        { 88, 89, 90, __, __, 100, 91, __, __, __, 92, 93, 94, 95, 96, 97, 98, 99 },
    },
    {
        // LED Index to Physical Position
        {0,0},  {12,0},  {24,0},  {36,0},  {48,0},  {60,0},  {72,0},  {85,0},  {97,0},   {109,0},  {121,0},  {133,0},  {145,0},  {157,0},  {169,0},  {188,0},  {200,0},  {212,0},  {224,0},
        {0,15}, {12,15}, {24,15}, {36,15}, {48,15}, {60,15}, {72,15}, {85,15}, {97,15},  {109,15}, {121,15}, {133,15}, {145,15}, {163,15},           {188,15}, {200,15}, {212,15}, {224,15},
        {3,26}, {18,26}, {30,26}, {42,26}, {54,26}, {66,26}, {78,26}, {91,26}, {103,26}, {115,26}, {127,26}, {139,26}, {151,26},                     {188,26}, {200,26}, {212,26},
        {5,38}, {21,38}, {33,38}, {45,38}, {57,38}, {69,38}, {81,38}, {94,38}, {106,38}, {118,38}, {130,38}, {142,38}, {154,38}, {170,34},           {188,38}, {200,38}, {212,38}, {224,32},
        {3,49}, {15,49}, {27,49}, {39,49}, {51,49}, {63,49}, {75,49}, {88,49}, {100,49}, {112,49}, {124,49}, {136,49},           {152,49}, {172,52}, {188,49}, {200,49}, {212,49},
        {1,61}, {17,61}, {32,61},                            {77,61},                              {121,61}, {133,61}, {145,61}, {160,64}, {172,64}, {184,64}, {200,61}, {212,61}, {224,55},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 4, 4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v5/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V5",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0352",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_101": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.5, "y": 0},
                {"matrix": [0, 16], "x": 16.5, "y": 0},
                {"matrix": [0, 17], "x": 17.5, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v5/iso/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v5/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_99(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_99(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
    [WIN_BASE] = LAYOUT_iso_99(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,     KC_F11,   KC_F12,             KC_DEL,   KC_HOME,  KC_END,   KC_MUTE,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,    KC_EQL,   KC_BSPC,            KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,    KC_RBRC,                      KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,    KC_NUHS,  KC_ENT,             KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,  KC_UP,    KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,    KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_99(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,    KC_VOLD,  KC_VOLU,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                      _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,            _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [MAC_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [WIN_BASE] = { ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_FN]   = { ENCODER_CCW_CW(RM_VALD, RM_VALU)},
};
#endif // ENCODER_MAP_ENABLE

================
File: v5/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v5/iso_encoder/config.h
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 51

================
File: v5/iso_encoder/iso_encoder.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},  // `~
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},  // 1!
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},  // 2@
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},  // 3#
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},  // 4$
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},  // 5%
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},  // 6^
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},  // 7&
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},  // 8*
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10}, // 9(
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11}, // 0)
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12}, // -_
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13}, // =+
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14}, // BackSpace
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16}, // Numlock
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},  // /
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10}, // *
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11}, // -

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7}
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0, __,  1,  2,  3,  4, __,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
        { 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, __, 31, 32, 33 },
        { 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 64, 68, 48, 49, 50 },
        { 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 16, 63, 34, 65, 66, 67 },
        { 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, __, 81, 82, 83, 84, 85 },
        { 86, 87, 88, __, __, 98, 89, __, __, __, 90, 91, 92, 93, 94, 95, 96, 97 },
    },
    {
        // LED Index to Physical Position
        {0,0},           {24,0},  {36,0},  {48,0},  {60,0},  {78,0},  {90,0},  {103,0},  {115,0},  {133,0},  {145,0},  {157,0},  {169,0},            {184,0},  {196,0},  {208,0},  {224,0},
        {0,15}, {12,15}, {24,15}, {36,15}, {48,15}, {60,15}, {72,15}, {85,15}, {97,15},  {109,15}, {121,15}, {133,15}, {145,15}, {163,15},           {188,15}, {200,15}, {212,15}, {224,15},
        {3,26}, {18,26}, {30,26}, {42,26}, {54,26}, {66,26}, {78,26}, {91,26}, {103,26}, {115,26}, {127,26}, {139,26}, {151,26},                     {188,26}, {200,26}, {212,26},
        {5,38}, {21,38}, {33,38}, {45,38}, {57,38}, {69,38}, {81,38}, {94,38}, {106,38}, {118,38}, {130,38}, {142,38}, {154,38}, {170,34},           {188,38}, {200,38}, {212,38}, {224,32},
        {3,49}, {15,49}, {27,49}, {39,49}, {51,49}, {63,49}, {75,49}, {88,49}, {100,49}, {112,49}, {124,49}, {136,49}, {152,49},           {172,52}, {188,49}, {200,49}, {212,49},
        {1,61}, {17,61}, {32,61},                            {77,61},                              {121,61}, {133,61}, {145,61}, {160,64}, {172,64}, {184,64}, {200,61}, {212,61}, {224,55},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 4, 4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v5/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V5",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0353",
        "device_version": "1.0.0"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_99": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 7], "x": 6.5, "y": 0},
                {"matrix": [0, 8], "x": 7.5, "y": 0},
                {"matrix": [0, 9], "x": 8.5, "y": 0},
                {"matrix": [0, 10], "x": 9.5, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0},
                {"matrix": [0, 14], "x": 14, "y": 0},
                {"matrix": [0, 15], "x": 15.25, "y": 0},
                {"matrix": [0, 16], "x": 16.25, "y": 0},
                {"matrix": [0, 17], "x": 17.25, "y": 0},
                {"matrix": [3, 12], "x": 18.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 15], "x": 15.5, "y": 1.25},
                {"matrix": [1, 16], "x": 16.5, "y": 1.25},
                {"matrix": [1, 17], "x": 17.5, "y": 1.25},
                {"matrix": [3, 14], "x": 18.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 15], "x": 15.5, "y": 2.25},
                {"matrix": [2, 16], "x": 16.5, "y": 2.25},
                {"matrix": [2, 17], "x": 17.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 15], "x": 15.5, "y": 3.25},
                {"matrix": [3, 16], "x": 16.5, "y": 3.25},
                {"matrix": [3, 17], "x": 17.5, "y": 3.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 1.75},
                {"matrix": [4, 14], "x": 14.25, "y": 4.5},
                {"matrix": [4, 15], "x": 15.5, "y": 4.25},
                {"matrix": [4, 16], "x": 16.5, "y": 4.25},
                {"matrix": [4, 17], "x": 17.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25},
                {"matrix": [5, 11], "x": 11, "y": 5.25},
                {"matrix": [5, 12], "x": 12, "y": 5.25},
                {"matrix": [5, 13], "x": 13.25, "y": 5.5},
                {"matrix": [5, 14], "x": 14.25, "y": 5.5},
                {"matrix": [5, 15], "x": 15.25, "y": 5.5},
                {"matrix": [5, 16], "x": 16.5, "y": 5.25},
                {"matrix": [5, 17], "x": 17.5, "y": 5.25},
                {"matrix": [5, 5], "x": 18.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v5/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v5/config.h
================
/* Copyright 2022 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS \
    { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS \
    { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_CURRENT_TUNE \
    { 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56, 0xB6, 0xB6, 0x56 }

================
File: v5/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v5/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v5/matrix.c
================
/* Copyright 2021 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

// Pin connected to DS of 74HC595
#define DATA_PIN C15
// Pin connected to SH_CP of 74HC595
#define CLOCK_PIN A1
// Pin connected to ST_CP of 74HC595
#define LATCH_PIN A0

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

// At 3.6V input, three nops (37.5ns) should be enough for all signals
#define small_delay() __asm__ __volatile__("nop;nop;nop;\n\t" ::: "memory")
#define compiler_barrier() __asm__ __volatile__("" ::: "memory")

static void shiftOut(uint8_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < 8; i++) {
            compiler_barrier();
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN);
            } else {
                gpio_write_pin_low(DATA_PIN);
            }
            dataOut = dataOut >> 1;
            compiler_barrier();
            gpio_write_pin_high(CLOCK_PIN);
            small_delay();
            gpio_write_pin_low(CLOCK_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static void shiftOut_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        compiler_barrier();
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN);
        } else {
            gpio_write_pin_low(DATA_PIN);
        }
        compiler_barrier();
        gpio_write_pin_high(CLOCK_PIN);
        small_delay();
        gpio_write_pin_low(CLOCK_PIN);
        compiler_barrier();
        gpio_write_pin_high(LATCH_PIN);
        small_delay();
        gpio_write_pin_low(LATCH_PIN);
        compiler_barrier();
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == 10) {
            shiftOut_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftOut_single(0x01);
    }
}

static void unselect_cols(void) {
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];
        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        } else {
            if (x == 10)
                // unselect shift Register
                shiftOut(0xFF);
        }
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN);
    gpio_set_pin_output(CLOCK_PIN);
    gpio_set_pin_output(LATCH_PIN);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: v5/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v5/readme.md
================
# Keychron V5

A customizable 96% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V5
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v5/ansi:default

Flashing example for this keyboard:

    make keychron/v5/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v5/v5.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
        default_layer_set(1UL << (active ? 2 : 0));
    }
    return true;
}

#endif  // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v6/ansi/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "keycode.h"
#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_108(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_108(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_108(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_108(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

================
File: v6/ansi/ansi.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40, 16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38, 17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  54,  55,  56,  57,  58,  59, 18 },
        { 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,  __,  73,  60,  77,  76,  74,  75, 19 },
        { 78, __, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,  __,  89,  93,  90, 107,  91,  92, __ },
        { 94, 95, 96, __, __, __, 97, __, __, __, 98, 99, 100, 101, 102, 103, 104, 105, 106, __ },
    },
    {
        {0,0},           {21,0},  {31,0},  {42,0},  {52,0},  {68,0},  {78,0},  {89,0},   {99,0},   {115,0},  {125,0},  {136,0},  {146,0},  {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15},  {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27},  {99,27},  {109,27}, {120,27}, {130,27}, {143,27}, {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40},  {102,40}, {112,40}, {123,40},           {139,40},                               {193,40}, {203,40}, {214,40}, {224,34},
        {7,52},          {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52},  {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                              {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,          4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v6/ansi/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, A2, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, C14 }

/* Pin connected to DS of 74HC595 */
#define DATA_PIN_74HC595 C15
/* Pin connected to SH_CP of 74HC595 */
#define CLOCK_PIN_74HC595 A1
/* Pin connected to ST_CP of 74HC595 */
#define LATCH_PIN_74HC595 A0
/* Pin used index start of 74HC595 */
#define PIN_START_74HC595 11

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 61

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: v6/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0360",
        "device_version": "1.0.0"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_108": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v6/ansi/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v6/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_109(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_ansi_109(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_ansi_109(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,    KC_BSLS,  KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,              KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,            KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_ansi_109(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,              _______,                                _______,  _______,  _______,  _______,
        _______,            _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif // ENCODER_MAP_ENABLE

================
File: v6/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v6/ansi_encoder/ansi_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40, 16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38, 17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  54,  55,  56,  57,  58,  59, 18 },
        { 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,  __,  73,  60,  77,  76,  74,  75, 19 },
        { 78, __, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,  __,  89,  93,  90, 107,  91,  92, __ },
        { 94, 95, 96, __, __, __, 97, __, __, __, 98, 99, 100, 101, 102, 103, 104, 105, 106, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},  {13,0},  {24,0},  {34,0},  {45,0},  {57,0},  {68,0},  {78,0},  {89,0},  {102,0},  {112,0},  {123,0},  {133,0},            {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27}, {143,27}, {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40},           {139,40},                               {193,40}, {203,40}, {214,40}, {224,34},
        {7,52},          {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,          4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v6/ansi_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* Pin connected to DS of 74HC595 */
#define DATA_PIN_74HC595 C15
/* Pin connected to SH_CP of 74HC595 */
#define CLOCK_PIN_74HC595 A1
/* Pin connected to ST_CP of 74HC595 */
#define LATCH_PIN_74HC595 A0
/* Pin used number of 74HC595 */
#define PIN_USED_74HC595 10
/* Pin used index start of 74HC595 */
#define PIN_START_74HC595 10

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 61

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: v6/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0361",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "driver": "snled27351"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_ansi_109": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [4, 19], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 13], "x": 13.5, "y": 2.25, "w": 1.5},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25, "w": 2.25},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 2.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v6/ansi_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v6/iso/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_109(
        KC_ESC,             KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_109(
        _______,            KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_iso_109(
        KC_ESC,             KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,     KC_F12,   KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_109(
        _______,            KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,    KC_VOLU,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

================
File: v6/iso/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, A2, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, C14 }

/* Pin connected to DS of 74HC595 */
#define DATA_PIN_74HC595 C15
/* Pin connected to SH_CP of 74HC595 */
#define CLOCK_PIN_74HC595 A1
/* Pin connected to ST_CP of 74HC595 */
#define LATCH_PIN_74HC595 A0
/* Pin used index start of 74HC595 */
#define PIN_START_74HC595 11

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 60

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: v6/iso/iso.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40,  16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38,  17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  73,  54,  55,  56,  57,  58,  18 },
        { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  __,  72,  59,  77,  76,  74,  75,  19 },
        { 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  __,  90,  94,  91,  108, 92,  93,  __ },
        { 95, 96, 97, __, __, __, 98, __, __, __, 99, 100, 101, 102, 103, 104, 105, 106, 107, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},           {21,0},  {31,0},  {42,0},  {52,0},  {68,0},  {78,0},  {89,0},  {99,0},   {115,0},  {125,0},  {136,0},  {146,0},  {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27},           {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40}, {133,40}, {147,36},                               {193,40}, {203,40}, {214,40}, {224,34},
        {1,52}, {13,52}, {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1,    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,          4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v6/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0362",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "driver": "snled27351"
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_109": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 2, "y": 0},
                {"matrix": [0, 2], "x": 3, "y": 0},
                {"matrix": [0, 3], "x": 4, "y": 0},
                {"matrix": [0, 4], "x": 5, "y": 0},
                {"matrix": [0, 5], "x": 6.5, "y": 0},
                {"matrix": [0, 6], "x": 7.5, "y": 0},
                {"matrix": [0, 7], "x": 8.5, "y": 0},
                {"matrix": [0, 8], "x": 9.5, "y": 0},
                {"matrix": [0, 9], "x": 11, "y": 0},
                {"matrix": [0, 10], "x": 12, "y": 0},
                {"matrix": [0, 11], "x": 13, "y": 0},
                {"matrix": [0, 12], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v6/iso/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v6/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
  MAC_BASE,
  MAC_FN,
  WIN_BASE,
  WIN_FN
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_110(
        KC_ESC,   KC_BRID,  KC_BRIU,  KC_NO,    KC_NO,    RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    KC_MUTE,  KC_NO,    KC_NO,    RM_NEXT,  KC_F13,   KC_F14,   KC_F15,   KC_F16,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LOPT,  KC_LCMD,                                KC_SPC,                                 KC_RCMD,  KC_ROPT,  MO(MAC_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [MAC_FN] = LAYOUT_iso_110(
        _______,  KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
    [WIN_BASE] = LAYOUT_iso_110(
        KC_ESC,   KC_F1,    KC_F2,    KC_F3,    KC_F4,    KC_F5,    KC_F6,    KC_F7,    KC_F8,    KC_F9,    KC_F10,   KC_F11,   KC_F12,     KC_MUTE,  KC_PSCR,  KC_NO,    RM_NEXT,  _______,  _______,  _______,  _______,
        KC_GRV,   KC_1,     KC_2,     KC_3,     KC_4,     KC_5,     KC_6,     KC_7,     KC_8,     KC_9,     KC_0,     KC_MINS,  KC_EQL,     KC_BSPC,  KC_INS,   KC_HOME,  KC_PGUP,  KC_NUM,   KC_PSLS,  KC_PAST,  KC_PMNS,
        KC_TAB,   KC_Q,     KC_W,     KC_E,     KC_R,     KC_T,     KC_Y,     KC_U,     KC_I,     KC_O,     KC_P,     KC_LBRC,  KC_RBRC,              KC_DEL,   KC_END,   KC_PGDN,  KC_P7,    KC_P8,    KC_P9,
        KC_CAPS,  KC_A,     KC_S,     KC_D,     KC_F,     KC_G,     KC_H,     KC_J,     KC_K,     KC_L,     KC_SCLN,  KC_QUOT,  KC_NUHS,    KC_ENT,                                 KC_P4,    KC_P5,    KC_P6,    KC_PPLS,
        KC_LSFT,  KC_NUBS,  KC_Z,     KC_X,     KC_C,     KC_V,     KC_B,     KC_N,     KC_M,     KC_COMM,  KC_DOT,   KC_SLSH,              KC_RSFT,            KC_UP,              KC_P1,    KC_P2,    KC_P3,
        KC_LCTL,  KC_LWIN,  KC_LALT,                                KC_SPC,                                 KC_RALT,  KC_RWIN,  MO(WIN_FN), KC_RCTL,  KC_LEFT,  KC_DOWN,  KC_RGHT,  KC_P0,              KC_PDOT,  KC_PENT),
    [WIN_FN] = LAYOUT_iso_110(
        _______,  KC_BRID,  KC_BRIU,  KC_TASK,  KC_FLXP,  RM_VALD,  RM_VALU,  KC_MPRV,  KC_MPLY,  KC_MNXT,  KC_MUTE,  KC_VOLD,  KC_VOLU,    RM_TOGG,  _______,  _______,  RM_TOGG,  _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,  _______,  _______,  _______,
        RM_TOGG,  RM_NEXT,  RM_VALU,  RM_HUEU,  RM_SATU,  RM_SPDU,  _______,  _______,  _______,  _______,  _______,  _______,  _______,              _______,  _______,  _______,  _______,  _______,  _______,
        _______,  RM_PREV,  RM_VALD,  RM_HUED,  RM_SATD,  RM_SPDD,  _______,  _______,  _______,  _______,  _______,  _______,  _______,    _______,                                _______,  _______,  _______,  _______,
        _______,  _______,  _______,  _______,  _______,  _______,  _______,  NK_TOGG,  _______,  _______,  _______,  _______,              _______,            _______,            _______,  _______,  _______,
        _______,  _______,  _______,                                _______,                                _______,  _______,  _______,    _______,  _______,  _______,  _______,  _______,            _______,  _______),
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [MAC_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) },
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU) },
    [WIN_FN]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU) }
};
#endif

================
File: v6/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v6/iso_encoder/config.h
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Key matrix pins */
#define MATRIX_ROW_PINS { B5, B4, B3, A15, A14, A13 }
#define MATRIX_COL_PINS { A10, A9, A8, B1, B0, A7, A6, A5, A4, A3, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN, NO_PIN }

/* Pin connected to DS of 74HC595 */
#define DATA_PIN_74HC595 C15
/* Pin connected to SH_CP of 74HC595 */
#define CLOCK_PIN_74HC595 A1
/* Pin connected to ST_CP of 74HC595 */
#define LATCH_PIN_74HC595 A0
/* Pin used number of 74HC595 */
#define PIN_USED_74HC595 10
/* Pin used index start of 74HC595 */
#define PIN_START_74HC595 10

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED*/
#define CAPS_LOCK_LED_INDEX 60

/* Enable NUM_LOCK_LED_INDEX */
// #define NUM_LOCK_LED_INDEX 37

================
File: v6/iso_encoder/iso_encoder.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

// clang-format off

#ifdef RGB_MATRIX_ENABLE

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {0, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {0, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {0, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {0, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {0, CB12_CA8,    CB10_CA8,    CB11_CA8},
    {0, CB12_CA4,    CB10_CA4,    CB11_CA4},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {0, CB12_CA9,    CB10_CA9,    CB11_CA9},
    {0, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {0, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {0, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {0, CB12_CA13,   CB10_CA13,   CB11_CA13},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {0, CB12_CA14,   CB10_CA14,   CB11_CA14},
    {0, CB12_CA15,   CB10_CA15,   CB11_CA15},
    {0, CB12_CA16,   CB10_CA16,   CB11_CA16},
    {1, CB12_CA1,    CB10_CA1,    CB11_CA1},

    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB12_CA3,    CB10_CA3,    CB11_CA3},
    {1, CB12_CA4,    CB10_CA4,    CB11_CA4},
    {1, CB12_CA5,    CB10_CA5,    CB11_CA5},
    {1, CB12_CA2,    CB10_CA2,    CB11_CA2},

    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {1, CB12_CA6,    CB10_CA6,    CB11_CA6},
    {1, CB12_CA7,    CB10_CA7,    CB11_CA7},
    {1, CB12_CA8,    CB10_CA8,    CB11_CA8},

    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {1, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB12_CA10,   CB10_CA10,   CB11_CA10},
    {1, CB12_CA11,   CB10_CA11,   CB11_CA11},
    {1, CB12_CA12,   CB10_CA12,   CB11_CA12},
    {1, CB12_CA9,    CB10_CA9,    CB11_CA9},
};

#define __ NO_LED

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40,  16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38,  17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  73,  54,  55,  56,  57,  58,  18 },
        { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,  __,  72,  59,  77,  76,  74,  75,  19 },
        { 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,  __,  90,  94,  91,  108, 92,  93,  __ },
        { 95, 96, 97, __, __, __, 98, __, __, __, 99, 100, 101, 102, 103, 104, 105, 106, 107, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},  {13,0},  {24,0},  {34,0},  {45,0},  {57,0},  {68,0},  {78,0},  {89,0},  {102,0},  {112,0},  {123,0},  {133,0},            {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27}, {159,27},           {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40}, {133,40}, {147,36},                               {193,40}, {203,40}, {214,40}, {224,34},
        {1,52}, {13,52}, {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 1, 1, 1, 1, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,          4, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v6/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V6",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0363",
        "device_version": "1.0.0"
    },
    "rgb_matrix": {
        "driver": "snled27351"
    },
    "encoder": {
        "rotary": [
            {"pin_a": "C14", "pin_b": "A2"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "features": {
        "bootmagic": true,
        "mousekey": true,
        "extrakey": true,
        "nkro": true,
        "rgb_matrix": true,
        "encoder": true,
        "dip_switch": true
    },
    "layouts": {
        "LAYOUT_iso_110": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1.25, "y": 0},
                {"matrix": [0, 2], "x": 2.25, "y": 0},
                {"matrix": [0, 3], "x": 3.25, "y": 0},
                {"matrix": [0, 4], "x": 4.25, "y": 0},
                {"matrix": [0, 5], "x": 5.5, "y": 0},
                {"matrix": [0, 6], "x": 6.5, "y": 0},
                {"matrix": [0, 7], "x": 7.5, "y": 0},
                {"matrix": [0, 8], "x": 8.5, "y": 0},
                {"matrix": [0, 9], "x": 9.75, "y": 0},
                {"matrix": [0, 10], "x": 10.75, "y": 0},
                {"matrix": [0, 11], "x": 11.75, "y": 0},
                {"matrix": [0, 12], "x": 12.75, "y": 0},
                {"matrix": [4, 19], "x": 14, "y": 0},
                {"matrix": [0, 14], "x": 15.25, "y": 0},
                {"matrix": [0, 15], "x": 16.25, "y": 0},
                {"matrix": [0, 16], "x": 17.25, "y": 0},
                {"matrix": [0, 19], "x": 18.5, "y": 0},
                {"matrix": [1, 19], "x": 19.5, "y": 0},
                {"matrix": [2, 19], "x": 20.5, "y": 0},
                {"matrix": [3, 19], "x": 21.5, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1.25},
                {"matrix": [1, 1], "x": 1, "y": 1.25},
                {"matrix": [1, 2], "x": 2, "y": 1.25},
                {"matrix": [1, 3], "x": 3, "y": 1.25},
                {"matrix": [1, 4], "x": 4, "y": 1.25},
                {"matrix": [1, 5], "x": 5, "y": 1.25},
                {"matrix": [1, 6], "x": 6, "y": 1.25},
                {"matrix": [1, 7], "x": 7, "y": 1.25},
                {"matrix": [1, 8], "x": 8, "y": 1.25},
                {"matrix": [1, 9], "x": 9, "y": 1.25},
                {"matrix": [1, 10], "x": 10, "y": 1.25},
                {"matrix": [1, 11], "x": 11, "y": 1.25},
                {"matrix": [1, 12], "x": 12, "y": 1.25},
                {"matrix": [1, 13], "x": 13, "y": 1.25, "w": 2},
                {"matrix": [1, 14], "x": 15.25, "y": 1.25},
                {"matrix": [1, 15], "x": 16.25, "y": 1.25},
                {"matrix": [1, 16], "x": 17.25, "y": 1.25},
                {"matrix": [1, 17], "x": 18.5, "y": 1.25},
                {"matrix": [1, 18], "x": 19.5, "y": 1.25},
                {"matrix": [0, 17], "x": 20.5, "y": 1.25},
                {"matrix": [0, 18], "x": 21.5, "y": 1.25},

                {"matrix": [2, 0], "x": 0, "y": 2.25, "w": 1.5},
                {"matrix": [2, 1], "x": 1.5, "y": 2.25},
                {"matrix": [2, 2], "x": 2.5, "y": 2.25},
                {"matrix": [2, 3], "x": 3.5, "y": 2.25},
                {"matrix": [2, 4], "x": 4.5, "y": 2.25},
                {"matrix": [2, 5], "x": 5.5, "y": 2.25},
                {"matrix": [2, 6], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 7.5, "y": 2.25},
                {"matrix": [2, 8], "x": 8.5, "y": 2.25},
                {"matrix": [2, 9], "x": 9.5, "y": 2.25},
                {"matrix": [2, 10], "x": 10.5, "y": 2.25},
                {"matrix": [2, 11], "x": 11.5, "y": 2.25},
                {"matrix": [2, 12], "x": 12.5, "y": 2.25},
                {"matrix": [2, 14], "x": 15.25, "y": 2.25},
                {"matrix": [2, 15], "x": 16.25, "y": 2.25},
                {"matrix": [2, 16], "x": 17.25, "y": 2.25},
                {"matrix": [2, 17], "x": 18.5, "y": 2.25},
                {"matrix": [2, 18], "x": 19.5, "y": 2.25},
                {"matrix": [3, 14], "x": 20.5, "y": 2.25},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.75},
                {"matrix": [3, 1], "x": 1.75, "y": 3.25},
                {"matrix": [3, 2], "x": 2.75, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 7.75, "y": 3.25},
                {"matrix": [3, 8], "x": 8.75, "y": 3.25},
                {"matrix": [3, 9], "x": 9.75, "y": 3.25},
                {"matrix": [3, 10], "x": 10.75, "y": 3.25},
                {"matrix": [3, 11], "x": 11.75, "y": 3.25},
                {"matrix": [3, 13], "x": 12.75, "y": 3.25},
                {"matrix": [2, 13], "x": 13.75, "y": 2.25, "w": 1.25, "h": 2},
                {"matrix": [3, 17], "x": 18.5, "y": 3.25},
                {"matrix": [3, 18], "x": 19.5, "y": 3.25},
                {"matrix": [3, 16], "x": 20.5, "y": 3.25},
                {"matrix": [3, 15], "x": 21.5, "y": 2.25, "h": 2},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25},
                {"matrix": [4, 2], "x": 2.25, "y": 4.25},
                {"matrix": [4, 3], "x": 3.25, "y": 4.25},
                {"matrix": [4, 4], "x": 4.25, "y": 4.25},
                {"matrix": [4, 5], "x": 5.25, "y": 4.25},
                {"matrix": [4, 6], "x": 6.25, "y": 4.25},
                {"matrix": [4, 7], "x": 7.25, "y": 4.25},
                {"matrix": [4, 8], "x": 8.25, "y": 4.25},
                {"matrix": [4, 9], "x": 9.25, "y": 4.25},
                {"matrix": [4, 10], "x": 10.25, "y": 4.25},
                {"matrix": [4, 11], "x": 11.25, "y": 4.25},
                {"matrix": [4, 13], "x": 12.25, "y": 4.25, "w": 2.75},
                {"matrix": [4, 15], "x": 16.25, "y": 4.25},
                {"matrix": [4, 17], "x": 18.5, "y": 4.25},
                {"matrix": [4, 18], "x": 19.5, "y": 4.25},
                {"matrix": [4, 14], "x": 20.5, "y": 4.25},

                {"matrix": [5, 0], "x": 0, "y": 5.25, "w": 1.25},
                {"matrix": [5, 1], "x": 1.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 2], "x": 2.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 6], "x": 3.75, "y": 5.25, "w": 6.25},
                {"matrix": [5, 10], "x": 10, "y": 5.25, "w": 1.25},
                {"matrix": [5, 11], "x": 11.25, "y": 5.25, "w": 1.25},
                {"matrix": [5, 12], "x": 12.5, "y": 5.25, "w": 1.25},
                {"matrix": [5, 13], "x": 13.75, "y": 5.25, "w": 1.25},
                {"matrix": [5, 14], "x": 15.25, "y": 5.25},
                {"matrix": [5, 15], "x": 16.25, "y": 5.25},
                {"matrix": [5, 16], "x": 17.25, "y": 5.25},
                {"matrix": [5, 17], "x": 18.5, "y": 5.25, "w": 2},
                {"matrix": [5, 18], "x": 20.5, "y": 5.25},
                {"matrix": [4, 16], "x": 21.5, "y": 4.25, "h": 2}
            ]
        }
    }
}

================
File: v6/iso_encoder/rules.mk
================
# custom matrix setup
CUSTOM_MATRIX = lite

SRC += matrix.c

================
File: v6/config.h
================
/* Copyright 2023 @ Keychron(https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* COL2ROW or ROW2COL */
#define DIODE_DIRECTION ROW2COL

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

/* Limit the maximum brigtness current of colour white to 500mA */
#define SNLED27351_CURRENT_TUNE { 0xA8, 0xA8, 0x48, 0xA8, 0xA8, 0x48, 0xA8, 0xA8, 0x48, 0xA8, 0xA8, 0x48 }

================
File: v6/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE
#define PAL_USE_CALLBACKS TRUE

#include_next <halconf.h>

================
File: v6/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [5, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v6/matrix.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "matrix.h"
#include "atomic_util.h"
#include <string.h>

#ifndef PIN_USED_74HC595
#    define PIN_USED_74HC595 8
#endif
#ifndef PIN_START_74HC595
#    define PIN_START_74HC595 8
#endif

#ifdef MATRIX_ROW_PINS
static pin_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
#endif // MATRIX_ROW_PINS
#ifdef MATRIX_COL_PINS
static pin_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
#endif // MATRIX_COL_PINS

#define ROWS_PER_HAND (MATRIX_ROWS)

static inline void gpio_atomic_set_pin_output_low(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_low(pin);
    }
}

static inline void gpio_atomic_set_pin_output_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_output(pin);
        gpio_write_pin_high(pin);
    }
}

static inline void gpio_atomic_set_pin_input_high(pin_t pin) {
    ATOMIC_BLOCK_FORCEON {
        gpio_set_pin_input_high(pin);
    }
}

static inline uint8_t readMatrixPin(pin_t pin) {
    if (pin != NO_PIN) {
        return gpio_read_pin(pin);
    } else {
        return 1;
    }
}

void small_delay(volatile uint8_t timeout) {
    while (timeout--);
}

static void shiftOut(uint16_t dataOut) {
    ATOMIC_BLOCK_FORCEON {
        for (uint8_t i = 0; i < PIN_USED_74HC595; i++) {
            if (dataOut & 0x1) {
                gpio_write_pin_high(DATA_PIN_74HC595);
            } else {
                gpio_write_pin_low(DATA_PIN_74HC595);
            }
            dataOut = dataOut >> 1;
            gpio_write_pin_high(CLOCK_PIN_74HC595);
            small_delay(2);
            gpio_write_pin_low(CLOCK_PIN_74HC595);
        }
        gpio_write_pin_high(LATCH_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(LATCH_PIN_74HC595);
    }
}

static void shiftOut_single(uint8_t data) {
    ATOMIC_BLOCK_FORCEON {
        if (data & 0x1) {
            gpio_write_pin_high(DATA_PIN_74HC595);
        } else {
            gpio_write_pin_low(DATA_PIN_74HC595);
        }
        gpio_write_pin_high(CLOCK_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(CLOCK_PIN_74HC595);
        gpio_write_pin_high(LATCH_PIN_74HC595);
        small_delay(2);
        gpio_write_pin_low(LATCH_PIN_74HC595);
    }
}

static bool select_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
        gpio_atomic_set_pin_output_low(pin);
        return true;
    } else {
        if (col == PIN_START_74HC595) {
            shiftOut_single(0x00);
        }
        return true;
    }
    return false;
}

static void unselect_col(uint8_t col) {
    pin_t pin = col_pins[col];

    if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
        gpio_atomic_set_pin_output_high(pin);
#else
        gpio_atomic_set_pin_input_high(pin);
#endif
    } else {
        shiftOut_single(0x01);
    }
}

static void unselect_cols(void) {
    // unselect column pins
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        pin_t pin = col_pins[x];

        if (pin != NO_PIN) {
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
            gpio_atomic_set_pin_output_high(pin);
#else
            gpio_atomic_set_pin_input_high(pin);
#endif
        }
        if (x == PIN_START_74HC595)
            // unselect Shift Register
            shiftOut(0xFFFF);
    }
}

static void matrix_init_pins(void) {
    gpio_set_pin_output(DATA_PIN_74HC595);
    gpio_set_pin_output(CLOCK_PIN_74HC595);
    gpio_set_pin_output(LATCH_PIN_74HC595);
#ifdef MATRIX_UNSELECT_DRIVE_HIGH
    for (uint8_t x = 0; x < MATRIX_COLS; x++) {
        if (col_pins[x] != NO_PIN) {
            gpio_set_pin_output(col_pins[x]);
        }
    }
#endif
    unselect_cols();
    for (uint8_t x = 0; x < MATRIX_ROWS; x++) {
        if (row_pins[x] != NO_PIN) {
            gpio_atomic_set_pin_input_high(row_pins[x]);
        }
    }
}

static void matrix_read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col, matrix_row_t row_shifter) {
    bool key_pressed = false;

    // Select col
    if (!select_col(current_col)) { // select col
        return;                     // skip NO_PIN col
    }

    matrix_output_select_delay();

    // For each row...
    for (uint8_t row_index = 0; row_index < ROWS_PER_HAND; row_index++) {
        // Check row pin state
        if (readMatrixPin(row_pins[row_index]) == 0) {
            // Pin LO, set col bit
            current_matrix[row_index] |= row_shifter;
            key_pressed = true;
        } else {
            // Pin HI, clear col bit
            current_matrix[row_index] &= ~row_shifter;
        }
    }

    // Unselect col
    unselect_col(current_col);
    matrix_output_unselect_delay(current_col, key_pressed); // wait for all Row signals to go HIGH
}

void matrix_init_custom(void) {
    // initialize key pins
    matrix_init_pins();
}

bool matrix_scan_custom(matrix_row_t current_matrix[]) {
    matrix_row_t curr_matrix[MATRIX_ROWS] = {0};

    // Set col, read rows
    matrix_row_t row_shifter = MATRIX_ROW_SHIFTER;
    for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++, row_shifter <<= 1) {
        matrix_read_rows_on_col(curr_matrix, current_col, row_shifter);
    }

    bool changed = memcmp(current_matrix, curr_matrix, sizeof(curr_matrix)) != 0;
    if (changed) memcpy(current_matrix, curr_matrix, sizeof(curr_matrix));

    return changed;
}

================
File: v6/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v6/readme.md
================
# Keychron V6

A customizable 100% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V6
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v6/v6_ansi_stm32l432:default

Flashing example for this keyboard:

    make keychron/v6/v6_ansi_stm32l432:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v6/v6.c
================
/* Copyright 2023 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) {
        return false;
    }
    if (index == 0) {
#    if defined(OS_SWITCH_REVERT)
        default_layer_set(1UL << (!active ? 2 : 0));
#    else
        default_layer_set(1UL << (active ? 2 : 0));
#    endif
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && (defined(CAPS_LOCK_LED_INDEX) || defined(NUM_LOCK_LED_INDEX))

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) {
        return false;
    }
    switch (keycode) {
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) {
        return false;
    }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
    return true;
}

#endif // RGB_MATRIX_ENABLE...

================
File: v7/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_72(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,  KC_BSLS,           KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,           KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  KC_RCTL, MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_72(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS, KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC, KC_RBRC,  KC_BSLS,           KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,           KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,           KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LGUI,  KC_LALT,                             KC_SPC,                             KC_RALT,  KC_RCTL, MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_72(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD, KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______, _______,  _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______, _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_ansi_72(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU, _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______, _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______, _______,  _______, _______, _______),

    [_FN3] = LAYOUT_ansi_72(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,  _______,           _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______, _______,           _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______,           _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,           _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______, _______,  _______, _______, _______)
};

================
File: v7/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
     {
         // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 },
        { 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, __, 44, 45, 46 },
        { 47, __, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, __, 58, 59, 60 },
        { 61, 62, 63, __, __, __, 64, __, __, 65, 66, 67, 68, 69, 70, 71 },
    },
    {
        // LED Index to Physical Position
        {0,0},  {14,0},  {28,0},  {42,0},  {56,0},  {70,0},  {84,0},  {98,0},   {112,0},  {126,0},  {140,0},  {154,0},  {168,0},  {189,0},            {210,0},  {224,0},
        {4,16}, {21,16}, {35,16}, {49,16}, {63,16}, {77,16}, {91,16}, {105,16}, {119,16}, {133,16}, {147,16}, {161,16}, {175,16}, {192,16},           {210,16}, {224,16},
        {5,32}, {25,32}, {38,32}, {52,32}, {66,32}, {80,32}, {94,32}, {108,32}, {122,32}, {136,32}, {150,32}, {164,32},           {187,32},           {210,32}, {224,32},
        {9,48},          {32,48}, {45,48}, {59,48}, {73,48}, {87,48}, {101,48}, {115,48}, {129,48}, {143,48}, {157,48},           {184,48},           {210,48}, {224,48},
        {2,64}, {19,64}, {37,64},                            {89,64},                               {140,64}, {154,64}, {168,64}, {182,64}, {196,64}, {210,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1, 1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v7/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 32

================
File: v7/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V7",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0370",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "B5"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_72": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},
                {"matrix": [0, 14], "x": 15, "y": 0},
                {"matrix": [0, 15], "x": 16, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 13], "x": 13.5, "y": 1, "w": 1.5},
                {"matrix": [1, 14], "x": 15, "y": 1},
                {"matrix": [1, 15], "x": 16, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2, "w": 2.25},
                {"matrix": [2, 14], "x": 15, "y": 2},
                {"matrix": [2, 15], "x": 16, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},
                {"matrix": [3, 14], "x": 15, "y": 3},
                {"matrix": [3, 15], "x": 16, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 9], "x": 10, "y": 4},
                {"matrix": [4, 10], "x": 11, "y": 4},
                {"matrix": [4, 11], "x": 12, "y": 4},
                {"matrix": [4, 12], "x": 13, "y": 4},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},
                {"matrix": [4, 15], "x": 16, "y": 4}
            ]
        }
    }
}

================
File: v7/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_73(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                     KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LOPT,  KC_LCMD,                             KC_SPC,                             KC_RCMD,  KC_RCTL,  MO(_FN1), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_73(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,           KC_INS,  RM_NEXT,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                     KC_END,  KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,            KC_HOME, KC_PGUP,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,   KC_SLSH,            KC_RSFT,           KC_UP,   KC_PGDN,
        KC_LCTL, KC_LWIN,  KC_LALT,                             KC_SPC,                             KC_RALT,  KC_RCTL,  MO(_FN2), MO(_FN3), KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_73(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______,  _______, _______, _______),

    [_FN2] = LAYOUT_iso_73(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU, KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,           _______, RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, NK_TOGG, _______, _______, _______,  _______,            _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______,  _______, _______, _______),

    [_FN3] = LAYOUT_iso_73(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,           _______, _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______, _______, _______, _______, _______,  _______,  _______,                     _______, _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______, _______, _______, _______, _______,  _______,  _______,  _______,           _______, _______,
        _______, _______,  _______,  _______, _______, _______, _______, _______, _______, _______, _______,  _______,            _______,           _______, _______,
        _______, _______,  _______,                             _______,                            _______,  _______,  _______,  _______,  _______, _______, _______)
};

================
File: v7/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 31

================
File: v7/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {0, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {0, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {0, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {0, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {0, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {0, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {0, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {0, CB3_CA13,   CB1_CA13,   CB2_CA13},
    {0, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {0, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {0, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {0, CB6_CA16,   CB4_CA16,   CB5_CA16},

    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA16,   CB7_CA16,   CB8_CA16},

    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA11,   CB1_CA11,   CB2_CA11},
    {1, CB3_CA12,   CB1_CA12,   CB2_CA12},
    {1, CB3_CA14,   CB1_CA14,   CB2_CA14},
    {1, CB3_CA15,   CB1_CA15,   CB2_CA15},
    {1, CB3_CA16,   CB1_CA16,   CB2_CA16},

    {1, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {1, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA16,   CB4_CA16,   CB5_CA16},
};

#define __ NO_LED

led_config_t g_led_config = {
     {
         // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 },
        { 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 44, 29, 30 },
        { 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, __, 43, 45, 46 },
        { 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, __, 59, 60, 61 },
        { 62, 63, 64, __, __, __, 65, __, __, 66, 67, 68, 69, 70, 71, 72 },
    },
    {
        // LED Index to Physical Position
        {0,0},  {14,0},  {28,0},  {42,0},  {56,0},  {70,0},  {84,0},  {98,0},   {112,0},  {126,0},  {140,0},  {154,0},  {168,0},  {189,0},            {210,0},  {224,0},
        {4,16}, {21,16}, {35,16}, {49,16}, {63,16}, {77,16}, {91,16}, {105,16}, {119,16}, {133,16}, {147,16}, {161,16}, {175,16},                     {210,16}, {224,16},
        {5,32}, {25,32}, {38,32}, {52,32}, {66,32}, {80,32}, {94,32}, {108,32}, {122,32}, {136,32}, {150,32}, {164,32}, {178,32}, {197,27},           {210,32}, {224,32},
        {2,48}, {18,48}, {32,48}, {45,48}, {59,48}, {73,48}, {87,48}, {101,48}, {115,48}, {129,48}, {143,48}, {157,48},           {184,48},           {210,48}, {224,48},
        {2,64}, {19,64}, {37,64},                            {89,64},                               {140,64}, {154,64}, {168,64}, {182,64}, {196,64}, {210,64}, {224,64},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1, 1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1, 1,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v7/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V7",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0372",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "A10", "B5"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_iso_73": {
            "layout": [
                {"matrix": [0, 0], "x": 0, "y": 0},
                {"matrix": [0, 1], "x": 1, "y": 0},
                {"matrix": [0, 2], "x": 2, "y": 0},
                {"matrix": [0, 3], "x": 3, "y": 0},
                {"matrix": [0, 4], "x": 4, "y": 0},
                {"matrix": [0, 5], "x": 5, "y": 0},
                {"matrix": [0, 6], "x": 6, "y": 0},
                {"matrix": [0, 7], "x": 7, "y": 0},
                {"matrix": [0, 8], "x": 8, "y": 0},
                {"matrix": [0, 9], "x": 9, "y": 0},
                {"matrix": [0, 10], "x": 10, "y": 0},
                {"matrix": [0, 11], "x": 11, "y": 0},
                {"matrix": [0, 12], "x": 12, "y": 0},
                {"matrix": [0, 13], "x": 13, "y": 0, "w": 2},
                {"matrix": [0, 14], "x": 15, "y": 0},
                {"matrix": [0, 15], "x": 16, "y": 0},

                {"matrix": [1, 0], "x": 0, "y": 1, "w": 1.5},
                {"matrix": [1, 1], "x": 1.5, "y": 1},
                {"matrix": [1, 2], "x": 2.5, "y": 1},
                {"matrix": [1, 3], "x": 3.5, "y": 1},
                {"matrix": [1, 4], "x": 4.5, "y": 1},
                {"matrix": [1, 5], "x": 5.5, "y": 1},
                {"matrix": [1, 6], "x": 6.5, "y": 1},
                {"matrix": [1, 7], "x": 7.5, "y": 1},
                {"matrix": [1, 8], "x": 8.5, "y": 1},
                {"matrix": [1, 9], "x": 9.5, "y": 1},
                {"matrix": [1, 10], "x": 10.5, "y": 1},
                {"matrix": [1, 11], "x": 11.5, "y": 1},
                {"matrix": [1, 12], "x": 12.5, "y": 1},
                {"matrix": [1, 14], "x": 15, "y": 1},
                {"matrix": [1, 15], "x": 16, "y": 1},

                {"matrix": [2, 0], "x": 0, "y": 2, "w": 1.75},
                {"matrix": [2, 1], "x": 1.75, "y": 2},
                {"matrix": [2, 2], "x": 2.75, "y": 2},
                {"matrix": [2, 3], "x": 3.75, "y": 2},
                {"matrix": [2, 4], "x": 4.75, "y": 2},
                {"matrix": [2, 5], "x": 5.75, "y": 2},
                {"matrix": [2, 6], "x": 6.75, "y": 2},
                {"matrix": [2, 7], "x": 7.75, "y": 2},
                {"matrix": [2, 8], "x": 8.75, "y": 2},
                {"matrix": [2, 9], "x": 9.75, "y": 2},
                {"matrix": [2, 10], "x": 10.75, "y": 2},
                {"matrix": [2, 11], "x": 11.75, "y": 2},
                {"matrix": [2, 13], "x": 12.75, "y": 2},
                {"matrix": [1, 13], "x": 13.75, "y": 1, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 15, "y": 2},
                {"matrix": [2, 15], "x": 16, "y": 2},

                {"matrix": [3, 0], "x": 0, "y": 3, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3},
                {"matrix": [3, 2], "x": 2.25, "y": 3},
                {"matrix": [3, 3], "x": 3.25, "y": 3},
                {"matrix": [3, 4], "x": 4.25, "y": 3},
                {"matrix": [3, 5], "x": 5.25, "y": 3},
                {"matrix": [3, 6], "x": 6.25, "y": 3},
                {"matrix": [3, 7], "x": 7.25, "y": 3},
                {"matrix": [3, 8], "x": 8.25, "y": 3},
                {"matrix": [3, 9], "x": 9.25, "y": 3},
                {"matrix": [3, 10], "x": 10.25, "y": 3},
                {"matrix": [3, 11], "x": 11.25, "y": 3},
                {"matrix": [3, 13], "x": 12.25, "y": 3, "w": 2.75},
                {"matrix": [3, 14], "x": 15, "y": 3},
                {"matrix": [3, 15], "x": 16, "y": 3},

                {"matrix": [4, 0], "x": 0, "y": 4, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4, "w": 1.25},
                {"matrix": [4, 2], "x": 2.5, "y": 4, "w": 1.25},
                {"matrix": [4, 6], "x": 3.75, "y": 4, "w": 6.25},
                {"matrix": [4, 9], "x": 10, "y": 4},
                {"matrix": [4, 10], "x": 11, "y": 4},
                {"matrix": [4, 11], "x": 12, "y": 4},
                {"matrix": [4, 12], "x": 13, "y": 4},
                {"matrix": [4, 13], "x": 14, "y": 4},
                {"matrix": [4, 14], "x": 15, "y": 4},
                {"matrix": [4, 15], "x": 16, "y": 4}
            ]
        }
    }
}

================
File: v7/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE { 0xFC, 0xFC, 0x70, 0xFC, 0xFC, 0x70, 0xFC, 0xFC, 0x70, 0xFC, 0xFC, 0x70 }

#define DYNAMIC_KEYMAP_LAYER_COUNT 5

================
File: v7/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v7/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v7/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v7/readme.md
================
# Keychron V7

A customizable 70% keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V7
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v7/ansi:default

Flashing example for this keyboard:

    make keychron/v7/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v7/v7.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX

================
File: v8/ansi/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_ansi_69(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

================
File: v8/ansi/ansi.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    // {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#define __ NO_LED

led_config_t g_led_config = {
     {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
        { 30, 31, 32, 33, 34, 35, __, 36, 37, 38, 39, 40, 41, 42, 43 },
        { 44, __, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 },
        { 58, 59, 60, 61, __, __, 62, 63, 64, 65, __, __, 66, 67, 68 },
    },
    {
        // LED Index to Physical Position
        {7,1},  {20,1},  {33,0},  {48,3},  {61,6},  {74,8 }, {87,11},  {106,11}, {119,8},  {132,6},  {145,3},  {160,0},  {173,1},  {193,1},            {220,0},
        {7,14}, {24,14}, {39,14}, {52,17}, {65,20}, {78,22}, {103,25}, {116,22}, {129,20}, {142,17}, {155,14}, {170,14}, {183,14}, {200,14},           {222,16},
        {6,27}, {24,27}, {39,28}, {52,30}, {65,33}, {78,36},           {109,37}, {122,34}, {135,32}, {148,29}, {162,27}, {176,27}, {197,27},           {224,29},
        {7,40},          {28,40}, {43,42}, {56,44}, {69,47}, {82,50},  {102,52}, {115,49}, {128,46}, {141,44}, {154,41}, {169,40}, {187,40}, {209,43},
        {0,53}, {17,53}, {42,55},          {65,60},          {86,64},  {107,64},           {131,59},           {156,54},           {196,56}, {209,56}, {222,56},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4,    4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    4,    1,    1, 4,    1,    1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v8/ansi/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v8/ansi/keyboard.json
================
{
    "keyboard_name": "Keychron V8",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0380",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_69": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 13], "x": 16.25, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.75, "y": 2.25},
                {"matrix": [2, 12], "x": 14.75, "y": 2.25},
                {"matrix": [2, 13], "x": 15.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: v8/ansi_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_ansi_69(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,  KC_BSLS,          KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,              KC_H,    KC_J,    KC_K,    KC_L,     KC_SCLN,  KC_QUOT,  KC_ENT,           KC_HOME,
        KC_LSFT,           KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_ansi_69(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_ansi_69(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD,           _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______,           _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v8/ansi_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v8/ansi_encoder/ansi_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    // {1, CB3_CA9,    CB1_CA9,    CB2_CA9},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#define __ NO_LED

led_config_t g_led_config = {
     {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 },
        { 30, 31, 32, 33, 34, 35, __, 36, 37, 38, 39, 40, 41, 42, 43 },
        { 44, __, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 },
        { 58, 59, 60, 61, __, __, 62, 63, 64, 65, __, __, 66, 67, 68 },
    },
    {
        // LED Index to Physical Position
        {7,1},  {20,1},  {33,0},  {48,3},  {61,6},  {74,8 }, {87,11},  {106,11}, {119,8},  {132,6},  {145,3},  {160,0},  {173,1},  {193,1},            {220,0},
        {7,14}, {24,14}, {39,14}, {52,17}, {65,20}, {78,22}, {103,25}, {116,22}, {129,20}, {142,17}, {155,14}, {170,14}, {183,14}, {200,14},           {222,16},
        {6,27}, {24,27}, {39,28}, {52,30}, {65,33}, {78,36},           {109,37}, {122,34}, {135,32}, {148,29}, {162,27}, {176,27}, {197,27},           {224,29},
        {7,40},          {28,40}, {43,42}, {56,44}, {69,47}, {82,50},  {102,52}, {115,49}, {128,46}, {141,44}, {154,41}, {169,40}, {187,40}, {209,43},
        {0,53}, {17,53}, {42,55},          {65,60},          {86,64},  {107,64},           {131,59},           {156,54},           {196,56}, {209,56}, {222,56},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,
        8, 4, 4, 4, 4, 4,    4, 4, 4, 4, 4, 4, 1,    1,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    4,    1,    1, 4,    1,    1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v8/ansi_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 30

================
File: v8/ansi_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V8",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0381",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "encoder": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_ansi_69": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 13], "x": 16.25, "y": 1.25, "w": 1.5},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 7], "x": 9.25, "y": 2.25},
                {"matrix": [2, 8], "x": 10.25, "y": 2.25},
                {"matrix": [2, 9], "x": 11.25, "y": 2.25},
                {"matrix": [2, 10], "x": 12.25, "y": 2.25},
                {"matrix": [2, 11], "x": 13.75, "y": 2.25},
                {"matrix": [2, 12], "x": 14.75, "y": 2.25},
                {"matrix": [2, 13], "x": 15.75, "y": 2.25, "w": 2.25},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 2.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: v8/iso/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers{
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),         KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,    KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_INS,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,    KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,    KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,    KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),         KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_iso_70(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,   KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______, _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______, _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______, _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,          _______,           _______,            _______, _______, _______)
};

================
File: v8/iso/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: v8/iso/iso.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#define __ NO_LED

led_config_t g_led_config = {
     {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 28 },
        { 29, 30, 31, 32, 33, 34, __, 35, 36, 37, 38, 39, 40, 41, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
        { 59, 60, 61, 62, __, __, 63, 64, 65, 66, __, __, 67, 68, 69 },
    },
    {
        // LED Index to Physical Position
        {7,1},  {20,1},  {33,0},  {48,3},  {61,6},  {74,8},  {87,11},  {106,11}, {119,8},  {132,6},  {145,3},  {160,0},  {173,1},  {193,1},            {220,0},
        {7,14}, {24,14}, {39,14}, {52,17}, {65,19}, {78,22}, {103,25}, {116,22}, {129,20}, {142,17}, {155,14}, {172,14}, {186,14},                     {222,16},
        {6,27}, {24,27}, {39,27}, {52,30}, {65,33}, {78,35}, {109,37}, {122,34}, {135,31}, {148,29}, {162,27}, {176,27}, {189,27}, {207,22},           {224,29},
        {0,40}, {15,40}, {28,40}, {43,41}, {56,44}, {69,47}, {82,49},  {102,51}, {115,49}, {128,46}, {141,43}, {154,41}, {169,40}, {187,40}, {209,43},
        {0,52}, {17,52}, {42,54},          {65,59},          {86,63},  {104,64},           {129,59},           {153,54},           {196,56}, {209,56}, {222,59},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1,    1,    1, 1,    1,    1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v8/iso/keyboard.json
================
{
    "keyboard_name": "Keychron V8",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0382",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_iso_70": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0.25},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 9.25, "y": 2.25},
                {"matrix": [2, 7], "x": 10.25, "y": 2.25},
                {"matrix": [2, 8], "x": 11.25, "y": 2.25},
                {"matrix": [2, 9], "x": 12.25, "y": 2.25},
                {"matrix": [2, 10], "x": 13.5, "y": 2.25},
                {"matrix": [2, 11], "x": 14.5, "y": 2.25},
                {"matrix": [2, 13], "x": 15.5, "y": 2.25},
                {"matrix": [1, 13], "x": 16.5, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: v8/iso_encoder/keymaps/default/keymap.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include QMK_KEYBOARD_H

// clang-format off

enum layers {
    MAC_BASE,
    WIN_BASE,
    _FN1,
    _FN2,
    _FN3
};

#define KC_TASK LGUI(KC_TAB)
#define KC_FLXP LGUI(KC_E)

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [MAC_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,     KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,     KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,     KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,     KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LOPT,  KC_LCMD,           KC_SPC,           MO(_FN1), MO(_FN3),          KC_SPC,            KC_RCMD,            KC_LEFT, KC_DOWN, KC_RGHT),

    [WIN_BASE] = LAYOUT_iso_70(
        KC_ESC,  KC_1,     KC_2,     KC_3,    KC_4,    KC_5,    KC_6,     KC_7,     KC_8,    KC_9,    KC_0,     KC_MINS,  KC_EQL,   KC_BSPC,          KC_MUTE,
        KC_TAB,  KC_Q,     KC_W,     KC_E,    KC_R,    KC_T,    KC_Y,     KC_U,     KC_I,    KC_O,    KC_P,     KC_LBRC,  KC_RBRC,                    KC_DEL,
        KC_CAPS, KC_A,     KC_S,     KC_D,    KC_F,    KC_G,    KC_H,     KC_J,     KC_K,    KC_L,    KC_SCLN,  KC_QUOT,  KC_NUHS,  KC_ENT,           KC_HOME,
        KC_LSFT, KC_NUBS,  KC_Z,     KC_X,    KC_C,    KC_V,    KC_B,     KC_B,     KC_N,    KC_M,    KC_COMM,  KC_DOT,   KC_SLSH,  KC_RSFT, KC_UP,
        KC_LCTL, KC_LWIN,  KC_LALT,           KC_SPC,           MO(_FN2), MO(_FN3),          KC_SPC,            KC_RALT,            KC_LEFT, KC_DOWN, KC_RGHT),

    [_FN1] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_NO,   KC_NO,   RM_VALD, RM_VALU,  KC_MPRV,  KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______),

    [_FN2] = LAYOUT_iso_70(
        KC_GRV,  KC_BRID,  KC_BRIU,  KC_TASK, KC_FLXP, RM_VALD, RM_VALU,  KC_MPRV,  KC_MPLY, KC_MNXT, KC_MUTE,  KC_VOLD,  KC_VOLU,  _______,          RM_TOGG,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  NK_TOGG, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______),

    [_FN3] = LAYOUT_iso_70(
        KC_TILD, KC_F1,    KC_F2,    KC_F3,   KC_F4,   KC_F5,   KC_F6,    KC_F7,    KC_F8,   KC_F9,   KC_F10,   KC_F11,   KC_F12,   _______,          _______,
        RM_TOGG, RM_NEXT,  RM_VALU,  RM_HUEU, RM_SATU, RM_SPDU, _______,  _______,  _______, _______, _______,  _______,  _______,                    _______,
        _______, RM_PREV,  RM_VALD,  RM_HUED, RM_SATD, RM_SPDD, _______,  _______,  _______, _______, _______,  _______,  _______,  _______,          _______,
        _______, _______,  _______,  _______, _______, _______, _______,  _______,  _______, _______, _______,  _______,  _______,  _______, _______,
        _______, _______,  _______,           _______,          _______,  _______,           _______,           _______,            _______, _______, _______)
};

#if defined(ENCODER_MAP_ENABLE)
const uint16_t PROGMEM encoder_map[][NUM_ENCODERS][NUM_DIRECTIONS] = {
    [MAC_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [WIN_BASE] = {ENCODER_CCW_CW(KC_VOLD, KC_VOLU)},
    [_FN1]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN2]   = {ENCODER_CCW_CW(RM_VALD, RM_VALU)},
    [_FN3]   = {ENCODER_CCW_CW(_______, _______)}
};
#endif // ENCODER_MAP_ENABLE

================
File: v8/iso_encoder/keymaps/default/rules.mk
================
ENCODER_MAP_ENABLE = yes

================
File: v8/iso_encoder/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* Encoder Configuration */
#define ENCODER_DEFAULT_POS 0x3

/* Enable caps-lock LED */
#define CAPS_LOCK_LED_INDEX 29

================
File: v8/iso_encoder/iso_encoder.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef RGB_MATRIX_ENABLE

// clang-format off

const snled27351_led_t PROGMEM g_snled27351_leds[SNLED27351_LED_COUNT] = {
/* Refer to SNLED27351 manual for these locations
 *   driver
 *   |  R location
 *   |  |       G location
 *   |  |       |       B location
 *   |  |       |       | */
    {0, CB9_CA1,    CB7_CA1,    CB8_CA1},
    {0, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {0, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {0, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {0, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {0, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {0, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {0, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {0, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {0, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {0, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {0, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {0, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {0, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {0, CB9_CA15,   CB7_CA15,   CB8_CA15},

    {0, CB6_CA1,    CB4_CA1,    CB5_CA1},
    {0, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {0, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {0, CB6_CA4,    CB4_CA4,    CB5_CA4},
    {0, CB6_CA5,    CB4_CA5,    CB5_CA5},
    {0, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {0, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {0, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {0, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {0, CB6_CA10,   CB4_CA10,   CB5_CA10},
    {0, CB6_CA11,   CB4_CA11,   CB5_CA11},
    {0, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {0, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {0, CB6_CA15,   CB4_CA15,   CB5_CA15},

    {0, CB3_CA1,    CB1_CA1,    CB2_CA1},
    {0, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {0, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {0, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA10,   CB1_CA10,   CB2_CA10},
    {1, CB3_CA8,    CB1_CA8,    CB2_CA8},
    {1, CB3_CA7,    CB1_CA7,    CB2_CA7},
    {1, CB3_CA6,    CB1_CA6,    CB2_CA6},
    {1, CB3_CA5,    CB1_CA5,    CB2_CA5},
    {1, CB3_CA4,    CB1_CA4,    CB2_CA4},
    {1, CB3_CA3,    CB1_CA3,    CB2_CA3},
    {1, CB3_CA2,    CB1_CA2,    CB2_CA2},
    {0, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB3_CA1,    CB1_CA1,    CB2_CA1},

    {1, CB9_CA15,   CB7_CA15,   CB8_CA15},
    {1, CB9_CA14,   CB7_CA14,   CB8_CA14},
    {1, CB9_CA13,   CB7_CA13,   CB8_CA13},
    {1, CB9_CA12,   CB7_CA12,   CB8_CA12},
    {1, CB9_CA11,   CB7_CA11,   CB8_CA11},
    {1, CB9_CA10,   CB7_CA10,   CB8_CA10},
    {1, CB9_CA9,    CB7_CA9,    CB8_CA9},
    {1, CB9_CA8,    CB7_CA8,    CB8_CA8},
    {1, CB9_CA7,    CB7_CA7,    CB8_CA7},
    {1, CB9_CA6,    CB7_CA6,    CB8_CA6},
    {1, CB9_CA5,    CB7_CA5,    CB8_CA5},
    {1, CB9_CA4,    CB7_CA4,    CB8_CA4},
    {1, CB9_CA3,    CB7_CA3,    CB8_CA3},
    {1, CB9_CA2,    CB7_CA2,    CB8_CA2},
    {1, CB9_CA1,    CB7_CA1,    CB8_CA1},

    {1, CB6_CA15,   CB4_CA15,   CB5_CA15},
    {1, CB6_CA14,   CB4_CA14,   CB5_CA14},
    {1, CB6_CA13,   CB4_CA13,   CB5_CA13},
    {1, CB6_CA12,   CB4_CA12,   CB5_CA12},
    {1, CB6_CA9,    CB4_CA9,    CB5_CA9},
    {1, CB6_CA8,    CB4_CA8,    CB5_CA8},
    {1, CB6_CA7,    CB4_CA7,    CB5_CA7},
    {1, CB6_CA6,    CB4_CA6,    CB5_CA6},
    {1, CB6_CA3,    CB4_CA3,    CB5_CA3},
    {1, CB6_CA2,    CB4_CA2,    CB5_CA2},
    {1, CB6_CA1,    CB4_CA1,    CB5_CA1}
};

#define __ NO_LED

led_config_t g_led_config = {
     {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14 },
        { 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 42, 28 },
        { 29, 30, 31, 32, 33, 34, __, 35, 36, 37, 38, 39, 40, 41, 43 },
        { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
        { 59, 60, 61, 62, __, __, 63, 64, 65, 66, __, __, 67, 68, 69 },
    },
    {
        // LED Index to Physical Position
        {7,1},  {20,1},  {33,0},  {48,3},  {61,6},  {74,8},  {87,11},  {106,11}, {119,8},  {132,6},  {145,3},  {160,0},  {173,1},  {193,1},            {220,0},
        {7,14}, {24,14}, {39,14}, {52,17}, {65,19}, {78,22}, {103,25}, {116,22}, {129,20}, {142,17}, {155,14}, {172,14}, {186,14},                     {222,16},
        {6,27}, {24,27}, {39,27}, {52,30}, {65,33}, {78,35}, {109,37}, {122,34}, {135,31}, {148,29}, {162,27}, {176,27}, {189,27}, {207,22},           {224,29},
        {0,40}, {15,40}, {28,40}, {43,41}, {56,44}, {69,47}, {82,49},  {102,51}, {115,49}, {128,46}, {141,43}, {154,41}, {169,40}, {187,40}, {209,43},
        {0,52}, {17,52}, {42,54},          {65,59},          {86,63},  {104,64},           {129,59},           {153,54},           {196,56}, {209,56}, {222,59},
    },
    {
        // RGB LED Index to Flag
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,       1,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,    1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1,
        1, 1, 1,    1,    1,    1, 1,    1,    1, 1, 1,
    }
};

#endif // RGB_MATRIX_ENABLE

================
File: v8/iso_encoder/keyboard.json
================
{
    "keyboard_name": "Keychron V8",
    "manufacturer": "Keychron",
    "url": "https://github.com/Keychron",
    "maintainer": "lalalademaxiya1",
    "usb": {
        "vid": "0x3434",
        "pid": "0x0383",
        "device_version": "1.0.0"
    },
    "features": {
        "bootmagic": true,
        "command": false,
        "console": false,
        "dip_switch": true,
        "encoder": true,
        "extrakey": true,
        "mousekey": true,
        "nkro": true,
        "rgb_matrix": true
    },
    "matrix_pins": {
        "cols": ["C14", "C15", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "A8", "A9", "H3"],
        "rows": ["B4", "B3", "A15", "A14", "A13"]
    },
    "diode_direction": "ROW2COL",
    "encoder": {
        "rotary": [
            {"pin_a": "A10", "pin_b": "B5"}
        ]
    },
    "processor": "STM32L432",
    "bootloader": "stm32-dfu",
    "layouts": {
        "LAYOUT_iso_70": {
            "layout": [
                {"matrix": [0, 0], "x": 0.75, "y": 0.25},
                {"matrix": [0, 1], "x": 1.75, "y": 0.25},
                {"matrix": [0, 2], "x": 2.75, "y": 0},
                {"matrix": [0, 3], "x": 3.75, "y": 0.25},
                {"matrix": [0, 4], "x": 4.75, "y": 0.25},
                {"matrix": [0, 5], "x": 5.75, "y": 0.25},
                {"matrix": [0, 6], "x": 6.75, "y": 0.25},
                {"matrix": [0, 7], "x": 9.5, "y": 0.25},
                {"matrix": [0, 8], "x": 10.5, "y": 0.25},
                {"matrix": [0, 9], "x": 11.5, "y": 0.25},
                {"matrix": [0, 10], "x": 12.5, "y": 0.25},
                {"matrix": [0, 11], "x": 13.5, "y": 0},
                {"matrix": [0, 12], "x": 14.5, "y": 0.25},
                {"matrix": [0, 13], "x": 15.5, "y": 0.25, "w": 2},
                {"matrix": [0, 14], "x": 18, "y": 0.25},

                {"matrix": [1, 0], "x": 0.5, "y": 1.25, "w": 1.5},
                {"matrix": [1, 1], "x": 2, "y": 1.25},
                {"matrix": [1, 2], "x": 3.25, "y": 1.25},
                {"matrix": [1, 3], "x": 4.25, "y": 1.25},
                {"matrix": [1, 4], "x": 5.25, "y": 1.25},
                {"matrix": [1, 5], "x": 6.25, "y": 1.25},
                {"matrix": [1, 6], "x": 9, "y": 1.25},
                {"matrix": [1, 7], "x": 10, "y": 1.25},
                {"matrix": [1, 8], "x": 11, "y": 1.25},
                {"matrix": [1, 9], "x": 12, "y": 1.25},
                {"matrix": [1, 10], "x": 13.25, "y": 1.25},
                {"matrix": [1, 11], "x": 14.25, "y": 1.25},
                {"matrix": [1, 12], "x": 15.25, "y": 1.25},
                {"matrix": [1, 14], "x": 18.25, "y": 1.5},

                {"matrix": [2, 0], "x": 0.25, "y": 2.25, "w": 1.75},
                {"matrix": [2, 1], "x": 2, "y": 2.25},
                {"matrix": [2, 2], "x": 3.5, "y": 2.25},
                {"matrix": [2, 3], "x": 4.5, "y": 2.25},
                {"matrix": [2, 4], "x": 5.5, "y": 2.25},
                {"matrix": [2, 5], "x": 6.5, "y": 2.25},
                {"matrix": [2, 6], "x": 9.25, "y": 2.25},
                {"matrix": [2, 7], "x": 10.25, "y": 2.25},
                {"matrix": [2, 8], "x": 11.25, "y": 2.25},
                {"matrix": [2, 9], "x": 12.25, "y": 2.25},
                {"matrix": [2, 10], "x": 13.5, "y": 2.25},
                {"matrix": [2, 11], "x": 14.5, "y": 2.25},
                {"matrix": [2, 13], "x": 15.5, "y": 2.25},
                {"matrix": [1, 13], "x": 16.5, "y": 1.25, "w": 1.25, "h": 2},
                {"matrix": [2, 14], "x": 18.5, "y": 2.5},

                {"matrix": [3, 0], "x": 0, "y": 3.25, "w": 1.25},
                {"matrix": [3, 1], "x": 1.25, "y": 3.25},
                {"matrix": [3, 2], "x": 2.25, "y": 3.25},
                {"matrix": [3, 3], "x": 3.75, "y": 3.25},
                {"matrix": [3, 4], "x": 4.75, "y": 3.25},
                {"matrix": [3, 5], "x": 5.75, "y": 3.25},
                {"matrix": [3, 6], "x": 6.75, "y": 3.25},
                {"matrix": [3, 7], "x": 8.5, "y": 3.25},
                {"matrix": [3, 8], "x": 9.5, "y": 3.25},
                {"matrix": [3, 9], "x": 10.5, "y": 3.25},
                {"matrix": [3, 10], "x": 11.5, "y": 3.25},
                {"matrix": [3, 11], "x": 12.5, "y": 3.25},
                {"matrix": [3, 12], "x": 14.25, "y": 3.25},
                {"matrix": [3, 13], "x": 15.25, "y": 3.25, "w": 1.75},
                {"matrix": [3, 14], "x": 17.25, "y": 3.5},

                {"matrix": [4, 0], "x": 0, "y": 4.25, "w": 1.25},
                {"matrix": [4, 1], "x": 1.25, "y": 4.25, "w": 1.25},
                {"matrix": [4, 2], "x": 3.75, "y": 4.25, "w": 1.25},
                {"matrix": [4, 3], "x": 5, "y": 4.25, "w": 2.25},
                {"matrix": [4, 6], "x": 7.25, "y": 4.25},
                {"matrix": [4, 7], "x": 8.75, "y": 4.25},
                {"matrix": [4, 8], "x": 9.75, "y": 4.25, "w": 2.75},
                {"matrix": [4, 9], "x": 12.5, "y": 4.25},
                {"matrix": [4, 12], "x": 16.25, "y": 4.5},
                {"matrix": [4, 13], "x": 17.25, "y": 4.5},
                {"matrix": [4, 14], "x": 18.25, "y": 4.5}
            ]
        }
    }
}

================
File: v8/config.h
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/* If uses PH3 with a stronger pull resistor then the following definition should be included */
// #define MATRIX_UNSELECT_DRIVE_HIGH

/* RGB Matrix Driver Configuration */
#define SNLED27351_I2C_ADDRESS_1 SNLED27351_I2C_ADDRESS_VDDIO
#define SNLED27351_I2C_ADDRESS_2 SNLED27351_I2C_ADDRESS_GND

/* Increase I2C speed to 1000 KHz */
#define I2C1_TIMINGR_PRESC 0U
#define I2C1_TIMINGR_SCLDEL 3U
#define I2C1_TIMINGR_SDADEL 0U
#define I2C1_TIMINGR_SCLH 15U
#define I2C1_TIMINGR_SCLL 51U

#define SNLED27351_PHASE_CHANNEL SNLED27351_SCAN_PHASE_9_CHANNEL
#define SNLED27351_CURRENT_TUNE { 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60, 0xC4, 0xC4, 0x60 }

#define DYNAMIC_KEYMAP_LAYER_COUNT 5

================
File: v8/halconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#define HAL_USE_I2C TRUE

#include_next <halconf.h>

================
File: v8/info.json
================
{
    "eeprom": {
        "wear_leveling": {
            "backing_size": 4096
        }
    },
    "dip_switch": {
        "matrix_grid": [ [4, 4] ]
    },
    "rgb_matrix": {
        "animations": {
            "breathing": true,
            "band_spiral_val": true,
            "cycle_all": true,
            "cycle_left_right": true,
            "cycle_up_down": true,
            "rainbow_moving_chevron": true,
            "cycle_out_in": true,
            "cycle_out_in_dual": true,
            "cycle_pinwheel": true,
            "cycle_spiral": true,
            "dual_beacon": true,
            "rainbow_beacon": true,
            "jellybean_raindrops": true,
            "pixel_rain": true,
            "typing_heatmap": true,
            "digital_rain": true,
            "solid_reactive_simple": true,
            "solid_reactive_multiwide": true,
            "solid_reactive_multinexus": true,
            "splash": true,
            "solid_splash": true
        },
        "driver": "snled27351",
        "sleep": true
    }
}

================
File: v8/mcuconf.h
================
/* Copyright 2020 QMK
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include_next <mcuconf.h>

#undef STM32_I2C_USE_I2C1
#define STM32_I2C_USE_I2C1 TRUE

================
File: v8/readme.md
================
# Keychron V8

A customizable 65% and ergonomic keyboard.

* Keyboard Maintainer: [Keychron](https://github.com/keychron)
* Hardware Supported: Keychron V8
* Hardware Availability: [Keychron](https://www.keychron.com)

Make example for this keyboard (after setting up your build environment):

    make keychron/v8/ansi:default

Flashing example for this keyboard:

    make keychron/v8/ansi:default:flash

**Reset Key**: Hold down the key located at *K00*, commonly programmed as *Esc* while plugging in the keyboard.

See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/newbs).

================
File: v8/v8.c
================
/* Copyright 2022 @ Keychron (https://www.keychron.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "quantum.h"

#ifdef DIP_SWITCH_ENABLE

bool dip_switch_update_kb(uint8_t index, bool active) {
    if (!dip_switch_update_user(index, active)) { return false;}
    if (index == 0) {
        default_layer_set(1UL << (active ? 1 : 0));
    }
    return true;
}

#endif // DIP_SWITCH_ENABLE

#if defined(RGB_MATRIX_ENABLE) && defined(CAPS_LOCK_LED_INDEX)

bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
    if (!process_record_user(keycode, record)) { return false; }
    switch (keycode) {
#ifdef RGB_MATRIX_ENABLE
        case QK_RGB_MATRIX_TOGGLE:
            if (record->event.pressed) {
                switch (rgb_matrix_get_flags()) {
                    case LED_FLAG_ALL: {
                        rgb_matrix_set_flags(LED_FLAG_NONE);
                        rgb_matrix_set_color_all(0, 0, 0);
                    } break;
                    default: {
                        rgb_matrix_set_flags(LED_FLAG_ALL);
                    } break;
                }
            }
            if (!rgb_matrix_is_enabled()) {
                rgb_matrix_set_flags(LED_FLAG_ALL);
                rgb_matrix_enable();
            }
            return false;
#endif
    }
    return true;
}

bool rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    if (!rgb_matrix_indicators_advanced_user(led_min, led_max)) { return false; }
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);

    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 255, 255, 255);
    } else {
        if (!rgb_matrix_get_flags()) {
           RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
    return true;
}

#endif // CAPS_LOCK_LED_INDEX



================================================================
End of Codebase
================================================================
